{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OM: Online Data Analysis for X-Ray Imaging What is OM? OM ( O nDA M onitor) is a framework for the development of programs that can monitor x-ray imaging experiments in real-time . It is also a set of ready-to-use monitoring programs. It is the spiritual successor of the OnDA Project and it is maintained mostly by the same team of developers. OM offers a set of stable and efficient real-time monitoring programs for the most common types of x-ray imaging experiments. These can be used immediately without modifications or can be easily adapted to meet the users\u2019 requirements. In addition, the project provides a set of modules that can be used to easily develop other monitoring programs, tailored to the characteristics of specific experiments. OM can process imaging data in the broadest sense : multidimensional pixel-based data (for example: diffraction patterns, photoemission spectrums, images from cameras, microscopes or x-ray detectors), but also any kind of digital output from an instrument or sensor (temperature readouts, beam and pulse energies, etc.). OM focuses on scalability and portability , in order to facilitate its adoption for a wide array of facilities and instruments. It also strives for stability and performance . To achieve these goals, OM processes data in a multi-node parallel environment, using free and open-source libraries and protocols. OM is written in Python . The use of the Python programming language, which is particularly suited to rapid development, makes OM easy to modify and to adapt to the requirements of specific experiments. OM also aims to keep its code base simple and as small . The focus is on providing useful core functionality, while allowing the framework to be expanded with external software. The goal is to avoid re-implementing algorithms that are already better optimized in other software packages. Recommended Citation If you use OM in your experiment, please keep citing the original OnDA paper until a new publication for OM is available: Mariani V., Morgan A., Yoon C.H., Lane T.J., White T.A., O'Grady C., Kuhn M., Aplin S., Koglin J., Barty A., Chapman H.N., OnDA: online data analysis and feedback for serial X-ray imaging. , J. Appl. Crystallogr. 2016 May 23;49(Pt 3):1073-1080. (https://www.ncbi.nlm.nih.gov/pubmed/27275150) Source Code OM is open source software. Its source code is published under the GPLv3 license and can be found on GitHub in the following repository: OM's source code","title":"What is OM?"},{"location":"#om-online-data-analysis-for-x-ray-imaging","text":"","title":"OM: Online Data Analysis for X-Ray Imaging"},{"location":"#what-is-om","text":"OM ( O nDA M onitor) is a framework for the development of programs that can monitor x-ray imaging experiments in real-time . It is also a set of ready-to-use monitoring programs. It is the spiritual successor of the OnDA Project and it is maintained mostly by the same team of developers. OM offers a set of stable and efficient real-time monitoring programs for the most common types of x-ray imaging experiments. These can be used immediately without modifications or can be easily adapted to meet the users\u2019 requirements. In addition, the project provides a set of modules that can be used to easily develop other monitoring programs, tailored to the characteristics of specific experiments. OM can process imaging data in the broadest sense : multidimensional pixel-based data (for example: diffraction patterns, photoemission spectrums, images from cameras, microscopes or x-ray detectors), but also any kind of digital output from an instrument or sensor (temperature readouts, beam and pulse energies, etc.). OM focuses on scalability and portability , in order to facilitate its adoption for a wide array of facilities and instruments. It also strives for stability and performance . To achieve these goals, OM processes data in a multi-node parallel environment, using free and open-source libraries and protocols. OM is written in Python . The use of the Python programming language, which is particularly suited to rapid development, makes OM easy to modify and to adapt to the requirements of specific experiments. OM also aims to keep its code base simple and as small . The focus is on providing useful core functionality, while allowing the framework to be expanded with external software. The goal is to avoid re-implementing algorithms that are already better optimized in other software packages.","title":"What is OM?"},{"location":"#recommended-citation","text":"If you use OM in your experiment, please keep citing the original OnDA paper until a new publication for OM is available: Mariani V., Morgan A., Yoon C.H., Lane T.J., White T.A., O'Grady C., Kuhn M., Aplin S., Koglin J., Barty A., Chapman H.N., OnDA: online data analysis and feedback for serial X-ray imaging. , J. Appl. Crystallogr. 2016 May 23;49(Pt 3):1073-1080. (https://www.ncbi.nlm.nih.gov/pubmed/27275150)","title":"Recommended Citation"},{"location":"#source-code","text":"OM is open source software. Its source code is published under the GPLv3 license and can be found on GitHub in the following repository: OM's source code","title":"Source Code"},{"location":"advanced_documentation/","text":"Advanced Documentation What is OM? OM's focus is on real-time (or quasi-real time) processing of experimental data. Real-time monitoring programs retrieve data from a facility as soon as possible, often immediately after data has been collected, before it is saved to disk. Some fast, simple analysis is usually performed on the data. The goal is to provide enough information to take quick decisions to the people running an experiment. These decisions can often change the direction of the experiment itself while it is still running, adapting it to new conditions and circumstances. Usually, it is not necessary to process all the data being collected in order to provide enough information for the decision making. For example, the hit rate for a Serial Crystallography experiment can be computed with high accuracy by analyzing only a portion of the collected data. It is however crucial that the information provided is up to date. Because of this, OM always prioritizes the processing of recently collected data over the processing of all collected data. Completeness is not the main priority, low latency in providing the information is. Additionally, the goal of OM is strictly to provide quick information to the people running the experiment, not any long-term analysis of the data: after the information is delivered, the data is discarded without being saved to disk, and new data is retrieved. In order to achieve high speed in data processing, OM takes advantage of a multi-node parallel architecture. Several processing units ( processing nodes in OM terminology) retrieve data events (a single frame or a collection of frames presented as a single unit) from a facility, and process them. A collecting node aggregates information from the processing nodes and performs computations over multiple events (averaging, etc.). The reduced data is finally presented the users in the console or sent to external programs for visualization. OM is mostly written using the Python programming language, however, some processing routines are implemented in other languages ( C , C++ ) for performance reasons. Goals of the OM Project The goal of the OM project is to provide users with a collection of modules that can can be used to easily build real-time monitoring programs. However, the project also aims at providing a set of stable and efficient real-time monitors for the most common types of x-ray imaging experiments. These programs can be used immediately without modifications or can be easily adapted to meet the users\u2019 requirements. Currently, only one of these monitoring programs is distributed with OM, focused on Serial Crystallography. Several others are currently under development and will be added as soon as they are ready. The Three Layers In the OM framework, a monitoring program is split into three cleanly separate parts (or Layers , in OM terminology): A part that deals with the retrieval of data from a facility and with the extraction of information from it. This is the Data Retrieval Layer . A part which deals with the running logic of the program (set up and finalization of the processing and collecting nodes, communication between the nodes, etc.). This is called Parallelization Layer . A part that deals with the scientific processing of the extracted data. This is called the Processing Layer . The first two layers are usually different for each facility or beamline. The last layer, however, encodes the logic of the scientific processing of the data. When the same type of monitor is run at different facilities, the same Processing Layer code is run. The interface between the Processing Layer and the other layers is very clearly defined, and the latter layers can be swapped for different implementations without affecting the former. This clean separation is the reason why a developer who wants to write a monitoring program for a supported facility does not need to worry how data is retrieved, or passed around the nodes. All he or she needs to learn is how the data can be accessed and manipulated in the Processing Layer. No knowledge of the other two layers is required. Furthermore, a monitoring program written for a facility can in most cases be run at other facilities just by switching to different implementations of the Data Retrieval and Parallelization layers, keeping the same Processing Layer. Layers are usually implemented as Python classes. All the available Processing layer classes can be found in the om.processing_layer module. All the available Data Retrieval layer classes can be found in the om.data_retrieval_layer module, and of course all the available Parallelization Layer classes can be found in the om.parallelization_layer module. OM's Workflow When OM starts, it first initializes all the processing and collecting nodes, on a single or multiple machines, according to the user's wishes. The first process to start on the first machine usually takes the role of the collecting node, while all the others become processing nodes. At start-up, each node reads the configuration file. By default, OM looks for a file called monitor.yaml in the current working directory (or a for a different file specified by the user via a command-line argument). Every node imports the Python classes for the Parallelization, Processing and Data Retrieval layers listed in the configuration file. The processing nodes start retrieving data events from the data source, as dictated by the Data Retrieval Layer After retrieving and unpacking an event, each processing node extracts all the data requested by the configuration file (specified in the required_data entry in the data_retrieval_layer parameter group). It then stores the retrieved data in a Python dictionary and calls the process_data function implemented in the Processing Layer, passing the dictionary as an argument. When the function finishes running and processing the data, the processing node transmits the returned Python tuple to the collecting node. How the nodes communicate with each other, and which protocol they use to do so (MPI, ZMQ, etc.) is determined by the Parallelization Layer. Once a processing node has transferred the data to the collecting node, it retrieves the next data event and the cycle begins again. The collecting node executes the collect_data function, implemented in the Processing Layer, every time it receives data from a processing node, passing the received tuple as input to the function. This process continues indefinitely, or until the data stream ends. In the latter case, some end-of-processing functions, implemented in the Processing Layer, are called on all nodes. OM then shuts down. Analyzing Data in the Processing Layer Writing a monitoring program consists mainly in writing a Python class (a Monitor class), that lives in the Processing Layer and implements a data analysis pipeline. The whole processing logic should be implemented in this class, which must be a subclass of the OmProcessingProtocol abstract class. The Monitor class must implement all the methods that are abstract in the base class. A developer just needs to write the implementation for these methods, but it never needs to call any of them. When OM runs, the methods are automatically called at the right moment, according to the logic described in the Workflow section . The methods are: initialize_processing_node : This function is executed on each processing node when OM starts. All the initialization code for the processing node should go into this function: the relevant class properties should be initialized here. Additionally, code that loads external files (for example, a geometry file, or a file containing a bad pixel mask) should also be placed in this function: the external data should be read and stored in class properties so that the other class methods can access it. initialize_collecting_node : This function is executed on the collecting node when OM starts. This is the equivalent of the previous function for the collecting node, and all initialization code for this type of node should be placed into this function. In particular, network sockets that are later used to broadcast data to external programs are usually opened and initialized in this function. process_data : this function is executed on each processing node when data is retrieved from the data source. The retrieved data gets passed to this function as an argument. All the logic related to the processing of a single data event should be implemented in this method. The output of this function is transferred by OM to the collecting node. Ideally, data should be reduced in this function and the raw, unprocessed information should not be sent to the collecting node. The function must return a tuple, where the first entry is a dictionary containing all the data that should be sent to the collecting node for aggregation, and the second entry is the rank of the processing node sending the data. This allows OM to keep track of which node is transferring the data. collect_data : this function is executed on the collecting node every time data is received from a processing node. The data received from the processing node is passed to this function as an argument. This function should implement all the processing logic that involves more than one event (for example: averaging over many events, accumulation of events, etc.). The developer can choose what to do with the result of the aggregated data processing. There is no fixed path. Often the information is broadcasted to a graphical interface via a network socket, but this is not mandatory. The information could also be, for example, printed on the console. There are two more methods that are not abstract in the base class, but can be overridden to implement some custom end-of-data-processing actions (For example: printing a final summary, etc.). Please note that if OM processes an endless stream of data (for example, most live data streams) these functions are never called. end_processing_on_processing_node : this function is executed on the processing node when OM finishes processing all the data in the data source. The default implementation of this function just prints a message to the console and exits. However, a developer can provide his own implementation, with a different behavior. This function can optionally return data, which is transferred to the collecting node and processed one last time by the collect_data function before OM shuts down. end_processing_on_collection_node : this function is executed on the collecting node when OM finishes processing all data in the data source. The default implementation of this function just prints a message to the console and exits, but a developer can override the default behavior. This function is often used to perform some clean-up task on the collecting node. Tips and Tricks The data being processed should ideally be reduced in the process_data function on each processing node. Transferring large amount of data between the nodes is not efficient and should be avoided whenever possible. For example, when crystallography data is processed and Bragg peaks are extracted from detector frame data, only the list of peaks should be sent to the collecting node. Obviously, this strategy cannot be applied to all cases (a frame viewer GUI, for example, would need the full frame data), but developers should strive to perform as much data reduction as possible on the processing nodes. The Monitor class should be carefully designed and code should be optimized. For example, only variables that need to be accessed from more than one method should become class properties. All others can remain simple local variables. Creating class properties that are not accessed by other methods will clutter the namespace of the class, and can result in performance degradation. Algorithms OM can process data using Algorithms . These are essentially Python classes which implement some data processing logic. Since they are stateful objects, algorithms can be used for operations that must be applied multiple times on different data, but need to keep track of an internal state between applications. For example, the averaging of detector frames can be implemented in OM as an algorithm. The algorithm can keep track of the internal intermediate average, storing it in its internal state, and can update it each time a new detector frame is processed. Algorithms should be used mainly for two types of data processing operations: Operations in which an action defined by the same set of parameters is applied to each data item retrieved by the monitor. In this case, the internal state can be used to store the parameters. A good example of this case is a peak finding algorithm, which is initialized with some parameters and then applied to each frame data retrieved by the monitor. Another good example is a a dark frame correction algorithm, where the same dark calibration data (loaded when the algorithm is initialized) is applied to each retrieved detector frame. Operations in which an action applied to each data item updates the internal state. A good example of this case is an algorithm that computes a running average: every time the algorithm is applied to some new data, the current average, stored in the internal state, is updated. OM provides some pre-packaged algorithms for common data processing operations (peak finding, data accumulation, etc.) in the algorithms sub-package. Tips and Tricks For data processing operations that don't fall in the two cases described above, and do not need to keep track of an internal state, functions can often be used in place of algorithms. For example, the computation of an autocorrelation, the sum of the intensity observed in a detector frame, are both operations that do not need to store any persistent information when applied multiple times. They can be implemented as simple functions instead of algorithms.","title":"Advanced Documentation"},{"location":"advanced_documentation/#advanced-documentation","text":"","title":"Advanced Documentation"},{"location":"advanced_documentation/#what-is-om","text":"OM's focus is on real-time (or quasi-real time) processing of experimental data. Real-time monitoring programs retrieve data from a facility as soon as possible, often immediately after data has been collected, before it is saved to disk. Some fast, simple analysis is usually performed on the data. The goal is to provide enough information to take quick decisions to the people running an experiment. These decisions can often change the direction of the experiment itself while it is still running, adapting it to new conditions and circumstances. Usually, it is not necessary to process all the data being collected in order to provide enough information for the decision making. For example, the hit rate for a Serial Crystallography experiment can be computed with high accuracy by analyzing only a portion of the collected data. It is however crucial that the information provided is up to date. Because of this, OM always prioritizes the processing of recently collected data over the processing of all collected data. Completeness is not the main priority, low latency in providing the information is. Additionally, the goal of OM is strictly to provide quick information to the people running the experiment, not any long-term analysis of the data: after the information is delivered, the data is discarded without being saved to disk, and new data is retrieved. In order to achieve high speed in data processing, OM takes advantage of a multi-node parallel architecture. Several processing units ( processing nodes in OM terminology) retrieve data events (a single frame or a collection of frames presented as a single unit) from a facility, and process them. A collecting node aggregates information from the processing nodes and performs computations over multiple events (averaging, etc.). The reduced data is finally presented the users in the console or sent to external programs for visualization. OM is mostly written using the Python programming language, however, some processing routines are implemented in other languages ( C , C++ ) for performance reasons.","title":"What is OM?"},{"location":"advanced_documentation/#goals-of-the-om-project","text":"The goal of the OM project is to provide users with a collection of modules that can can be used to easily build real-time monitoring programs. However, the project also aims at providing a set of stable and efficient real-time monitors for the most common types of x-ray imaging experiments. These programs can be used immediately without modifications or can be easily adapted to meet the users\u2019 requirements. Currently, only one of these monitoring programs is distributed with OM, focused on Serial Crystallography. Several others are currently under development and will be added as soon as they are ready.","title":"Goals of the OM Project"},{"location":"advanced_documentation/#the-three-layers","text":"In the OM framework, a monitoring program is split into three cleanly separate parts (or Layers , in OM terminology): A part that deals with the retrieval of data from a facility and with the extraction of information from it. This is the Data Retrieval Layer . A part which deals with the running logic of the program (set up and finalization of the processing and collecting nodes, communication between the nodes, etc.). This is called Parallelization Layer . A part that deals with the scientific processing of the extracted data. This is called the Processing Layer . The first two layers are usually different for each facility or beamline. The last layer, however, encodes the logic of the scientific processing of the data. When the same type of monitor is run at different facilities, the same Processing Layer code is run. The interface between the Processing Layer and the other layers is very clearly defined, and the latter layers can be swapped for different implementations without affecting the former. This clean separation is the reason why a developer who wants to write a monitoring program for a supported facility does not need to worry how data is retrieved, or passed around the nodes. All he or she needs to learn is how the data can be accessed and manipulated in the Processing Layer. No knowledge of the other two layers is required. Furthermore, a monitoring program written for a facility can in most cases be run at other facilities just by switching to different implementations of the Data Retrieval and Parallelization layers, keeping the same Processing Layer. Layers are usually implemented as Python classes. All the available Processing layer classes can be found in the om.processing_layer module. All the available Data Retrieval layer classes can be found in the om.data_retrieval_layer module, and of course all the available Parallelization Layer classes can be found in the om.parallelization_layer module.","title":"The Three Layers"},{"location":"advanced_documentation/#oms-workflow","text":"When OM starts, it first initializes all the processing and collecting nodes, on a single or multiple machines, according to the user's wishes. The first process to start on the first machine usually takes the role of the collecting node, while all the others become processing nodes. At start-up, each node reads the configuration file. By default, OM looks for a file called monitor.yaml in the current working directory (or a for a different file specified by the user via a command-line argument). Every node imports the Python classes for the Parallelization, Processing and Data Retrieval layers listed in the configuration file. The processing nodes start retrieving data events from the data source, as dictated by the Data Retrieval Layer After retrieving and unpacking an event, each processing node extracts all the data requested by the configuration file (specified in the required_data entry in the data_retrieval_layer parameter group). It then stores the retrieved data in a Python dictionary and calls the process_data function implemented in the Processing Layer, passing the dictionary as an argument. When the function finishes running and processing the data, the processing node transmits the returned Python tuple to the collecting node. How the nodes communicate with each other, and which protocol they use to do so (MPI, ZMQ, etc.) is determined by the Parallelization Layer. Once a processing node has transferred the data to the collecting node, it retrieves the next data event and the cycle begins again. The collecting node executes the collect_data function, implemented in the Processing Layer, every time it receives data from a processing node, passing the received tuple as input to the function. This process continues indefinitely, or until the data stream ends. In the latter case, some end-of-processing functions, implemented in the Processing Layer, are called on all nodes. OM then shuts down.","title":"OM's Workflow"},{"location":"advanced_documentation/#analyzing-data-in-the-processing-layer","text":"Writing a monitoring program consists mainly in writing a Python class (a Monitor class), that lives in the Processing Layer and implements a data analysis pipeline. The whole processing logic should be implemented in this class, which must be a subclass of the OmProcessingProtocol abstract class. The Monitor class must implement all the methods that are abstract in the base class. A developer just needs to write the implementation for these methods, but it never needs to call any of them. When OM runs, the methods are automatically called at the right moment, according to the logic described in the Workflow section . The methods are: initialize_processing_node : This function is executed on each processing node when OM starts. All the initialization code for the processing node should go into this function: the relevant class properties should be initialized here. Additionally, code that loads external files (for example, a geometry file, or a file containing a bad pixel mask) should also be placed in this function: the external data should be read and stored in class properties so that the other class methods can access it. initialize_collecting_node : This function is executed on the collecting node when OM starts. This is the equivalent of the previous function for the collecting node, and all initialization code for this type of node should be placed into this function. In particular, network sockets that are later used to broadcast data to external programs are usually opened and initialized in this function. process_data : this function is executed on each processing node when data is retrieved from the data source. The retrieved data gets passed to this function as an argument. All the logic related to the processing of a single data event should be implemented in this method. The output of this function is transferred by OM to the collecting node. Ideally, data should be reduced in this function and the raw, unprocessed information should not be sent to the collecting node. The function must return a tuple, where the first entry is a dictionary containing all the data that should be sent to the collecting node for aggregation, and the second entry is the rank of the processing node sending the data. This allows OM to keep track of which node is transferring the data. collect_data : this function is executed on the collecting node every time data is received from a processing node. The data received from the processing node is passed to this function as an argument. This function should implement all the processing logic that involves more than one event (for example: averaging over many events, accumulation of events, etc.). The developer can choose what to do with the result of the aggregated data processing. There is no fixed path. Often the information is broadcasted to a graphical interface via a network socket, but this is not mandatory. The information could also be, for example, printed on the console. There are two more methods that are not abstract in the base class, but can be overridden to implement some custom end-of-data-processing actions (For example: printing a final summary, etc.). Please note that if OM processes an endless stream of data (for example, most live data streams) these functions are never called. end_processing_on_processing_node : this function is executed on the processing node when OM finishes processing all the data in the data source. The default implementation of this function just prints a message to the console and exits. However, a developer can provide his own implementation, with a different behavior. This function can optionally return data, which is transferred to the collecting node and processed one last time by the collect_data function before OM shuts down. end_processing_on_collection_node : this function is executed on the collecting node when OM finishes processing all data in the data source. The default implementation of this function just prints a message to the console and exits, but a developer can override the default behavior. This function is often used to perform some clean-up task on the collecting node. Tips and Tricks The data being processed should ideally be reduced in the process_data function on each processing node. Transferring large amount of data between the nodes is not efficient and should be avoided whenever possible. For example, when crystallography data is processed and Bragg peaks are extracted from detector frame data, only the list of peaks should be sent to the collecting node. Obviously, this strategy cannot be applied to all cases (a frame viewer GUI, for example, would need the full frame data), but developers should strive to perform as much data reduction as possible on the processing nodes. The Monitor class should be carefully designed and code should be optimized. For example, only variables that need to be accessed from more than one method should become class properties. All others can remain simple local variables. Creating class properties that are not accessed by other methods will clutter the namespace of the class, and can result in performance degradation.","title":"Analyzing Data in the Processing Layer"},{"location":"advanced_documentation/#algorithms","text":"OM can process data using Algorithms . These are essentially Python classes which implement some data processing logic. Since they are stateful objects, algorithms can be used for operations that must be applied multiple times on different data, but need to keep track of an internal state between applications. For example, the averaging of detector frames can be implemented in OM as an algorithm. The algorithm can keep track of the internal intermediate average, storing it in its internal state, and can update it each time a new detector frame is processed. Algorithms should be used mainly for two types of data processing operations: Operations in which an action defined by the same set of parameters is applied to each data item retrieved by the monitor. In this case, the internal state can be used to store the parameters. A good example of this case is a peak finding algorithm, which is initialized with some parameters and then applied to each frame data retrieved by the monitor. Another good example is a a dark frame correction algorithm, where the same dark calibration data (loaded when the algorithm is initialized) is applied to each retrieved detector frame. Operations in which an action applied to each data item updates the internal state. A good example of this case is an algorithm that computes a running average: every time the algorithm is applied to some new data, the current average, stored in the internal state, is updated. OM provides some pre-packaged algorithms for common data processing operations (peak finding, data accumulation, etc.) in the algorithms sub-package. Tips and Tricks For data processing operations that don't fall in the two cases described above, and do not need to keep track of an internal state, functions can often be used in place of algorithms. For example, the computation of an autocorrelation, the sum of the intensity observed in a detector frame, are both operations that do not need to store any persistent information when applied multiple times. They can be implemented as simple functions instead of algorithms.","title":"Algorithms"},{"location":"configuring_om/","text":"Configuring OM Introduction OM requires at minimum two pieces of information to operate: a source of data events, and a set of configuration parameters. Information about the data source is usually provided as an argument to the monitor\u2019s start up script, in the form of a source string. Configuration parameters, which fully determine the behavior of the monitor, are instead stored in a configuration file that OM reads before starting. The Source String The source string contains information about the origin of the data events that OM will process. The information is encoded in a string that is passed as a command line argument to the om_monitor.py script: om_monitor.py <SOURCE_STRING> The exact format of the string depends on the Data Retrieval Layer implementation used by the monitor, and particularly by the specific Data Event Handler being used. The correct format of the source string is typically part of the information provided to the users by the beamline scientists that configured OM. The source code documentation also provides details on the specific format required by each Data Event Handler. As a rule of thumb, the format of the source string is often tied to the facility where the experiment is taking place. Broadly: LCLS : When OM runs at the LCLS facility, the source string is a psana-style DataSource string. Example: shmem=psana.0:stop=no Local Desktop/Laptop : When OM processes data from files, the source string is usually the relative or absolute path to a file containing a list of data files that OM should process. The data files must be listed one per line in the list file, each with its full relative or absolute path. Example: files.lst The Configuration File The behavior of an OM monitor is completely determined by the content of its configuration file. By default, OM looks for a file called monitor.yaml in the current working directory. However, the --config command line option of the om_monitor.py script allows a custom location for the configuration file to be specified: om_monitor.py --config <PATH_TO_THE_CONFIGURATION_FILE> <SOURCE_STRING> The parameters in the configuration file must be encoded following the rules of the YAML 1.2 language. The parameters are divided into groups. Each group contains a set of parameters that are either related to each other (because they control related features in OM) or apply to the same data processing algorithm. For example: crystallography : broadcast_ip : 127.0.0.1 broadcast_port : 12321 speed_report_interval : 1000 In this example, crystallography is the name of the parameter group, while broadcast_ip , broadcast_port and speed_report_interval are all parameter names. OM's configuration parameters can be required or optional . Required parameters are mandatory and must always be provided. OM usually shows an error and stops if a required parameter is not present in the configuration file. Optional parameters usually control finer behavior of OM or its data processing algorithms and are not strictly required in the configuration file. When an optional parameter is not listed in the file, its default value is usually assumed to be false or null . Please be aware that depending on which OM monitor is being run, not all the parameter groups need to be present in the configuration file at the same time. Conversely, custom OM monitors might introduce additional parameter and even parameter groups that are not described in the linked document. A missing parameter or parameter group, or the wrong choice of a value for a parameter can cause OM to emit error messages.","title":"Configuring OM"},{"location":"configuring_om/#configuring-om","text":"","title":"Configuring OM"},{"location":"configuring_om/#introduction","text":"OM requires at minimum two pieces of information to operate: a source of data events, and a set of configuration parameters. Information about the data source is usually provided as an argument to the monitor\u2019s start up script, in the form of a source string. Configuration parameters, which fully determine the behavior of the monitor, are instead stored in a configuration file that OM reads before starting.","title":"Introduction"},{"location":"configuring_om/#the-source-string","text":"The source string contains information about the origin of the data events that OM will process. The information is encoded in a string that is passed as a command line argument to the om_monitor.py script: om_monitor.py <SOURCE_STRING> The exact format of the string depends on the Data Retrieval Layer implementation used by the monitor, and particularly by the specific Data Event Handler being used. The correct format of the source string is typically part of the information provided to the users by the beamline scientists that configured OM. The source code documentation also provides details on the specific format required by each Data Event Handler. As a rule of thumb, the format of the source string is often tied to the facility where the experiment is taking place. Broadly: LCLS : When OM runs at the LCLS facility, the source string is a psana-style DataSource string. Example: shmem=psana.0:stop=no Local Desktop/Laptop : When OM processes data from files, the source string is usually the relative or absolute path to a file containing a list of data files that OM should process. The data files must be listed one per line in the list file, each with its full relative or absolute path. Example: files.lst","title":"The Source String"},{"location":"configuring_om/#the-configuration-file","text":"The behavior of an OM monitor is completely determined by the content of its configuration file. By default, OM looks for a file called monitor.yaml in the current working directory. However, the --config command line option of the om_monitor.py script allows a custom location for the configuration file to be specified: om_monitor.py --config <PATH_TO_THE_CONFIGURATION_FILE> <SOURCE_STRING> The parameters in the configuration file must be encoded following the rules of the YAML 1.2 language. The parameters are divided into groups. Each group contains a set of parameters that are either related to each other (because they control related features in OM) or apply to the same data processing algorithm. For example: crystallography : broadcast_ip : 127.0.0.1 broadcast_port : 12321 speed_report_interval : 1000 In this example, crystallography is the name of the parameter group, while broadcast_ip , broadcast_port and speed_report_interval are all parameter names. OM's configuration parameters can be required or optional . Required parameters are mandatory and must always be provided. OM usually shows an error and stops if a required parameter is not present in the configuration file. Optional parameters usually control finer behavior of OM or its data processing algorithms and are not strictly required in the configuration file. When an optional parameter is not listed in the file, its default value is usually assumed to be false or null . Please be aware that depending on which OM monitor is being run, not all the parameter groups need to be present in the configuration file at the same time. Conversely, custom OM monitors might introduce additional parameter and even parameter groups that are not described in the linked document. A missing parameter or parameter group, or the wrong choice of a value for a parameter can cause OM to emit error messages.","title":"The Configuration File"},{"location":"installing_om/","text":"Installing OM OM at Facilities OM comes pre-installed at some beamlines and facilities. At the LCLS facility, OM is already installed at the following beamlines: MFX beamline CXI beamline OM can be used directly at at these beamlines and facilities. However, the users should always notify in advance the beamline scientists at each facility of their intention to use OM during an experiment. OM on a Laptop/Desktop There are three ways to instal OM on a standalone Desktop/Laptop computer. Installation from PyPI OM is available on PiPY: OM on PyPI It can be installed using the pip command: pip install ondamonitor Installation from CondaForge OM is available in the CondaForge package collection and can be installed using the conda install command: conda install -c conda-forge ondamonitor Installation from Source OM can be also be installed from source. As a first step, the source code should be retrieved from GitHub. A compressed code archive for each stable release can be found the following page: OM's release archives Alternatively, the source code can be retrieved directly from the GitHub repository using the git clone command: git clone https://github.com/omdevteam/om OM can then be installed using the pip command from the root directory of the retrieved source code (the directory that contains the setup.py file): pip install --prefix = <INSTALLATION PATH> . In this command, <INSTALLATION PATH> is a relative or absolute path to the directory where OM should be installed. A Python development-style installation can also be performed using the pip command: pip install --editable --prefix = <INSTALLATION PATH> . When OM is installed from source, some additional configuration is needed for the local operating system to subsequently find the installation directory. Typically, on Linux, the following environment variables need to be set: export PATH = <INSTALLATION PATH>/bin: $PATH export PYTHONPATH = <INSTALLATION PATH>/lib/python<PYVER>/site-packages: $PYTHONPATH Here, <INSTALLATION_PATH> is the directory where OM has been installed, and <PYVER> is the version of Python used by the system (only the major and minor components of the version number). The Python version number can be obtained using the python -V command, which outputs a string in the following format: Python X.Y.Z . The <PYVER> entry in the command above corresponds to the X.Y part of this string. Installation Script OM can also be installed from source using a script that is provided with the source code: sh tools/scripts/installation/install.sh The script allows the installation of OM at a custom path, and supports editable Python installations. The script can install OM with all its base dependencies or, if a Python environment already provides them, it can also simply install OM. A list of all options supported by the script can be obtained using the following command: sh tools/scripts/installation/install.sh -h In addition to installing OM, the script also creates a file that can be used to activate the installation and set all the required environment variables. If a specific installation of OM has been carried out by the install.sh script, it can be activated by sourcing the file generated by the script: source <INSTALLATION PATH>/bin/activate-om Where, <INSTALLATION_PATH> is the directory where OM has been installed. MPI When using OM's MPI Parallelization Engine (the default Parallelization Engine), an MPI framework must be installed on the system where OM is launched. The most popular choices are OpenMPI and MPICH. OpenMPI MPICH The precise instructions for the installation of these frameworks are complex, operating system-dependent, and outside of the scope of this documentation. Please note that in addition to one of the MPI frameworks, the corresponding mpi4py module for the Python interpreter used by OM must also be installed.","title":"Installing OM"},{"location":"installing_om/#installing-om","text":"","title":"Installing OM"},{"location":"installing_om/#om-at-facilities","text":"OM comes pre-installed at some beamlines and facilities. At the LCLS facility, OM is already installed at the following beamlines: MFX beamline CXI beamline OM can be used directly at at these beamlines and facilities. However, the users should always notify in advance the beamline scientists at each facility of their intention to use OM during an experiment.","title":"OM at Facilities"},{"location":"installing_om/#om-on-a-laptopdesktop","text":"There are three ways to instal OM on a standalone Desktop/Laptop computer.","title":"OM on a Laptop/Desktop"},{"location":"installing_om/#installation-from-pypi","text":"OM is available on PiPY: OM on PyPI It can be installed using the pip command: pip install ondamonitor","title":"Installation from PyPI"},{"location":"installing_om/#installation-from-condaforge","text":"OM is available in the CondaForge package collection and can be installed using the conda install command: conda install -c conda-forge ondamonitor","title":"Installation from CondaForge"},{"location":"installing_om/#installation-from-source","text":"OM can be also be installed from source. As a first step, the source code should be retrieved from GitHub. A compressed code archive for each stable release can be found the following page: OM's release archives Alternatively, the source code can be retrieved directly from the GitHub repository using the git clone command: git clone https://github.com/omdevteam/om OM can then be installed using the pip command from the root directory of the retrieved source code (the directory that contains the setup.py file): pip install --prefix = <INSTALLATION PATH> . In this command, <INSTALLATION PATH> is a relative or absolute path to the directory where OM should be installed. A Python development-style installation can also be performed using the pip command: pip install --editable --prefix = <INSTALLATION PATH> . When OM is installed from source, some additional configuration is needed for the local operating system to subsequently find the installation directory. Typically, on Linux, the following environment variables need to be set: export PATH = <INSTALLATION PATH>/bin: $PATH export PYTHONPATH = <INSTALLATION PATH>/lib/python<PYVER>/site-packages: $PYTHONPATH Here, <INSTALLATION_PATH> is the directory where OM has been installed, and <PYVER> is the version of Python used by the system (only the major and minor components of the version number). The Python version number can be obtained using the python -V command, which outputs a string in the following format: Python X.Y.Z . The <PYVER> entry in the command above corresponds to the X.Y part of this string.","title":"Installation from Source"},{"location":"installing_om/#installation-script","text":"OM can also be installed from source using a script that is provided with the source code: sh tools/scripts/installation/install.sh The script allows the installation of OM at a custom path, and supports editable Python installations. The script can install OM with all its base dependencies or, if a Python environment already provides them, it can also simply install OM. A list of all options supported by the script can be obtained using the following command: sh tools/scripts/installation/install.sh -h In addition to installing OM, the script also creates a file that can be used to activate the installation and set all the required environment variables. If a specific installation of OM has been carried out by the install.sh script, it can be activated by sourcing the file generated by the script: source <INSTALLATION PATH>/bin/activate-om Where, <INSTALLATION_PATH> is the directory where OM has been installed.","title":"Installation Script"},{"location":"installing_om/#mpi","text":"When using OM's MPI Parallelization Engine (the default Parallelization Engine), an MPI framework must be installed on the system where OM is launched. The most popular choices are OpenMPI and MPICH. OpenMPI MPICH The precise instructions for the installation of these frameworks are complex, operating system-dependent, and outside of the scope of this documentation. Please note that in addition to one of the MPI frameworks, the corresponding mpi4py module for the Python interpreter used by OM must also be installed.","title":"MPI"},{"location":"running_om/","text":"Running OM Although OM is installed and available at several synchrotron and free electron laser facilities, special machines and network arrangements are often needed to run it efficiently at the various beamlines where it is available. Tools and graphical interfaces that will allow users to comfortably start, stop and run OM at several facilities are currently under development. For now, if someone is interested in using OM for an experiment, the best strategy is to contact one of the core developers. The core development team will be happy to help setting up and running OM. Running OM at the LCLS facility and other facilities in the USA Please contact Valerio Mariani ( valmar@slac.stanford.edu ) Running OM at the DESY facility and other facilities in Europe Please contact Alexandra Tolstikova ( alexandra.tolstikova@desy.de ) Running OM for XES and SWAXS experiments Please contact Thomas D. Grant ( tdgrant@buffalo.edu )","title":"Running OM"},{"location":"running_om/#running-om","text":"Although OM is installed and available at several synchrotron and free electron laser facilities, special machines and network arrangements are often needed to run it efficiently at the various beamlines where it is available. Tools and graphical interfaces that will allow users to comfortably start, stop and run OM at several facilities are currently under development. For now, if someone is interested in using OM for an experiment, the best strategy is to contact one of the core developers. The core development team will be happy to help setting up and running OM.","title":"Running OM"},{"location":"running_om/#running-om-at-the-lcls-facility-and-other-facilities-in-the-usa","text":"Please contact Valerio Mariani ( valmar@slac.stanford.edu )","title":"Running OM at the LCLS facility and other facilities in the USA"},{"location":"running_om/#running-om-at-the-desy-facility-and-other-facilities-in-europe","text":"Please contact Alexandra Tolstikova ( alexandra.tolstikova@desy.de )","title":"Running OM at the DESY facility and other facilities in Europe"},{"location":"running_om/#running-om-for-xes-and-swaxs-experiments","text":"Please contact Thomas D. Grant ( tdgrant@buffalo.edu )","title":"Running OM for XES and SWAXS experiments"},{"location":"the_om_development_team/","text":"The OM Development Team Active Developers OM is currently developed at the Linac Coherent Light Source facility (LCLS) of the SLAC National Accelerator Laboratory. However, several collaborators from different institutions all over the world contribute code, testing and support to the project. The current core development team includes the following people: Valerio Mariani (corresponding developer: valmar@slac.stanford.edu ) Alexandra Tolstikova Thomas Grant Contributors Several people have, over the years, contributed to the development and testing of OM with code, bug reports, ideas, etc. Some still do, occasionally. The following list might not be exhaustive: Steve Aplin Anton Barty Henry Chapman Jason Koglin Manuela Kuhn Luca Gelisio Mia Lahey-Rudolph Thomas J. Lane Andrew Morgan Christopher O'Grady Kanupriya Pande Thomas A. White Chun Hong Yoon Guidelines for Contributions New contributors to OM are always welcome! This section contains some guidelines about coding style, language versions, etc. Please follow these guidelines whenever possible when contributing to the development of OM. Version Control OM is developed using the Git version control system. OM's versioning scheme follows the Calendar Versioning system. Specifically, OM's version number uses the following format: YY.MM.MINOR.[MICRO] OM's development takes place on GitHub , and follows the GitHub workflow . Bugs, issues, ideas for improvement, etc should be reported on the issue tracker of OM's main repository Python OM is mainly developed using the Python programming language. All of OM's code should run with with all actively supported versions of Python (currently 3.6 to 3.9), with the only exception of facility-related code that requires a specific version of Python to run. The Google Python Style Guide should be followed for all matters related to coding style and coding conventions. All docstrings should be written according to the Google Style . Before code is submitted to the main repository, the following linters and formatters should be run on it: Flake8 : in the root folder of the OM repository, the setup.cfg file stores the settings that should be applied when linting OM\u2019s code with Flake8. Black : the default options should be used. C/C++ Some OM extensions and plugins can, for performance reason, be written using the C++ or C programming languages. All the C++ code in OM should follow at most the C++98 ISO standard, and the code should compile on a Linux RHEL7/CentOS7 platform using the development stack that comes with a standard installation of the system. Part of the C++11 standard can be used when writing extensions. However, it must be possible to compile the code using version 4.8 of the gcc compiler (This requirement and the previous one are imposed by the OS version that must be used to create official Linux Python wheels). All the C code in OM should follow at most the C99 ISO standard, and the code should compile on a Linux RHEL7/CentOS7 platform using the development stack that comes with a standard installation of the system (This requirement also comes from the OS version used to create the official Linux Python wheels). The Cython framework should be used to interface C/C++ code with Python.","title":"The OM Development Team"},{"location":"the_om_development_team/#the-om-development-team","text":"","title":"The OM Development Team"},{"location":"the_om_development_team/#active-developers","text":"OM is currently developed at the Linac Coherent Light Source facility (LCLS) of the SLAC National Accelerator Laboratory. However, several collaborators from different institutions all over the world contribute code, testing and support to the project. The current core development team includes the following people: Valerio Mariani (corresponding developer: valmar@slac.stanford.edu ) Alexandra Tolstikova Thomas Grant","title":"Active Developers"},{"location":"the_om_development_team/#contributors","text":"Several people have, over the years, contributed to the development and testing of OM with code, bug reports, ideas, etc. Some still do, occasionally. The following list might not be exhaustive: Steve Aplin Anton Barty Henry Chapman Jason Koglin Manuela Kuhn Luca Gelisio Mia Lahey-Rudolph Thomas J. Lane Andrew Morgan Christopher O'Grady Kanupriya Pande Thomas A. White Chun Hong Yoon","title":"Contributors"},{"location":"the_om_development_team/#guidelines-for-contributions","text":"New contributors to OM are always welcome! This section contains some guidelines about coding style, language versions, etc. Please follow these guidelines whenever possible when contributing to the development of OM.","title":"Guidelines for Contributions"},{"location":"the_om_development_team/#version-control","text":"OM is developed using the Git version control system. OM's versioning scheme follows the Calendar Versioning system. Specifically, OM's version number uses the following format: YY.MM.MINOR.[MICRO] OM's development takes place on GitHub , and follows the GitHub workflow . Bugs, issues, ideas for improvement, etc should be reported on the issue tracker of OM's main repository","title":"Version Control"},{"location":"the_om_development_team/#python","text":"OM is mainly developed using the Python programming language. All of OM's code should run with with all actively supported versions of Python (currently 3.6 to 3.9), with the only exception of facility-related code that requires a specific version of Python to run. The Google Python Style Guide should be followed for all matters related to coding style and coding conventions. All docstrings should be written according to the Google Style . Before code is submitted to the main repository, the following linters and formatters should be run on it: Flake8 : in the root folder of the OM repository, the setup.cfg file stores the settings that should be applied when linting OM\u2019s code with Flake8. Black : the default options should be used.","title":"Python"},{"location":"the_om_development_team/#cc","text":"Some OM extensions and plugins can, for performance reason, be written using the C++ or C programming languages. All the C++ code in OM should follow at most the C++98 ISO standard, and the code should compile on a Linux RHEL7/CentOS7 platform using the development stack that comes with a standard installation of the system. Part of the C++11 standard can be used when writing extensions. However, it must be possible to compile the code using version 4.8 of the gcc compiler (This requirement and the previous one are imposed by the OS version that must be used to create official Linux Python wheels). All the C code in OM should follow at most the C99 ISO standard, and the code should compile on a Linux RHEL7/CentOS7 platform using the development stack that comes with a standard installation of the system (This requirement also comes from the OS version used to create the official Linux Python wheels). The Cython framework should be used to interface C/C++ code with Python.","title":"C/C++"},{"location":"reference/om/","text":"om OM: OnDA Monitor. This is the main OnDA Monitor package. It contains the full OM framework, subdivided into several subpackages. algorithms data_retrieval_layer graphical_interfaces lib monitor parallelization_layer protocols processing_layer","title":"__init__"},{"location":"reference/om/#om","text":"OM: OnDA Monitor. This is the main OnDA Monitor package. It contains the full OM framework, subdivided into several subpackages. algorithms data_retrieval_layer graphical_interfaces lib monitor parallelization_layer protocols processing_layer","title":"om"},{"location":"reference/om/monitor/","text":"monitor OM's main function. This module contains the main function that tarts an OnDA Monitor. main ( * , source , node_pool_size , config ) OnDA Monitor. This script starts an OnDA Monitor whose behavior is defined by the configuration parameters read from a provided file. The monitor retrieves data events from the source specified by the SOURCE argument, and starts processing them. The exact format of SOURCE depends on the specific Data Extraction Layer used by the monitor (see the relevant documentation). When OM uses the mpi Parallelization Layer, this script should be launched via the mpirun or mpiexec commands. om_monitor.py OnDA Monitor. This script starts an OnDA Monitor whose behavior is defined by the configuration parameters read from a provided file. The monitor retrieves data events from the source specified by the SOURCE argument, and starts processing them. The exact format of SOURCE depends on the specific Data Extraction Layer used by the monitor (see the relevant documentation). When OM uses the mpi Parallelization Layer, this script should be launched via the mpirun or mpiexec commands. Usage: om_monitor.py [OPTIONS] SOURCE Options: -c, --config PATH The path to a configuration file (default: monitor.yaml file in the current working directory) -n, --node-pool-size INTEGER The total number of nodes in the OM pool, including all the processing nodes and the collecting node. --help Show this message and exit.","title":"monitor"},{"location":"reference/om/monitor/#om.monitor","text":"OM's main function. This module contains the main function that tarts an OnDA Monitor.","title":"monitor"},{"location":"reference/om/monitor/#om.monitor.main","text":"OnDA Monitor. This script starts an OnDA Monitor whose behavior is defined by the configuration parameters read from a provided file. The monitor retrieves data events from the source specified by the SOURCE argument, and starts processing them. The exact format of SOURCE depends on the specific Data Extraction Layer used by the monitor (see the relevant documentation). When OM uses the mpi Parallelization Layer, this script should be launched via the mpirun or mpiexec commands.","title":"main()"},{"location":"reference/om/monitor/#om_monitorpy","text":"OnDA Monitor. This script starts an OnDA Monitor whose behavior is defined by the configuration parameters read from a provided file. The monitor retrieves data events from the source specified by the SOURCE argument, and starts processing them. The exact format of SOURCE depends on the specific Data Extraction Layer used by the monitor (see the relevant documentation). When OM uses the mpi Parallelization Layer, this script should be launched via the mpirun or mpiexec commands. Usage: om_monitor.py [OPTIONS] SOURCE Options: -c, --config PATH The path to a configuration file (default: monitor.yaml file in the current working directory) -n, --node-pool-size INTEGER The total number of nodes in the OM pool, including all the processing nodes and the collecting node. --help Show this message and exit.","title":"om_monitor.py"},{"location":"reference/om/algorithms/","text":"algorithms OM's Algorithms. This package contains OM's Algorithms, classes that perform various operations and calculations on the data. Each module in the package contains a set of algorithms related to a specific scientific technique (crystallography, X-ray emission spectroscopy, etc.) or data processing operation (detector calibration, etc). A separate module stores instead algorithms that are more generic in nature. calibration crystallography generic xes","title":"__init__"},{"location":"reference/om/algorithms/#om.algorithms","text":"OM's Algorithms. This package contains OM's Algorithms, classes that perform various operations and calculations on the data. Each module in the package contains a set of algorithms related to a specific scientific technique (crystallography, X-ray emission spectroscopy, etc.) or data processing operation (detector calibration, etc). A separate module stores instead algorithms that are more generic in nature. calibration crystallography generic xes","title":"algorithms"},{"location":"reference/om/algorithms/calibration/","text":"calibration Algorithms for the calibration of raw detector data frames. This module contains algorithms that calibrate raw detector data frames, preparing them for data extraction, Jungfrau1MCalibration See documentation of the __init__ function. __init__ ( * , dark_filenames , gain_filenames , photon_energy_kev ) Calibration of Jungfrau 1M detector. This algorithm stores all the parameters required to calibrate the raw data frames collected by a Jungfrau 1M detector. After the algorithm has been initialized, it can be invoked to apply the calibration to a data frame. Parameters: Name Type Description Default dark_filenames List [ str ] A list of relative or absolute paths to files containing dark data for the calibration of the detector. required gain_filenames List [ str ] A list of relative or absolute paths to files containing gain data for the calibration of the detector. required photon_energy_kev float the photon energy (in Kev) at which the detector is operated. required apply_calibration ( * , data ) Applies the calibration to a detector data frame. This function calibrates the provided raw detector data frame. It determines the gain stage for each pixel in the frame, and applies the corresponding gain and offset corrections. Parameters: Name Type Description Default data NDArray [ numpy . int_ ] The raw detector data frame to calibrate. required Returns: Type Description NDArray [ numpy . float_ ] The calibrated data frame.","title":"calibration"},{"location":"reference/om/algorithms/calibration/#om.algorithms.calibration","text":"Algorithms for the calibration of raw detector data frames. This module contains algorithms that calibrate raw detector data frames, preparing them for data extraction,","title":"calibration"},{"location":"reference/om/algorithms/calibration/#om.algorithms.calibration.Jungfrau1MCalibration","text":"See documentation of the __init__ function.","title":"Jungfrau1MCalibration"},{"location":"reference/om/algorithms/calibration/#om.algorithms.calibration.Jungfrau1MCalibration.__init__","text":"Calibration of Jungfrau 1M detector. This algorithm stores all the parameters required to calibrate the raw data frames collected by a Jungfrau 1M detector. After the algorithm has been initialized, it can be invoked to apply the calibration to a data frame. Parameters: Name Type Description Default dark_filenames List [ str ] A list of relative or absolute paths to files containing dark data for the calibration of the detector. required gain_filenames List [ str ] A list of relative or absolute paths to files containing gain data for the calibration of the detector. required photon_energy_kev float the photon energy (in Kev) at which the detector is operated. required","title":"__init__()"},{"location":"reference/om/algorithms/calibration/#om.algorithms.calibration.Jungfrau1MCalibration.apply_calibration","text":"Applies the calibration to a detector data frame. This function calibrates the provided raw detector data frame. It determines the gain stage for each pixel in the frame, and applies the corresponding gain and offset corrections. Parameters: Name Type Description Default data NDArray [ numpy . int_ ] The raw detector data frame to calibrate. required Returns: Type Description NDArray [ numpy . float_ ] The calibrated data frame.","title":"apply_calibration()"},{"location":"reference/om/algorithms/crystallography/","text":"crystallography Algorithms for the processing of crystallography data. This module contains algorithms that perform data processing operations for Serial Crystallography. Additionally, it contains the definitions of several typed dictionaries that store data produced or required by these algorithms. TypePeakList Bases: TypedDict Detected peaks information. This typed dictionary stores information about a set of peaks found by a peak-finding algorithm in a detector data frame. Attributes: Name Type Description num_peaks int The number of peaks detected in the data frame. fs List [ float ] A list of fractional fs indexes that locate the detected peaks in the data frame. ss List [ float ] A list of fractional ss indexes that locate the detected peaks in the data frame. intensity List [ float ] A list of integrated intensities for the detected peaks. num_pixels List [ float ] A list storing the number of pixels in each detected peak. max_pixel_intensity List [ float ] A list storing, for each peak, the value of the pixel with the maximum intensity. snr List [ float ] A list storing the signal-to-noise ratio of each detected peak. Peakfinder8PeakDetection See documentation of the __init__ function. __init__ ( * , radius_pixel_map , layout_info , crystallography_parameters ) Peakfinder8 algorithm for peak detection. This algorithm stores all the parameters required to detect Bragg peaks in a detector data frame using the peakfinder8 strategy, described in the following publication: A. Barty, R. A. Kirian, F. R. N. C. Maia, M. Hantke, C. H. Yoon, T. A. White, and H. N. Chapman, \"Cheetah: software for high-throughput reduction and analysis of serial femtosecond x-ray diffraction data\", J Appl Crystallogr, vol. 47, pp. 1118-1131 (2014). After the algorithm has been initialized, it can be invoked to detect peaks in a data frame. Parameters: Name Type Description Default radius_pixel_map NDArray [ numpy . float_ ] A pixel map storing radius information for the detector data frame on which the algorithm is applied. The array must have the same shape as the data frame on which the algorithm is applied. Each element of the array must store, for the corresponding pixel in the data frame, its distance (in pixels) from the origin of the detector reference system (usually the center of the detector). required layout_info TypeDetectorLayoutInformation An object storing information about the internal layout of the detector data frame on which the algorithm is applied (number and size of ASICs, etc.). required crystallography_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: max_num_peaks : The maximum number of peaks that the algorithm should retrieve from each data frame. Additional peaks will be ignored. adc_threshold : The minimum ADC threshold for peak detection. minimum_snr : The minimum signal-to-noise ratio for peak detection. min_pixel_count : The minimum size of a peak in pixels. max_pixel_count : The maximum size of a peak in pixels. local_bg_radius : The radius, in pixels, for the estimation of the local background. min_res : The minimum distance at which a peak can be located, in pixels, from the center of the detector. max_res : The maximum distance at which a peak can be located, in pixels, from the center of the detector. bad_pixel_map_filename : The relative or absolute path to an HDF5 file containing a bad pixel map. The map can be used to exclude regions of the data frame from the peak search. If the value of this entry is None, the peak search extends to the full frame. Defaults to None. The map must be a numpy array with the same shape as the data frame on which the algorithm is applied. Each pixel in the map must have a value of either 0, meaning that the corresponding pixel in the data frame should be ignored, or 1, meaning that the corresponding pixel should be included in the peak search. The map is only used to exclude areas from the peak search: the data is not modified in any way. bad_pixel_map_hdf5_path : The internal HDF5 path to the data block where the bad pixel map data is located. Defaults to None. If the bad_pixel_map_filename entry is not None, this entry must also be provided, and cannot be None. Otherwise it is ignored. required get_adc_thresh () Gets the minimum ADC threshold for peak detection. This function returns the minimum ADC threshold currently used by the algorithm to detect peaks. Returns: Type Description float The minimum ADC threshold currently used by the algorithm. set_adc_thresh ( * , adc_thresh ) Sets the current minimum ADC threshold for peak detection. This function sets the minimum ADC threshold used by the algorithm to detect peaks. Any future call to the find_peaks method will use, for the adc_thresh parameter, the value provided here. Parameters: Name Type Description Default adc_thresh float The new value of the minimum ADC threshold for peak detection. required get_minimum_snr () Gets the current minimum signal-to-noise ratio for peak detection. This function returns the minimum signal-to-noise ratio currently used by the algorithm to detect peaks. Returns: Type Description float The minimum signal-to-noise ratio currently used by the algorithm. set_minimum_snr ( * , minimum_snr ) Sets the minimum signal-to-noise ratio for peak detection. This function sets the minimum signal-to-noise ratio used by the algorithm to detect peaks. Any future call to the find_peaks method will use, for the minimum_snr algorithm parameter, the value provided here. Parameters: Name Type Description Default minimum_snr float The new value of the minimum signal-to-noise ratio for peak detection. required get_min_pixel_count () Gets the current minimum size for a peak in pixels. This function returns the minimum size, in pixels, that the algorithm currently expects a peak to have. Returns: Type Description int The current minimum size, in pixels, for a peak. set_min_pixel_count ( * , min_pixel_count ) Sets the minimum size for a peak in pixels. This function sets the minimum size, in pixels, that the algorithm expects a peak to have. Any future call to the find_peaks method will use, for the min_pixel_count parameter, the value provided here. Parameters: Name Type Description Default min_pixel_count int The new minimum size for a peak in pixels. required get_max_pixel_count () Gets the current maximum size for a peak in pixels. This function returns the maximum size, in pixels, that the algorithm currently expects a peak to have. Returns: Type Description int The current maximum size, in pixels, for a peak. set_max_pixel_count ( * , max_pixel_count ) Sets the maximum size for a peak in pixels. This function sets the maximum size, in pixels, that the algorithm expects a peak to have. Any future call to the find_peaks method will use, for the max_pixel_count parameter, the value provided here. Parameters: Name Type Description Default max_pixel_count int The new maximum size for a peak in pixels. required get_local_bg_radius () Gets the radius, in pixels, currently used to estimate the local background. This function returns the radius, in pixels, currently used by the algorithm to estimate the local background. Returns: Type Description int The radius, in pixels, currently used for the estimation of the local background. set_local_bg_radius ( * , local_bg_radius ) Sets the radius, in pixels, for the estimation of the local background. This function sets the radius, in pixels, used by the algorithm to estimate the local background. Any future call to the find_peaks method will use, for the local_bg_radius parameter, the value provided here. Parameters: Name Type Description Default local_bg_radius int The new radius, in pixels, to be used for the estimation of the local background. required get_min_res () Gets the minimum distance for a peak from the detector's center in pixels. This function returns the minimum distance from the center of the detector, in pixels, that the algorithm currently expects a peak to have. Returns: Type Description int The current minimum distance, in pixels, for a peak from the detector's int center. set_min_res ( * , min_res ) Sets the minimum distance for a peak from the detector's center in pixels. This function sets the minimum distance from the center of the detector, in pixels, that the algorithm expects a peak to have. Any future call to the find_peaks method will use, for the min_res parameter, the value provided here. Parameters: Name Type Description Default min_res int The new minimum distance, in pixels, from the detector's center for a peak. required get_max_res () Gets the maximum distance for a peak from the detector's center in pixels. This function returns the maximum distance from the center of the detector, in pixels, that the algorithm currently expects a peak to have. Returns: Type Description int The current maximum distance, in pixels, for a peak from the detector's int center. set_max_res ( max_res ) Sets the maximum distance for a peak from the detector's center in pixels. This function sets the maximum distance from the center of the detector, in pixels, that the algorithm expects a peak to have. Any future call to the find_peaks method will use, for the min_res parameter, the value provided here. Parameters: Name Type Description Default max_res int The new maximum distance, in pixels, from the detector's center for a peak. required find_peaks ( * , data ) Finds peaks in a detector data frame. This function detects peaks in a provided detector data frame, and returns information about their location, size and intensity. Parameters: Name Type Description Default data Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ]] The detector data frame on which the peak-finding operation must be performed. required Returns: Type Description TypePeakList A TypePeakList dictionary with information about the detected peaks.","title":"crystallography"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography","text":"Algorithms for the processing of crystallography data. This module contains algorithms that perform data processing operations for Serial Crystallography. Additionally, it contains the definitions of several typed dictionaries that store data produced or required by these algorithms.","title":"crystallography"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.TypePeakList","text":"Bases: TypedDict Detected peaks information. This typed dictionary stores information about a set of peaks found by a peak-finding algorithm in a detector data frame. Attributes: Name Type Description num_peaks int The number of peaks detected in the data frame. fs List [ float ] A list of fractional fs indexes that locate the detected peaks in the data frame. ss List [ float ] A list of fractional ss indexes that locate the detected peaks in the data frame. intensity List [ float ] A list of integrated intensities for the detected peaks. num_pixels List [ float ] A list storing the number of pixels in each detected peak. max_pixel_intensity List [ float ] A list storing, for each peak, the value of the pixel with the maximum intensity. snr List [ float ] A list storing the signal-to-noise ratio of each detected peak.","title":"TypePeakList"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection","text":"See documentation of the __init__ function.","title":"Peakfinder8PeakDetection"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.__init__","text":"Peakfinder8 algorithm for peak detection. This algorithm stores all the parameters required to detect Bragg peaks in a detector data frame using the peakfinder8 strategy, described in the following publication: A. Barty, R. A. Kirian, F. R. N. C. Maia, M. Hantke, C. H. Yoon, T. A. White, and H. N. Chapman, \"Cheetah: software for high-throughput reduction and analysis of serial femtosecond x-ray diffraction data\", J Appl Crystallogr, vol. 47, pp. 1118-1131 (2014). After the algorithm has been initialized, it can be invoked to detect peaks in a data frame. Parameters: Name Type Description Default radius_pixel_map NDArray [ numpy . float_ ] A pixel map storing radius information for the detector data frame on which the algorithm is applied. The array must have the same shape as the data frame on which the algorithm is applied. Each element of the array must store, for the corresponding pixel in the data frame, its distance (in pixels) from the origin of the detector reference system (usually the center of the detector). required layout_info TypeDetectorLayoutInformation An object storing information about the internal layout of the detector data frame on which the algorithm is applied (number and size of ASICs, etc.). required crystallography_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: max_num_peaks : The maximum number of peaks that the algorithm should retrieve from each data frame. Additional peaks will be ignored. adc_threshold : The minimum ADC threshold for peak detection. minimum_snr : The minimum signal-to-noise ratio for peak detection. min_pixel_count : The minimum size of a peak in pixels. max_pixel_count : The maximum size of a peak in pixels. local_bg_radius : The radius, in pixels, for the estimation of the local background. min_res : The minimum distance at which a peak can be located, in pixels, from the center of the detector. max_res : The maximum distance at which a peak can be located, in pixels, from the center of the detector. bad_pixel_map_filename : The relative or absolute path to an HDF5 file containing a bad pixel map. The map can be used to exclude regions of the data frame from the peak search. If the value of this entry is None, the peak search extends to the full frame. Defaults to None. The map must be a numpy array with the same shape as the data frame on which the algorithm is applied. Each pixel in the map must have a value of either 0, meaning that the corresponding pixel in the data frame should be ignored, or 1, meaning that the corresponding pixel should be included in the peak search. The map is only used to exclude areas from the peak search: the data is not modified in any way. bad_pixel_map_hdf5_path : The internal HDF5 path to the data block where the bad pixel map data is located. Defaults to None. If the bad_pixel_map_filename entry is not None, this entry must also be provided, and cannot be None. Otherwise it is ignored. required","title":"__init__()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.get_adc_thresh","text":"Gets the minimum ADC threshold for peak detection. This function returns the minimum ADC threshold currently used by the algorithm to detect peaks. Returns: Type Description float The minimum ADC threshold currently used by the algorithm.","title":"get_adc_thresh()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.set_adc_thresh","text":"Sets the current minimum ADC threshold for peak detection. This function sets the minimum ADC threshold used by the algorithm to detect peaks. Any future call to the find_peaks method will use, for the adc_thresh parameter, the value provided here. Parameters: Name Type Description Default adc_thresh float The new value of the minimum ADC threshold for peak detection. required","title":"set_adc_thresh()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.get_minimum_snr","text":"Gets the current minimum signal-to-noise ratio for peak detection. This function returns the minimum signal-to-noise ratio currently used by the algorithm to detect peaks. Returns: Type Description float The minimum signal-to-noise ratio currently used by the algorithm.","title":"get_minimum_snr()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.set_minimum_snr","text":"Sets the minimum signal-to-noise ratio for peak detection. This function sets the minimum signal-to-noise ratio used by the algorithm to detect peaks. Any future call to the find_peaks method will use, for the minimum_snr algorithm parameter, the value provided here. Parameters: Name Type Description Default minimum_snr float The new value of the minimum signal-to-noise ratio for peak detection. required","title":"set_minimum_snr()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.get_min_pixel_count","text":"Gets the current minimum size for a peak in pixels. This function returns the minimum size, in pixels, that the algorithm currently expects a peak to have. Returns: Type Description int The current minimum size, in pixels, for a peak.","title":"get_min_pixel_count()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.set_min_pixel_count","text":"Sets the minimum size for a peak in pixels. This function sets the minimum size, in pixels, that the algorithm expects a peak to have. Any future call to the find_peaks method will use, for the min_pixel_count parameter, the value provided here. Parameters: Name Type Description Default min_pixel_count int The new minimum size for a peak in pixels. required","title":"set_min_pixel_count()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.get_max_pixel_count","text":"Gets the current maximum size for a peak in pixels. This function returns the maximum size, in pixels, that the algorithm currently expects a peak to have. Returns: Type Description int The current maximum size, in pixels, for a peak.","title":"get_max_pixel_count()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.set_max_pixel_count","text":"Sets the maximum size for a peak in pixels. This function sets the maximum size, in pixels, that the algorithm expects a peak to have. Any future call to the find_peaks method will use, for the max_pixel_count parameter, the value provided here. Parameters: Name Type Description Default max_pixel_count int The new maximum size for a peak in pixels. required","title":"set_max_pixel_count()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.get_local_bg_radius","text":"Gets the radius, in pixels, currently used to estimate the local background. This function returns the radius, in pixels, currently used by the algorithm to estimate the local background. Returns: Type Description int The radius, in pixels, currently used for the estimation of the local background.","title":"get_local_bg_radius()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.set_local_bg_radius","text":"Sets the radius, in pixels, for the estimation of the local background. This function sets the radius, in pixels, used by the algorithm to estimate the local background. Any future call to the find_peaks method will use, for the local_bg_radius parameter, the value provided here. Parameters: Name Type Description Default local_bg_radius int The new radius, in pixels, to be used for the estimation of the local background. required","title":"set_local_bg_radius()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.get_min_res","text":"Gets the minimum distance for a peak from the detector's center in pixels. This function returns the minimum distance from the center of the detector, in pixels, that the algorithm currently expects a peak to have. Returns: Type Description int The current minimum distance, in pixels, for a peak from the detector's int center.","title":"get_min_res()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.set_min_res","text":"Sets the minimum distance for a peak from the detector's center in pixels. This function sets the minimum distance from the center of the detector, in pixels, that the algorithm expects a peak to have. Any future call to the find_peaks method will use, for the min_res parameter, the value provided here. Parameters: Name Type Description Default min_res int The new minimum distance, in pixels, from the detector's center for a peak. required","title":"set_min_res()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.get_max_res","text":"Gets the maximum distance for a peak from the detector's center in pixels. This function returns the maximum distance from the center of the detector, in pixels, that the algorithm currently expects a peak to have. Returns: Type Description int The current maximum distance, in pixels, for a peak from the detector's int center.","title":"get_max_res()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.set_max_res","text":"Sets the maximum distance for a peak from the detector's center in pixels. This function sets the maximum distance from the center of the detector, in pixels, that the algorithm expects a peak to have. Any future call to the find_peaks method will use, for the min_res parameter, the value provided here. Parameters: Name Type Description Default max_res int The new maximum distance, in pixels, from the detector's center for a peak. required","title":"set_max_res()"},{"location":"reference/om/algorithms/crystallography/#om.algorithms.crystallography.Peakfinder8PeakDetection.find_peaks","text":"Finds peaks in a detector data frame. This function detects peaks in a provided detector data frame, and returns information about their location, size and intensity. Parameters: Name Type Description Default data Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ]] The detector data frame on which the peak-finding operation must be performed. required Returns: Type Description TypePeakList A TypePeakList dictionary with information about the detected peaks.","title":"find_peaks()"},{"location":"reference/om/algorithms/generic/","text":"generic Generic algorithms. This module contains algorithms that perform generic data processing operations, not tied to a specific experimental technique (e.g.: data accumulation, radial averaging, binning, etc.). RadialProfile See documentation of the __init__ function. __init__ ( * , radius_pixel_map , radial_parameters ) Radial average calculation. This algorithm stores all the parameters needed to calculate the pixel-based radial profile of a detector data frame. After the algorithm has been initialized, it can be invoked to compute the radial profile of a data frame. Parameters: Name Type Description Default radius_pixel_map NDArray [ numpy . float_ ] A pixel map storing radius information for the detector data frame on which the algorithm is applied. The array must have the same shape as the data frame on which the algorithm is applied. Each element of the array must store, for the corresponding pixel in the data frame, its distance (in pixels) from the origin of the detector reference system (usually the center of the detector). required radial_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: radius_bin_size : The width, in pixels, of each radius bin in the radial profile. bad_pixel_map_filename : The relative or absolute path to an HDF5 file containing a bad pixel map. The map can be used to exclude regions of the data frame from the calculation of the radial profile. If the value of this entry is None, the calculation includes the full frame. Defaults to None. The map must be a numpy array with the same shape as the data frame on which the algorithm is applied. Each pixel in the map must have a value of either 0, meaning that the corresponding pixel in the data frame should be ignored, or 1, meaning that the corresponding pixel should be included in the calculation of the profile. The map is only used to exclude regions from the calculation: the data is not modified in any way. bad_pixel_map_hdf5_path : The internal HDF5 path to the data block where the bad pixel map data is located. Defaults to None. If the bad_pixel_map_filename entry is not None, this entry must also be provided, and cannot be None. Otherwise it is ignored. required get_radial_bin_labels () Gets the radial bin label information. This function returns an array, with the same shape as the data frame on which the algorithm is applied, containing bin labelling information. Each element of the array corresponds to a pixel in the data frame, and stores the index of the radial bin in which the pixel falls according to the radius information provided to the algorithm. Returns: Type Description NDArray [ numpy . int_ ] An array containing the bin labelling information. get_bad_pixel_map () Gets the bad pixel map provided to the algorithm. This function returns the bad pixel map provided to the algorithm at initialization. If no bad pixel map was provided, the function returns None. Returns: Type Description Union [ NDArray [ numpy . bool_ ], None] The bad pixel map provided to the algorithm at initialization, or None if Union [ NDArray [ numpy . bool_ ], None] no map was provided. calculate_profile ( data ) Calculates the radial profile for a detector data frame. This function calculates the radial profile of a provided detector data frame. Parameters: Name Type Description Default data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] the detector data frame for which the radial profile must be calculated. required Returns: Type Description NDArray [ numpy . float_ ] The radial profile. Binning See documentation of the __init__ function. __init__ ( * , layout_info , parameters ) Binning of detector data frames. This algorithm stores all the parameters needed to bin the data in a detector data frame. After the algorithm has been initialized, it can be invoked to bin the data in a data frame, or to generate pixel maps and masks that are compatible with the binned data. Parameters: Name Type Description Default layout_info TypeDetectorLayoutInformation An object storing information about the internal data layout of the detector frame on which the algorithm is applied (number and size of ASICs, etc.). required parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: bin_size : The size of the binning area in pixels (A square area of bin_size x bin_size pixels in the original data frame is transformed by the algorithm into a single binned pixel). bad_pixel_map_filename : The absolute or relative path to an HDF5 file containing a bad pixel map. The map can be used to exclude regions of the the data frame from the binning calculation. If the value of this entry is None, the full frame is used to compute the binned data. Defaults to None. The map must be a numpy array of the same shape as the data frame on which the algorithm is applied. Each pixel in the map must have a value of either 0, meaning that the corresponding pixel in the data frame must be ignored in the binning calculation, or 1, meaning that the pixel must be included in the calculation. bad_pixel_map_hdf5_path : The internal HDF5 path to the data block where the bad pixel map is stored. If the value of the bad_pixel_map_filename entry is not None, this parameter must also be provided, and cannot be None. Otherwise it is ignored. min_good_pix_count : The minimum number of non-excluded pixels that must be present in a binning area for the generated binned pixel to be considered valid (pixels of the original frame can be excluded from the binning calculation using a bad pixel map). Defaults to a number corresponding to all the pixels in the binning area (the square value of the bin_size argument). bad_pixel_value : The value to be written in the binned data frame when a pixel is invalid (too many pixels in the original inning area are excluded by the calculation). Defaults to MAXINT if the data to bin is of integer type, otherwise defaults to numpy.nan . required is_passthrough () Whether the algorithm performs a simple passthrough operation. This function returns information on whether the algorithm performs a simple passthrough operation (See BinningPassthrough ). For this algorithm, the function always returns False. Returns: Type Description bool Whether the algorithm performs a simple passthrough operation. get_bin_size () Gets the size of the binning area. This function returns the size of the area in the original data that gets transformed in a single pixel in the binned data. Specifically, the function returns the length of the edge of the area: if an area of size bin size x bin size in the original data ends up in a single binned pixel, the function returns the value of bin_size . Returns: Type Description int The length of the edge of the binning area. get_binned_layout_info () Gets the data layout information for the binned data frame. This function returns information about the internal data layout of a binned frame generated by the algorithm. Returns: Type Description TypeDetectorLayoutInformation A dictionary with the data layout information for the binned frame. bin_detector_data ( * , data ) Computes a binned version of the detector data frame. This function computes the binned version of a provided detector data frame. For each binning area in the original data frame, the function initially computes the average value of all pixels, excluding the ones that are must be ignored. It then multiplies the calculated average value by the total number of pixels in the binning area. The result is used to fill, in the binned frame, the binned pixel corresponding to the original area. If, however, the binned pixel is determined to be invalid (too many pixels in the original area must be ignored), this function uses a fallback value to fill it. Parameters: Name Type Description Default data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] The detector data frame on which the binning must be performed. required Returns: Type Description NDArray [ numpy . float_ ] A binned version of the detector data frame. bin_bad_pixel_map ( * , mask ) Computes a bad pixel map for a binned data frame. Starting from a bad pixel map designed for the original detector frame, this function calculates a bad pixel map that can be used with a binned data frame generated by the algorithm. In the bad pixel map computed by this function, only binned pixels originating from binning areas containing exclusively good pixels are marked as good. If even a single bad pixel was present in the original binning area, this function labels the corresponding binned pixel as bad. Parameters: Name Type Description Default mask Union [ NDArray [ numpy . int_ ], None] An array storing a bad pixel map for the original data frame. The map must be a numpy array of the same shape as the data frame on which the binning algorithm is applied. Each pixel in the map must have a value of either 0, meaning that the corresponding pixel in the data frame should be considered bad, or 1, meaning that the corresponding pixel should be considered good. This argument is mandatory. However, the argument can be set to None, in which case the function will do nothing and return None. required Returns: Type Description Union [ NDArray [ numpy . int_ ], None] Either an array containing the binned map or None if the mask input Union [ NDArray [ numpy . int_ ], None] argument is None. bin_pixel_maps ( * , pixel_maps ) Computes pixel maps for a binned data frame. Starting from pixel maps designed for the original detector frame, this function calculates pixel maps that can be used with a binned data frame generated by the algorithm. Parameters: Name Type Description Default pixel_maps TypePixelMaps A dictionary storing the pixel maps for the original detector frame. required Returns: Type Description TypePixelMaps A dictionary storing the pixel maps for the binned frame. bin_peak_positions ( peak_list ) Computes peaks positions for a binned data frame. Starting from a list of peaks detected in the original detector frame, this function calculates the coordinates of the same peaks in a binned data frame generated by the algorithm. Parameters: Name Type Description Default peak_list TypePeakList An dictionary storing information about a set of peaks detected in the original detector frame. required Returns: Type Description TypePeakList A dictionary storing information about the detected peaks in the binned TypePeakList data frame. BinningPassthrough See documentation of the __init__ function. __init__ ( * , layout_info ) Passthrough binning of detector data frames. This algorithm has the same interface as the Binning algorithm. All the functions, however, perform no operation at all, simply returning the original detector layout information, detector data frame, bad pixel map, or pixel maps. This algorithm exists to avoid filling the code base with if statements that just check if binning is required and call the Binning algorithm accordingly. After a single initial check of the form: if binning_required: binning = Binning(...) else: binning = BinningPassthrough(...) The rest of the code can avoid performing checks and simply call the methods of the binning instance, expecting the correct behavior. Parameters: Name Type Description Default layout_info TypeDetectorLayoutInformation An object storing information about the internal layout of the detector data frame on which the algorithm is applied (number and size of ASICs, etc.). required is_passthrough () Whether the algorithm performs a passthrough operation. This function returns information on whether the algorithm performs a simple passthrough operation. For this algorithm, the function always returns True. Returns: Type Description bool Whether the algorithm performs a simple passthrough operation. get_bin_size () Gets the size of the binning area. This function returns the size of the area in the original data that gets transformed in a single pixel in the binned data. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns 1. Returns: Type Description int The size of the edge of binning area. get_binned_layout_info () Gets the data layout information for the binned data frame. This function returns information about the internal data layout of a binned frame generated by the algorithm. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns the layout information initially provided to the algorithm. Returns: Type Description TypeDetectorLayoutInformation A dictionary with the data layout information for the binned frame. bin_detector_data ( * , data ) Computes a binned version of the detector data frame. This function generates the binned version of a provided detector data frame. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns the detector data frame provided as input. Parameters: Name Type Description Default data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] The detector data frame on which the binning must be performed. required Returns: Type Description NDArray [ numpy . float_ ] A binned version of the detector data frame. bin_bad_pixel_map ( * , mask ) Computes a bad pixel map for the binned data frame. Starting from a bad pixel map designed for the original detector frame, this function calculates a bad pixel map that can be used with a binned data frame generated by the algorithm. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns the bad pixel map provided as input. Parameters: Name Type Description Default mask Union [ NDArray [ numpy . int_ ], None] An array storing a bad pixel map for the original data frame. The map must be a numpy array of the same shape as the data frame on which the binning algorithm is applied. Each pixel in the map must have a value of either 0, meaning that the corresponding pixel in the data frame should be considered bad, or 1, meaning that the corresponding pixel should be considered good. This argument is mandatory. However, the argument can be set to None, in which case the function will do nothing and return None. required Returns: Type Description Union [ NDArray [ numpy . int_ ], None] Either an array containing the binned map or None if the mask input Union [ NDArray [ numpy . int_ ], None] argument is None. bin_pixel_maps ( * , pixel_maps ) Computes pixel maps for a binned data frame. Starting from pixel maps designed for the original detector frame, this function calculates pixel maps that can be used with a binned data frame generated by the algorithm. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns the pixel maps provided as input. Parameters: Name Type Description Default pixel_maps TypePixelMaps A dictionary storing the pixel maps for the original detector frame. required Returns: Type Description TypePixelMaps A dictionary storing the pixel maps for the binned frame. bin_peak_positions ( peak_list ) Computes peaks positions for a binned data frame. Starting from a list of peaks detected in the original detector frame, this function calculates the coordinates of the same peaks in a binned data frame generated by the algorithm. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns the peak list provided as input. Parameters: Name Type Description Default peak_list TypePeakList An dictionary storing information about a set of peaks detected in the original detector frame. required Returns: Type Description TypePeakList A dictionary storing information about the detected peaks in the binned TypePeakList data frame.","title":"generic"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic","text":"Generic algorithms. This module contains algorithms that perform generic data processing operations, not tied to a specific experimental technique (e.g.: data accumulation, radial averaging, binning, etc.).","title":"generic"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.RadialProfile","text":"See documentation of the __init__ function.","title":"RadialProfile"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.RadialProfile.__init__","text":"Radial average calculation. This algorithm stores all the parameters needed to calculate the pixel-based radial profile of a detector data frame. After the algorithm has been initialized, it can be invoked to compute the radial profile of a data frame. Parameters: Name Type Description Default radius_pixel_map NDArray [ numpy . float_ ] A pixel map storing radius information for the detector data frame on which the algorithm is applied. The array must have the same shape as the data frame on which the algorithm is applied. Each element of the array must store, for the corresponding pixel in the data frame, its distance (in pixels) from the origin of the detector reference system (usually the center of the detector). required radial_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: radius_bin_size : The width, in pixels, of each radius bin in the radial profile. bad_pixel_map_filename : The relative or absolute path to an HDF5 file containing a bad pixel map. The map can be used to exclude regions of the data frame from the calculation of the radial profile. If the value of this entry is None, the calculation includes the full frame. Defaults to None. The map must be a numpy array with the same shape as the data frame on which the algorithm is applied. Each pixel in the map must have a value of either 0, meaning that the corresponding pixel in the data frame should be ignored, or 1, meaning that the corresponding pixel should be included in the calculation of the profile. The map is only used to exclude regions from the calculation: the data is not modified in any way. bad_pixel_map_hdf5_path : The internal HDF5 path to the data block where the bad pixel map data is located. Defaults to None. If the bad_pixel_map_filename entry is not None, this entry must also be provided, and cannot be None. Otherwise it is ignored. required","title":"__init__()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.RadialProfile.get_radial_bin_labels","text":"Gets the radial bin label information. This function returns an array, with the same shape as the data frame on which the algorithm is applied, containing bin labelling information. Each element of the array corresponds to a pixel in the data frame, and stores the index of the radial bin in which the pixel falls according to the radius information provided to the algorithm. Returns: Type Description NDArray [ numpy . int_ ] An array containing the bin labelling information.","title":"get_radial_bin_labels()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.RadialProfile.get_bad_pixel_map","text":"Gets the bad pixel map provided to the algorithm. This function returns the bad pixel map provided to the algorithm at initialization. If no bad pixel map was provided, the function returns None. Returns: Type Description Union [ NDArray [ numpy . bool_ ], None] The bad pixel map provided to the algorithm at initialization, or None if Union [ NDArray [ numpy . bool_ ], None] no map was provided.","title":"get_bad_pixel_map()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.RadialProfile.calculate_profile","text":"Calculates the radial profile for a detector data frame. This function calculates the radial profile of a provided detector data frame. Parameters: Name Type Description Default data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] the detector data frame for which the radial profile must be calculated. required Returns: Type Description NDArray [ numpy . float_ ] The radial profile.","title":"calculate_profile()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.Binning","text":"See documentation of the __init__ function.","title":"Binning"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.Binning.__init__","text":"Binning of detector data frames. This algorithm stores all the parameters needed to bin the data in a detector data frame. After the algorithm has been initialized, it can be invoked to bin the data in a data frame, or to generate pixel maps and masks that are compatible with the binned data. Parameters: Name Type Description Default layout_info TypeDetectorLayoutInformation An object storing information about the internal data layout of the detector frame on which the algorithm is applied (number and size of ASICs, etc.). required parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: bin_size : The size of the binning area in pixels (A square area of bin_size x bin_size pixels in the original data frame is transformed by the algorithm into a single binned pixel). bad_pixel_map_filename : The absolute or relative path to an HDF5 file containing a bad pixel map. The map can be used to exclude regions of the the data frame from the binning calculation. If the value of this entry is None, the full frame is used to compute the binned data. Defaults to None. The map must be a numpy array of the same shape as the data frame on which the algorithm is applied. Each pixel in the map must have a value of either 0, meaning that the corresponding pixel in the data frame must be ignored in the binning calculation, or 1, meaning that the pixel must be included in the calculation. bad_pixel_map_hdf5_path : The internal HDF5 path to the data block where the bad pixel map is stored. If the value of the bad_pixel_map_filename entry is not None, this parameter must also be provided, and cannot be None. Otherwise it is ignored. min_good_pix_count : The minimum number of non-excluded pixels that must be present in a binning area for the generated binned pixel to be considered valid (pixels of the original frame can be excluded from the binning calculation using a bad pixel map). Defaults to a number corresponding to all the pixels in the binning area (the square value of the bin_size argument). bad_pixel_value : The value to be written in the binned data frame when a pixel is invalid (too many pixels in the original inning area are excluded by the calculation). Defaults to MAXINT if the data to bin is of integer type, otherwise defaults to numpy.nan . required","title":"__init__()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.Binning.is_passthrough","text":"Whether the algorithm performs a simple passthrough operation. This function returns information on whether the algorithm performs a simple passthrough operation (See BinningPassthrough ). For this algorithm, the function always returns False. Returns: Type Description bool Whether the algorithm performs a simple passthrough operation.","title":"is_passthrough()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.Binning.get_bin_size","text":"Gets the size of the binning area. This function returns the size of the area in the original data that gets transformed in a single pixel in the binned data. Specifically, the function returns the length of the edge of the area: if an area of size bin size x bin size in the original data ends up in a single binned pixel, the function returns the value of bin_size . Returns: Type Description int The length of the edge of the binning area.","title":"get_bin_size()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.Binning.get_binned_layout_info","text":"Gets the data layout information for the binned data frame. This function returns information about the internal data layout of a binned frame generated by the algorithm. Returns: Type Description TypeDetectorLayoutInformation A dictionary with the data layout information for the binned frame.","title":"get_binned_layout_info()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.Binning.bin_detector_data","text":"Computes a binned version of the detector data frame. This function computes the binned version of a provided detector data frame. For each binning area in the original data frame, the function initially computes the average value of all pixels, excluding the ones that are must be ignored. It then multiplies the calculated average value by the total number of pixels in the binning area. The result is used to fill, in the binned frame, the binned pixel corresponding to the original area. If, however, the binned pixel is determined to be invalid (too many pixels in the original area must be ignored), this function uses a fallback value to fill it. Parameters: Name Type Description Default data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] The detector data frame on which the binning must be performed. required Returns: Type Description NDArray [ numpy . float_ ] A binned version of the detector data frame.","title":"bin_detector_data()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.Binning.bin_bad_pixel_map","text":"Computes a bad pixel map for a binned data frame. Starting from a bad pixel map designed for the original detector frame, this function calculates a bad pixel map that can be used with a binned data frame generated by the algorithm. In the bad pixel map computed by this function, only binned pixels originating from binning areas containing exclusively good pixels are marked as good. If even a single bad pixel was present in the original binning area, this function labels the corresponding binned pixel as bad. Parameters: Name Type Description Default mask Union [ NDArray [ numpy . int_ ], None] An array storing a bad pixel map for the original data frame. The map must be a numpy array of the same shape as the data frame on which the binning algorithm is applied. Each pixel in the map must have a value of either 0, meaning that the corresponding pixel in the data frame should be considered bad, or 1, meaning that the corresponding pixel should be considered good. This argument is mandatory. However, the argument can be set to None, in which case the function will do nothing and return None. required Returns: Type Description Union [ NDArray [ numpy . int_ ], None] Either an array containing the binned map or None if the mask input Union [ NDArray [ numpy . int_ ], None] argument is None.","title":"bin_bad_pixel_map()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.Binning.bin_pixel_maps","text":"Computes pixel maps for a binned data frame. Starting from pixel maps designed for the original detector frame, this function calculates pixel maps that can be used with a binned data frame generated by the algorithm. Parameters: Name Type Description Default pixel_maps TypePixelMaps A dictionary storing the pixel maps for the original detector frame. required Returns: Type Description TypePixelMaps A dictionary storing the pixel maps for the binned frame.","title":"bin_pixel_maps()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.Binning.bin_peak_positions","text":"Computes peaks positions for a binned data frame. Starting from a list of peaks detected in the original detector frame, this function calculates the coordinates of the same peaks in a binned data frame generated by the algorithm. Parameters: Name Type Description Default peak_list TypePeakList An dictionary storing information about a set of peaks detected in the original detector frame. required Returns: Type Description TypePeakList A dictionary storing information about the detected peaks in the binned TypePeakList data frame.","title":"bin_peak_positions()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.BinningPassthrough","text":"See documentation of the __init__ function.","title":"BinningPassthrough"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.BinningPassthrough.__init__","text":"Passthrough binning of detector data frames. This algorithm has the same interface as the Binning algorithm. All the functions, however, perform no operation at all, simply returning the original detector layout information, detector data frame, bad pixel map, or pixel maps. This algorithm exists to avoid filling the code base with if statements that just check if binning is required and call the Binning algorithm accordingly. After a single initial check of the form: if binning_required: binning = Binning(...) else: binning = BinningPassthrough(...) The rest of the code can avoid performing checks and simply call the methods of the binning instance, expecting the correct behavior. Parameters: Name Type Description Default layout_info TypeDetectorLayoutInformation An object storing information about the internal layout of the detector data frame on which the algorithm is applied (number and size of ASICs, etc.). required","title":"__init__()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.BinningPassthrough.is_passthrough","text":"Whether the algorithm performs a passthrough operation. This function returns information on whether the algorithm performs a simple passthrough operation. For this algorithm, the function always returns True. Returns: Type Description bool Whether the algorithm performs a simple passthrough operation.","title":"is_passthrough()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.BinningPassthrough.get_bin_size","text":"Gets the size of the binning area. This function returns the size of the area in the original data that gets transformed in a single pixel in the binned data. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns 1. Returns: Type Description int The size of the edge of binning area.","title":"get_bin_size()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.BinningPassthrough.get_binned_layout_info","text":"Gets the data layout information for the binned data frame. This function returns information about the internal data layout of a binned frame generated by the algorithm. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns the layout information initially provided to the algorithm. Returns: Type Description TypeDetectorLayoutInformation A dictionary with the data layout information for the binned frame.","title":"get_binned_layout_info()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.BinningPassthrough.bin_detector_data","text":"Computes a binned version of the detector data frame. This function generates the binned version of a provided detector data frame. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns the detector data frame provided as input. Parameters: Name Type Description Default data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] The detector data frame on which the binning must be performed. required Returns: Type Description NDArray [ numpy . float_ ] A binned version of the detector data frame.","title":"bin_detector_data()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.BinningPassthrough.bin_bad_pixel_map","text":"Computes a bad pixel map for the binned data frame. Starting from a bad pixel map designed for the original detector frame, this function calculates a bad pixel map that can be used with a binned data frame generated by the algorithm. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns the bad pixel map provided as input. Parameters: Name Type Description Default mask Union [ NDArray [ numpy . int_ ], None] An array storing a bad pixel map for the original data frame. The map must be a numpy array of the same shape as the data frame on which the binning algorithm is applied. Each pixel in the map must have a value of either 0, meaning that the corresponding pixel in the data frame should be considered bad, or 1, meaning that the corresponding pixel should be considered good. This argument is mandatory. However, the argument can be set to None, in which case the function will do nothing and return None. required Returns: Type Description Union [ NDArray [ numpy . int_ ], None] Either an array containing the binned map or None if the mask input Union [ NDArray [ numpy . int_ ], None] argument is None.","title":"bin_bad_pixel_map()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.BinningPassthrough.bin_pixel_maps","text":"Computes pixel maps for a binned data frame. Starting from pixel maps designed for the original detector frame, this function calculates pixel maps that can be used with a binned data frame generated by the algorithm. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns the pixel maps provided as input. Parameters: Name Type Description Default pixel_maps TypePixelMaps A dictionary storing the pixel maps for the original detector frame. required Returns: Type Description TypePixelMaps A dictionary storing the pixel maps for the binned frame.","title":"bin_pixel_maps()"},{"location":"reference/om/algorithms/generic/#om.algorithms.generic.BinningPassthrough.bin_peak_positions","text":"Computes peaks positions for a binned data frame. Starting from a list of peaks detected in the original detector frame, this function calculates the coordinates of the same peaks in a binned data frame generated by the algorithm. Since the BinningPassthrough algorithm performs no binning operation at all, this function always returns the peak list provided as input. Parameters: Name Type Description Default peak_list TypePeakList An dictionary storing information about a set of peaks detected in the original detector frame. required Returns: Type Description TypePeakList A dictionary storing information about the detected peaks in the binned TypePeakList data frame.","title":"bin_peak_positions()"},{"location":"reference/om/algorithms/xes/","text":"xes Algorithms for the processing of x-ray emission spectroscopy data. This module contains algorithms that perform data processing operations for X-ray Emission Spectroscopy. EnergySpectrumRetrieval See documentation of the __init__ function. __init__ ( * , parameters ) Beam energy spectrum retrieval. This algorithm stores all the parameters needed to extract energy spectra from camera data frames. After the algorithm has been initialized, it can be invoked to calculate an energy spectrum from a data frame. Warning This algorithm is designed to be applied to camera frames, rather than data frames from multi-panel area detectors. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: intensity_threshold_in_ADU : An intensity threshold, in ADU units, for pixels in the camera frame to be considered in the spectrum calculation. Pixel below this threshold are ignored. rotation_in_degrees : The rotation, in degrees, that should be applied to the to align the spectrum information with the vertical axis of the camera data frame. min_row_in_pix_for_integration : The starting row index for the section of the camera data frame containing the spectrum information (pixels outside this area are ignored). min_row_in_pix_for_integration : The ending row index for the section of the camera data frame containing the spectrum information (pixels outside this area are ignored). required calculate_spectrum ( * , data ) Calculates beam energy spectrum information from a camera data frame. This function extracts energy spectrum information from a provided camera data frame. It returns the raw spectrum information, plus a smoother, filtered version of it. The function initially rotates the camera image to align the spectrum information with the vertical axis of the camera data frame. It then computes the beam energy spectrum by integrating the region where the energy is recorded along the horizontal axis of the data frame. Optionally, the algorithm can apply an ADU threshold can to the camera data. If a threshold is provided when the algorithm is initialized, this function excludes from the spectrum calculation all the pixels below the threshold. Parameters: Name Type Description Default data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] The camera data frame from which the spectrum information must be extracted. required Returns: Type Description Dict [ str , NDArray [ numpy . float_ ]] A dictionary storing the spectrum information extracted from the camera frame. The value corresponding to the key named spectrum is a 1D array storing the raw spectrum information. The value corresponding to the key named spectrum_smooth is a 1D array storing a filtered, smoothed version of the spectrum.","title":"xes"},{"location":"reference/om/algorithms/xes/#om.algorithms.xes","text":"Algorithms for the processing of x-ray emission spectroscopy data. This module contains algorithms that perform data processing operations for X-ray Emission Spectroscopy.","title":"xes"},{"location":"reference/om/algorithms/xes/#om.algorithms.xes.EnergySpectrumRetrieval","text":"See documentation of the __init__ function.","title":"EnergySpectrumRetrieval"},{"location":"reference/om/algorithms/xes/#om.algorithms.xes.EnergySpectrumRetrieval.__init__","text":"Beam energy spectrum retrieval. This algorithm stores all the parameters needed to extract energy spectra from camera data frames. After the algorithm has been initialized, it can be invoked to calculate an energy spectrum from a data frame. Warning This algorithm is designed to be applied to camera frames, rather than data frames from multi-panel area detectors. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: intensity_threshold_in_ADU : An intensity threshold, in ADU units, for pixels in the camera frame to be considered in the spectrum calculation. Pixel below this threshold are ignored. rotation_in_degrees : The rotation, in degrees, that should be applied to the to align the spectrum information with the vertical axis of the camera data frame. min_row_in_pix_for_integration : The starting row index for the section of the camera data frame containing the spectrum information (pixels outside this area are ignored). min_row_in_pix_for_integration : The ending row index for the section of the camera data frame containing the spectrum information (pixels outside this area are ignored). required","title":"__init__()"},{"location":"reference/om/algorithms/xes/#om.algorithms.xes.EnergySpectrumRetrieval.calculate_spectrum","text":"Calculates beam energy spectrum information from a camera data frame. This function extracts energy spectrum information from a provided camera data frame. It returns the raw spectrum information, plus a smoother, filtered version of it. The function initially rotates the camera image to align the spectrum information with the vertical axis of the camera data frame. It then computes the beam energy spectrum by integrating the region where the energy is recorded along the horizontal axis of the data frame. Optionally, the algorithm can apply an ADU threshold can to the camera data. If a threshold is provided when the algorithm is initialized, this function excludes from the spectrum calculation all the pixels below the threshold. Parameters: Name Type Description Default data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] The camera data frame from which the spectrum information must be extracted. required Returns: Type Description Dict [ str , NDArray [ numpy . float_ ]] A dictionary storing the spectrum information extracted from the camera frame. The value corresponding to the key named spectrum is a 1D array storing the raw spectrum information. The value corresponding to the key named spectrum_smooth is a 1D array storing a filtered, smoothed version of the spectrum.","title":"calculate_spectrum()"},{"location":"reference/om/data_retrieval_layer/","text":"data_retrieval_layer OM's Data Retrieval Layer. This package contains OM's Data Retrieval Layer, which takes care of retrieving data and data events to be processed. Modules in this package contain functions and classes for specific detectors, facilities or software frameworks. data_event_handlers_asapo data_event_handlers_files data_event_handlers_http data_event_handlers_psana data_event_handlers_zmq data_retrieval_aspao data_retrieval_files data_retrieval_http data_retrieval_psana data_retrieval_zmq data_sources_files data_sources_generic data_sources_generic data_sources_http data_sources_psana data_sources_zmq event_retrieval","title":"__init__"},{"location":"reference/om/data_retrieval_layer/#om.data_retrieval_layer","text":"OM's Data Retrieval Layer. This package contains OM's Data Retrieval Layer, which takes care of retrieving data and data events to be processed. Modules in this package contain functions and classes for specific detectors, facilities or software frameworks. data_event_handlers_asapo data_event_handlers_files data_event_handlers_http data_event_handlers_psana data_event_handlers_zmq data_retrieval_aspao data_retrieval_files data_retrieval_http data_retrieval_psana data_retrieval_zmq data_sources_files data_sources_generic data_sources_generic data_sources_http data_sources_psana data_sources_zmq event_retrieval","title":"data_retrieval_layer"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/","text":"data_event_handlers_asapo Handling of ASAP::O-based data events. This module contains Data Event Handler classes that manipulate events originating from the ASAP::O software framework (used at the PETRA III facility). AsapoDataEventHandler Bases: OmDataEventHandlerProtocol See documentation of the __init__ function. __init__ ( * , source , data_sources , monitor_parameters ) Data Event Handler for ASAP::O events. This class handles data events retrieved from the ASAP::O software framework at the PETRA III facility. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to the content of an individual ASAP::O event. The source string required by this Data Event Handler is either the ID of the beamtime for which OM is being used (for online data retrieval) or the ID of the beamtime and the name of the ASAP::O stream separated by a colon (for offline data retrieval). Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_event_handling_on_collecting_node ( * , node_rank , node_pool_size ) Initializes ASAP::O event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. ASAP::O event handling does not need to be initialized on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_event_handling_on_processing_node ( node_rank , node_pool_size ) Initializes ASAP::O event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required event_generator ( * , node_rank , node_pool_size ) Retrieves ASAP::O events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single ASAP::O event. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required open_event ( * , event ) Opens an ASAP::O event. Please see the documentation of the base Protocol class for additional information about this method. ASAP::O events do not need to be opened, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required close_event ( * , event ) Closes an ASAP::O event. Please see the documentation of the base Protocol class for additional information about this method. ASAP::O events do not need to be closed, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required extract_data ( * , event ) Extracts data from an ASAP::O data event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event. initialize_event_data_retrieval () Initializes event data retrievals from ASAP::O. This function initializes the retrieval of single standalone data events from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method. retrieve_event_data ( event_id ) Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. An ASAP::O event identifier corresponds to the ASAP::O stream name and the ID of the ASAP::O event within the stream, separated by the \"//\" symbol. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event.","title":"data_event_handlers_asapo"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/#om.data_retrieval_layer.data_event_handlers_asapo","text":"Handling of ASAP::O-based data events. This module contains Data Event Handler classes that manipulate events originating from the ASAP::O software framework (used at the PETRA III facility).","title":"data_event_handlers_asapo"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/#om.data_retrieval_layer.data_event_handlers_asapo.AsapoDataEventHandler","text":"Bases: OmDataEventHandlerProtocol See documentation of the __init__ function.","title":"AsapoDataEventHandler"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/#om.data_retrieval_layer.data_event_handlers_asapo.AsapoDataEventHandler.__init__","text":"Data Event Handler for ASAP::O events. This class handles data events retrieved from the ASAP::O software framework at the PETRA III facility. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to the content of an individual ASAP::O event. The source string required by this Data Event Handler is either the ID of the beamtime for which OM is being used (for online data retrieval) or the ID of the beamtime and the name of the ASAP::O stream separated by a colon (for offline data retrieval). Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/#om.data_retrieval_layer.data_event_handlers_asapo.AsapoDataEventHandler.initialize_event_handling_on_collecting_node","text":"Initializes ASAP::O event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. ASAP::O event handling does not need to be initialized on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_collecting_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/#om.data_retrieval_layer.data_event_handlers_asapo.AsapoDataEventHandler.initialize_event_handling_on_processing_node","text":"Initializes ASAP::O event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_processing_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/#om.data_retrieval_layer.data_event_handlers_asapo.AsapoDataEventHandler.event_generator","text":"Retrieves ASAP::O events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single ASAP::O event. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"event_generator()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/#om.data_retrieval_layer.data_event_handlers_asapo.AsapoDataEventHandler.open_event","text":"Opens an ASAP::O event. Please see the documentation of the base Protocol class for additional information about this method. ASAP::O events do not need to be opened, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"open_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/#om.data_retrieval_layer.data_event_handlers_asapo.AsapoDataEventHandler.close_event","text":"Closes an ASAP::O event. Please see the documentation of the base Protocol class for additional information about this method. ASAP::O events do not need to be closed, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"close_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/#om.data_retrieval_layer.data_event_handlers_asapo.AsapoDataEventHandler.extract_data","text":"Extracts data from an ASAP::O data event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event.","title":"extract_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/#om.data_retrieval_layer.data_event_handlers_asapo.AsapoDataEventHandler.initialize_event_data_retrieval","text":"Initializes event data retrievals from ASAP::O. This function initializes the retrieval of single standalone data events from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method.","title":"initialize_event_data_retrieval()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_asapo/#om.data_retrieval_layer.data_event_handlers_asapo.AsapoDataEventHandler.retrieve_event_data","text":"Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. An ASAP::O event identifier corresponds to the ASAP::O stream name and the ID of the ASAP::O event within the stream, separated by the \"//\" symbol. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event.","title":"retrieve_event_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/","text":"data_event_handlers_files Handling of file-based data events. This module contains Data Event Handler classes that manipulate file-based events. PilatusFilesEventHandler Bases: OmDataEventHandlerProtocol See documentation of the __init__ function. __init__ ( * , source , data_sources , monitor_parameters ) Data Event Handler for Pilatus single-frame files. This class handles data events originating from single-frame CBF files written by a Pilatus detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to the content of an individual single-frame CBF file. The source string required by this Data Event Handler is the path to a file containing a list of CBF files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_event_handling_on_collecting_node ( * , node_rank , node_pool_size ) Initializes Pilatus single-frame file event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. There is usually no need to initialize Pilatus file-based event handling on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_event_handling_on_processing_node ( * , node_rank , node_pool_size ) Initializes Pilatus single-frame file event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required event_generator ( * , node_rank , node_pool_size ) Retrieves Pilatus single-frame file events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to the content of an individual single-frame CBF file. The function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last last node will process fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required open_event ( * , event ) Opens a Pilatus single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. This function opens the CBF file associated with the data event and stores its content in the provided event dictionary, as the value corresponding to the data key. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required close_event ( * , event ) Closes a Pilatus single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. CBF files don't need to be closed, so this function does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required extract_data ( * , event ) Extracts data from a Pilatus single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event. initialize_event_data_retrieval () Initializes data data retrieval from Pilatus single-frame files. This function initializes the retrieval of single standalone data events from Pilatus single-frame data files. Please see the documentation of the base Protocol class for additional information about this method. retrieve_event_data ( event_id ) Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. A Pilatus single-frame file event identifier corresponds to the relative or absolute path to a file containing the event data. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event. Jungfrau1MFilesDataEventHandler Bases: OmDataEventHandlerProtocol See documentation of the __init__ function. __init__ ( * , source , data_sources , monitor_parameters ) Data Event Handler for Jungfrau 1M files. This class handles data events retrieved from files written by a Jungfrau 1M detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to all the information associated with an individual frame stored in an HDF5 file. The source string required by this Data Event Handler is the path to a file containing a list of master HDF5 files to process, one per line, with their absolute or relative path. Each file can store more than one detector data frame, and each frame in the file is processed as a separate event. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_event_handling_on_collecting_node ( * , node_rank , node_pool_size ) Initializes Jungfrau 1M file event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. There is usually no need to initialize Jungfrau 1M file-based event handling on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_event_handling_on_processing_node ( * , node_rank , node_pool_size ) Initializes Jungfrau 1M file event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required event_generator ( * , node_rank , node_pool_size ) Retrieves Jungfrau 1M file events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single single detector data frame with all its associated data. The function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last last node processes fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required open_event ( * , event ) Opens a Jungfrau 1M file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required close_event ( * , event ) Closes a Jungfrau 1M file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required extract_data ( * , event ) Extracts data from a Jungfrau 1M file event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event. initialize_event_data_retrieval () Initializes event data retrieval from Jungfrau 1M HDF5 files. This function initializes the retrieval of single standalone data events from Jungfrau 1M HDF5 files. Please see the documentation of the base Protocol class for additional information about this method. retrieve_event_data ( event_id ) Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. A Jungfrau 1M unique event identifier is a string consisting of the absolute or relative path to the master HDF5 file attached to the event, and the index of the event within the file, separated by the '//' symbol. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event. EigerFilesDataEventHandler Bases: OmDataEventHandlerProtocol See documentation of the __init__ function. __init__ ( * , source , data_sources , monitor_parameters ) Data Event Handler for Eiger files. This Data Event Handler deals with events originating from files written by an Eiger detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to all the information associated with an individual frame stored in an HDF5 file. The source string required by this Data Event Handler is the path to a file containing a list of HDF5 files to process, one per line, with their absolute or relative path. Each file can store more than one detector data frame, and each frame in the file is processed as a separate event. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_event_handling_on_collecting_node ( * , node_rank , node_pool_size ) Initializes Eiger file event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. There is usually no need to initialize Eiger's file-based data handling on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_event_handling_on_processing_node ( * , node_rank , node_pool_size ) Initializes Eiger file event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required event_generator ( * , node_rank , node_pool_size ) Retrieves Eiger file events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single detector data frame with all its associated data. The function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last node processes fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required open_event ( * , event ) Opens a Eiger file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required close_event ( * , event ) Closes a Eiger file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required extract_data ( * , event ) Extracts data from an Eiger file event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event. initialize_event_data_retrieval () Initializes event data retrieval from Eiger files. This function initializes the retrieval of single standalone data events from Eiger files. Please see the documentation of the base Protocol class for additional information about this method. retrieve_event_data ( event_id ) Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. An Eiger event identifier is a string consisting of the absolute or relative path to the HDF5 data file attached to the event, and the index of the event within the file, separated by '//' symbol. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event. RayonixMccdFilesEventHandler Bases: OmDataEventHandlerProtocol See documentation of the __init__ function. __init__ ( * , source , data_sources , monitor_parameters ) Data Event Handler for Rayonix MX340-HS single-frame files. This class handles data events originating from single-frame mccd files written by a Rayonix MX340-HS detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to the content of an individual single-frame mccd file. The source string required by this Data Event Handler is the path to a file containing a list of mccd files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_event_handling_on_collecting_node ( * , node_rank , node_pool_size ) Initializes Rayonix MX340-HS file-based event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. There is usually no need to initialize Rayonix MX340-HS file-based data event handling on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_event_handling_on_processing_node ( * , node_rank , node_pool_size ) Initializes Rayonix MX340-HS file-based event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required event_generator ( * , node_rank , node_pool_size ) Retrieves Rayonix MX340-HS single-frame file events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to the content of an individual single-frame mccd file. The function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last last node processes fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required open_event ( * , event ) Opens a Rayonix MX340-HS single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. Since detector_data is the only event data which is retrieved from the mccd files, the Data Source that handles this type of data takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required close_event ( * , event ) Closes a Rayonix MX340-HS single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. Since detector_data is the only event data which is retrieved from the mccd files, the Data Source that handles this type of data takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required extract_data ( * , event ) Extracts data from a Rayonix MX340-HS single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event. initialize_event_data_retrieval () Initializes event data retrievals from Rayonix MX340-HS single-frame files. This function initializes the retrieval of single standalone data events from Rayonix MX340-HS single-frame files. Please see the documentation of the base Protocol class for additional information about this method. retrieve_event_data ( event_id ) Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. A Rayonix MX340-HS event identifier is the full absolute or relative path to the mccd file associated with the event. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested detector event. Lambda1M5FilesDataEventHandler Bases: OmDataEventHandlerProtocol See documentation of the __init__ function. __init__ ( * , source , data_sources , monitor_parameters ) Data Event Handler for Lambda 1.5M files. This Data Event Handler deals with events originating from files written by a Lambda 1.5M detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to all the information associated with an individual frame stored in two separate HDF5 files written by two detector modules. The source string required by this Data Event Handler is the path to a file containing a list of HDF5 files written by the first detector module (\" _m01 .nxs\"), one per line, with their absolute or relative path. Each file can store more than one detector data frame, and each frame in the file is processed as a separate event. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_event_handling_on_collecting_node ( * , node_rank , node_pool_size ) Initializes Lambda 1.5M file event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. There is usually no need to initialize Lambda 1.5M file-based event handling on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_event_handling_on_processing_node ( * , node_rank , node_pool_size ) Initializes Lambda 1.5M file event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required event_generator ( * , node_rank , node_pool_size ) Retrieves Lambda 1.5M file events. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single detector frame with all its associated data. The function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last last node processes fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required open_event ( * , event ) Opens a Lambda 1.5M file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required close_event ( * , event ) Closes a Lambda 1.5M file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required extract_data ( * , event ) Extracts data from a Lambda 1.5M file event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event. initialize_event_data_retrieval () Initializes event data retrievals from Lambda 1.5M HDF5 files. This function initializes the retrieval of single standalone events from Lambda 1.5M HDF5 files. Please see the documentation of the base Protocol class for additional information about this method. retrieve_event_data ( event_id ) Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. A Lambda 1.5M unique event identifier is a string consisting of two parts. The first part is the absolute or relative path to the HDF5 file storing the first panel of the detector data frame attached to the event (\"*_m01.nxs\"), while the second part is the index of the event within the file. The two parts are separated by the '//' symbol. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event.","title":"data_event_handlers_files"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files","text":"Handling of file-based data events. This module contains Data Event Handler classes that manipulate file-based events.","title":"data_event_handlers_files"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.PilatusFilesEventHandler","text":"Bases: OmDataEventHandlerProtocol See documentation of the __init__ function.","title":"PilatusFilesEventHandler"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.PilatusFilesEventHandler.__init__","text":"Data Event Handler for Pilatus single-frame files. This class handles data events originating from single-frame CBF files written by a Pilatus detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to the content of an individual single-frame CBF file. The source string required by this Data Event Handler is the path to a file containing a list of CBF files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.PilatusFilesEventHandler.initialize_event_handling_on_collecting_node","text":"Initializes Pilatus single-frame file event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. There is usually no need to initialize Pilatus file-based event handling on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_collecting_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.PilatusFilesEventHandler.initialize_event_handling_on_processing_node","text":"Initializes Pilatus single-frame file event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_processing_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.PilatusFilesEventHandler.event_generator","text":"Retrieves Pilatus single-frame file events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to the content of an individual single-frame CBF file. The function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last last node will process fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"event_generator()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.PilatusFilesEventHandler.open_event","text":"Opens a Pilatus single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. This function opens the CBF file associated with the data event and stores its content in the provided event dictionary, as the value corresponding to the data key. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"open_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.PilatusFilesEventHandler.close_event","text":"Closes a Pilatus single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. CBF files don't need to be closed, so this function does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"close_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.PilatusFilesEventHandler.extract_data","text":"Extracts data from a Pilatus single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event.","title":"extract_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.PilatusFilesEventHandler.initialize_event_data_retrieval","text":"Initializes data data retrieval from Pilatus single-frame files. This function initializes the retrieval of single standalone data events from Pilatus single-frame data files. Please see the documentation of the base Protocol class for additional information about this method.","title":"initialize_event_data_retrieval()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.PilatusFilesEventHandler.retrieve_event_data","text":"Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. A Pilatus single-frame file event identifier corresponds to the relative or absolute path to a file containing the event data. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event.","title":"retrieve_event_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Jungfrau1MFilesDataEventHandler","text":"Bases: OmDataEventHandlerProtocol See documentation of the __init__ function.","title":"Jungfrau1MFilesDataEventHandler"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Jungfrau1MFilesDataEventHandler.__init__","text":"Data Event Handler for Jungfrau 1M files. This class handles data events retrieved from files written by a Jungfrau 1M detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to all the information associated with an individual frame stored in an HDF5 file. The source string required by this Data Event Handler is the path to a file containing a list of master HDF5 files to process, one per line, with their absolute or relative path. Each file can store more than one detector data frame, and each frame in the file is processed as a separate event. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Jungfrau1MFilesDataEventHandler.initialize_event_handling_on_collecting_node","text":"Initializes Jungfrau 1M file event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. There is usually no need to initialize Jungfrau 1M file-based event handling on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_collecting_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Jungfrau1MFilesDataEventHandler.initialize_event_handling_on_processing_node","text":"Initializes Jungfrau 1M file event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_processing_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Jungfrau1MFilesDataEventHandler.event_generator","text":"Retrieves Jungfrau 1M file events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single single detector data frame with all its associated data. The function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last last node processes fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"event_generator()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Jungfrau1MFilesDataEventHandler.open_event","text":"Opens a Jungfrau 1M file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"open_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Jungfrau1MFilesDataEventHandler.close_event","text":"Closes a Jungfrau 1M file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"close_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Jungfrau1MFilesDataEventHandler.extract_data","text":"Extracts data from a Jungfrau 1M file event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event.","title":"extract_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Jungfrau1MFilesDataEventHandler.initialize_event_data_retrieval","text":"Initializes event data retrieval from Jungfrau 1M HDF5 files. This function initializes the retrieval of single standalone data events from Jungfrau 1M HDF5 files. Please see the documentation of the base Protocol class for additional information about this method.","title":"initialize_event_data_retrieval()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Jungfrau1MFilesDataEventHandler.retrieve_event_data","text":"Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. A Jungfrau 1M unique event identifier is a string consisting of the absolute or relative path to the master HDF5 file attached to the event, and the index of the event within the file, separated by the '//' symbol. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event.","title":"retrieve_event_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.EigerFilesDataEventHandler","text":"Bases: OmDataEventHandlerProtocol See documentation of the __init__ function.","title":"EigerFilesDataEventHandler"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.EigerFilesDataEventHandler.__init__","text":"Data Event Handler for Eiger files. This Data Event Handler deals with events originating from files written by an Eiger detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to all the information associated with an individual frame stored in an HDF5 file. The source string required by this Data Event Handler is the path to a file containing a list of HDF5 files to process, one per line, with their absolute or relative path. Each file can store more than one detector data frame, and each frame in the file is processed as a separate event. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.EigerFilesDataEventHandler.initialize_event_handling_on_collecting_node","text":"Initializes Eiger file event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. There is usually no need to initialize Eiger's file-based data handling on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_collecting_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.EigerFilesDataEventHandler.initialize_event_handling_on_processing_node","text":"Initializes Eiger file event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_processing_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.EigerFilesDataEventHandler.event_generator","text":"Retrieves Eiger file events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single detector data frame with all its associated data. The function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last node processes fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"event_generator()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.EigerFilesDataEventHandler.open_event","text":"Opens a Eiger file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"open_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.EigerFilesDataEventHandler.close_event","text":"Closes a Eiger file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"close_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.EigerFilesDataEventHandler.extract_data","text":"Extracts data from an Eiger file event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event.","title":"extract_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.EigerFilesDataEventHandler.initialize_event_data_retrieval","text":"Initializes event data retrieval from Eiger files. This function initializes the retrieval of single standalone data events from Eiger files. Please see the documentation of the base Protocol class for additional information about this method.","title":"initialize_event_data_retrieval()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.EigerFilesDataEventHandler.retrieve_event_data","text":"Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. An Eiger event identifier is a string consisting of the absolute or relative path to the HDF5 data file attached to the event, and the index of the event within the file, separated by '//' symbol. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event.","title":"retrieve_event_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.RayonixMccdFilesEventHandler","text":"Bases: OmDataEventHandlerProtocol See documentation of the __init__ function.","title":"RayonixMccdFilesEventHandler"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.RayonixMccdFilesEventHandler.__init__","text":"Data Event Handler for Rayonix MX340-HS single-frame files. This class handles data events originating from single-frame mccd files written by a Rayonix MX340-HS detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to the content of an individual single-frame mccd file. The source string required by this Data Event Handler is the path to a file containing a list of mccd files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.RayonixMccdFilesEventHandler.initialize_event_handling_on_collecting_node","text":"Initializes Rayonix MX340-HS file-based event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. There is usually no need to initialize Rayonix MX340-HS file-based data event handling on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_collecting_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.RayonixMccdFilesEventHandler.initialize_event_handling_on_processing_node","text":"Initializes Rayonix MX340-HS file-based event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_processing_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.RayonixMccdFilesEventHandler.event_generator","text":"Retrieves Rayonix MX340-HS single-frame file events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to the content of an individual single-frame mccd file. The function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last last node processes fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"event_generator()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.RayonixMccdFilesEventHandler.open_event","text":"Opens a Rayonix MX340-HS single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. Since detector_data is the only event data which is retrieved from the mccd files, the Data Source that handles this type of data takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"open_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.RayonixMccdFilesEventHandler.close_event","text":"Closes a Rayonix MX340-HS single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. Since detector_data is the only event data which is retrieved from the mccd files, the Data Source that handles this type of data takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"close_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.RayonixMccdFilesEventHandler.extract_data","text":"Extracts data from a Rayonix MX340-HS single-frame file event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event.","title":"extract_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.RayonixMccdFilesEventHandler.initialize_event_data_retrieval","text":"Initializes event data retrievals from Rayonix MX340-HS single-frame files. This function initializes the retrieval of single standalone data events from Rayonix MX340-HS single-frame files. Please see the documentation of the base Protocol class for additional information about this method.","title":"initialize_event_data_retrieval()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.RayonixMccdFilesEventHandler.retrieve_event_data","text":"Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. A Rayonix MX340-HS event identifier is the full absolute or relative path to the mccd file associated with the event. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested detector event.","title":"retrieve_event_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Lambda1M5FilesDataEventHandler","text":"Bases: OmDataEventHandlerProtocol See documentation of the __init__ function.","title":"Lambda1M5FilesDataEventHandler"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Lambda1M5FilesDataEventHandler.__init__","text":"Data Event Handler for Lambda 1.5M files. This Data Event Handler deals with events originating from files written by a Lambda 1.5M detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to all the information associated with an individual frame stored in two separate HDF5 files written by two detector modules. The source string required by this Data Event Handler is the path to a file containing a list of HDF5 files written by the first detector module (\" _m01 .nxs\"), one per line, with their absolute or relative path. Each file can store more than one detector data frame, and each frame in the file is processed as a separate event. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Lambda1M5FilesDataEventHandler.initialize_event_handling_on_collecting_node","text":"Initializes Lambda 1.5M file event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. There is usually no need to initialize Lambda 1.5M file-based event handling on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_collecting_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Lambda1M5FilesDataEventHandler.initialize_event_handling_on_processing_node","text":"Initializes Lambda 1.5M file event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_processing_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Lambda1M5FilesDataEventHandler.event_generator","text":"Retrieves Lambda 1.5M file events. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single detector frame with all its associated data. The function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last last node processes fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"event_generator()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Lambda1M5FilesDataEventHandler.open_event","text":"Opens a Lambda 1.5M file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"open_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Lambda1M5FilesDataEventHandler.close_event","text":"Closes a Lambda 1.5M file event. Please see the documentation of the base Protocol class for additional information about this method. Since each detector frame in each HDF5 file is considered a separate event, the event_generator method, which distributes the frames across the processing nodes, takes care of opening and closing the files. This function therefore does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"close_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Lambda1M5FilesDataEventHandler.extract_data","text":"Extracts data from a Lambda 1.5M file event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event.","title":"extract_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Lambda1M5FilesDataEventHandler.initialize_event_data_retrieval","text":"Initializes event data retrievals from Lambda 1.5M HDF5 files. This function initializes the retrieval of single standalone events from Lambda 1.5M HDF5 files. Please see the documentation of the base Protocol class for additional information about this method.","title":"initialize_event_data_retrieval()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_files/#om.data_retrieval_layer.data_event_handlers_files.Lambda1M5FilesDataEventHandler.retrieve_event_data","text":"Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. A Lambda 1.5M unique event identifier is a string consisting of two parts. The first part is the absolute or relative path to the HDF5 file storing the first panel of the detector data frame attached to the event (\"*_m01.nxs\"), while the second part is the index of the event within the file. The two parts are separated by the '//' symbol. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event.","title":"retrieve_event_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/","text":"data_event_handlers_http Handling of HTTP/REST-based data events. This module contains Data Event Handler classes that manipulate events originating from the HTTP/REST interface of detectors manufactured by company Dectris. EigerHttpDataEventHandler Bases: OmDataEventHandlerProtocol See documentation of the __init__ function. __init__ ( * , source , data_sources , monitor_parameters ) Data Event Handler for Eiger's HTTP/REST events. This class handles data events recovered from the HTTP/REST interface of an Eiger detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to the content of an individual event retrieved from the HTTP/REST interface (usually a single detector data frame) The source string for this Data Event Handler is the base URL of the 'monitor' subsystem of the Eiger detector HTTP/REST interface. The string has the following format: http://<address_of_dcu>/monitor/api/<version> . Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_event_handling_on_collecting_node ( * , node_rank , node_pool_size ) Initializes Eiger's HTTP/REST event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Raises: Type Description OmHttpInterfaceInitializationError Raised when an error happens during the initialization of the Eiger'S HTTP/REST interface. initialize_event_handling_on_processing_node ( * , node_rank , node_pool_size ) Initializes Eiger's HTTP/REST event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Any An optional initialization token. event_generator ( * , node_rank , node_pool_size ) Retrieves events from Eiger's HTTP/REST interface. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single event from Eiger's HTTP/REST interface (a single detector data frame). Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required open_event ( * , event ) Opens an Eiger's HTTP/REST interface event. Please see the documentation of the base Protocol class for additional information about this method. Events from Eiger's HTTP/REST interface do not need to be opened, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required close_event ( * , event ) Closes an Eiger's HTTP/REST interface event. Please see the documentation of the base Protocol class for additional information about this method. Events from Eiger's HTTP/REST interface do not need to be closed, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required extract_data ( * , event ) Extracts data from an Eiger HTTP/REST event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event. initialize_event_data_retrieval () Initializes event data retrievals from from Eiger's HTTP/REST interface. Eiger's HTTP/REST interface does not allow the retrieval of single standalone data events, so this function has no implementation. Please see the documentation of the base Protocol class for additional information about this method. Raises: Type Description NotImplementedError This functionality has not been implemented for this Data Event Handler. retrieve_event_data ( event_id ) Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. Eiger's HTTP/REST interface does not allow the retrieval of standalone data events, so this function has no implementation. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested detector event. Raises: Type Description NotImplementedError This functionality has not been implemented for this Data Event Handler.","title":"data_event_handlers_http"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/#om.data_retrieval_layer.data_event_handlers_http","text":"Handling of HTTP/REST-based data events. This module contains Data Event Handler classes that manipulate events originating from the HTTP/REST interface of detectors manufactured by company Dectris.","title":"data_event_handlers_http"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/#om.data_retrieval_layer.data_event_handlers_http.EigerHttpDataEventHandler","text":"Bases: OmDataEventHandlerProtocol See documentation of the __init__ function.","title":"EigerHttpDataEventHandler"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/#om.data_retrieval_layer.data_event_handlers_http.EigerHttpDataEventHandler.__init__","text":"Data Event Handler for Eiger's HTTP/REST events. This class handles data events recovered from the HTTP/REST interface of an Eiger detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to the content of an individual event retrieved from the HTTP/REST interface (usually a single detector data frame) The source string for this Data Event Handler is the base URL of the 'monitor' subsystem of the Eiger detector HTTP/REST interface. The string has the following format: http://<address_of_dcu>/monitor/api/<version> . Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/#om.data_retrieval_layer.data_event_handlers_http.EigerHttpDataEventHandler.initialize_event_handling_on_collecting_node","text":"Initializes Eiger's HTTP/REST event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Raises: Type Description OmHttpInterfaceInitializationError Raised when an error happens during the initialization of the Eiger'S HTTP/REST interface.","title":"initialize_event_handling_on_collecting_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/#om.data_retrieval_layer.data_event_handlers_http.EigerHttpDataEventHandler.initialize_event_handling_on_processing_node","text":"Initializes Eiger's HTTP/REST event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Any An optional initialization token.","title":"initialize_event_handling_on_processing_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/#om.data_retrieval_layer.data_event_handlers_http.EigerHttpDataEventHandler.event_generator","text":"Retrieves events from Eiger's HTTP/REST interface. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single event from Eiger's HTTP/REST interface (a single detector data frame). Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"event_generator()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/#om.data_retrieval_layer.data_event_handlers_http.EigerHttpDataEventHandler.open_event","text":"Opens an Eiger's HTTP/REST interface event. Please see the documentation of the base Protocol class for additional information about this method. Events from Eiger's HTTP/REST interface do not need to be opened, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"open_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/#om.data_retrieval_layer.data_event_handlers_http.EigerHttpDataEventHandler.close_event","text":"Closes an Eiger's HTTP/REST interface event. Please see the documentation of the base Protocol class for additional information about this method. Events from Eiger's HTTP/REST interface do not need to be closed, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"close_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/#om.data_retrieval_layer.data_event_handlers_http.EigerHttpDataEventHandler.extract_data","text":"Extracts data from an Eiger HTTP/REST event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event.","title":"extract_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/#om.data_retrieval_layer.data_event_handlers_http.EigerHttpDataEventHandler.initialize_event_data_retrieval","text":"Initializes event data retrievals from from Eiger's HTTP/REST interface. Eiger's HTTP/REST interface does not allow the retrieval of single standalone data events, so this function has no implementation. Please see the documentation of the base Protocol class for additional information about this method. Raises: Type Description NotImplementedError This functionality has not been implemented for this Data Event Handler.","title":"initialize_event_data_retrieval()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_http/#om.data_retrieval_layer.data_event_handlers_http.EigerHttpDataEventHandler.retrieve_event_data","text":"Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. Eiger's HTTP/REST interface does not allow the retrieval of standalone data events, so this function has no implementation. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested detector event. Raises: Type Description NotImplementedError This functionality has not been implemented for this Data Event Handler.","title":"retrieve_event_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/","text":"data_event_handlers_psana Handling of psana-based data events. This module contains Data Event Handler classes that manipulate events originating from the psana software framework (used at the LCLS facility). PsanaDataEventHandler Bases: OmDataEventHandlerProtocol See documentation of the __init__ function. __init__ ( * , source , data_sources , monitor_parameters ) Data Event Handler for psana events. This class handles data events retrieved from the psana software framework at the LCLS facility. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to the content of an individual psana event. The source string required by this Data Event Handler is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_event_handling_on_collecting_node ( * , node_rank , node_pool_size ) Initializes psana event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Psana event handling does not need to be initialized on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_event_handling_on_processing_node ( node_rank , node_pool_size ) Initializes psana event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Psana event handling does not need to be initialized on the processing nodes, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required event_generator ( * , node_rank , node_pool_size ) Retrieves psana events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single psana event. When OM retrieves real-time data at the LCLS facility, each processing node receives data from a shared memory server operated by the facility, running on the same machine as the node. The server takes care of distributing the data events. When instead OM uses the psana framework to read offline data, this function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last last node processes fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required open_event ( * , event ) Opens a psana event. Please see the documentation of the base Protocol class for additional information about this method. Psana events do not need to be opened, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required close_event ( * , event ) Closes a psana event. Please see the documentation of the base Protocol class for additional information about this method. Psana events do not need to be closed, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required extract_data ( * , event ) Extracts data from a psana data event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event. initialize_event_data_retrieval () Initializes event data retrievals from psana. This function initializes the retrieval of single standalone data events from psana. Please see the documentation of the base Protocol class for additional information about this method. retrieve_event_data ( event_id ) Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. The psana unique event identifier is a string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} . Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event. Raises: Type Description OmMissingDataEventError Raised when an event cannot be retrieved from the data source.","title":"data_event_handlers_psana"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/#om.data_retrieval_layer.data_event_handlers_psana","text":"Handling of psana-based data events. This module contains Data Event Handler classes that manipulate events originating from the psana software framework (used at the LCLS facility).","title":"data_event_handlers_psana"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/#om.data_retrieval_layer.data_event_handlers_psana.PsanaDataEventHandler","text":"Bases: OmDataEventHandlerProtocol See documentation of the __init__ function.","title":"PsanaDataEventHandler"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/#om.data_retrieval_layer.data_event_handlers_psana.PsanaDataEventHandler.__init__","text":"Data Event Handler for psana events. This class handles data events retrieved from the psana software framework at the LCLS facility. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, a data event corresponds to the content of an individual psana event. The source string required by this Data Event Handler is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/#om.data_retrieval_layer.data_event_handlers_psana.PsanaDataEventHandler.initialize_event_handling_on_collecting_node","text":"Initializes psana event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Psana event handling does not need to be initialized on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_collecting_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/#om.data_retrieval_layer.data_event_handlers_psana.PsanaDataEventHandler.initialize_event_handling_on_processing_node","text":"Initializes psana event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Psana event handling does not need to be initialized on the processing nodes, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_processing_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/#om.data_retrieval_layer.data_event_handlers_psana.PsanaDataEventHandler.event_generator","text":"Retrieves psana events. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to a single psana event. When OM retrieves real-time data at the LCLS facility, each processing node receives data from a shared memory server operated by the facility, running on the same machine as the node. The server takes care of distributing the data events. When instead OM uses the psana framework to read offline data, this function tries to distribute the events as evenly as possible across all the processing nodes, with each node ideally processing the same number of events. If the total number of events cannot be split evenly, the last last node processes fewer events than the others. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"event_generator()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/#om.data_retrieval_layer.data_event_handlers_psana.PsanaDataEventHandler.open_event","text":"Opens a psana event. Please see the documentation of the base Protocol class for additional information about this method. Psana events do not need to be opened, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"open_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/#om.data_retrieval_layer.data_event_handlers_psana.PsanaDataEventHandler.close_event","text":"Closes a psana event. Please see the documentation of the base Protocol class for additional information about this method. Psana events do not need to be closed, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"close_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/#om.data_retrieval_layer.data_event_handlers_psana.PsanaDataEventHandler.extract_data","text":"Extracts data from a psana data event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event.","title":"extract_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/#om.data_retrieval_layer.data_event_handlers_psana.PsanaDataEventHandler.initialize_event_data_retrieval","text":"Initializes event data retrievals from psana. This function initializes the retrieval of single standalone data events from psana. Please see the documentation of the base Protocol class for additional information about this method.","title":"initialize_event_data_retrieval()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_psana/#om.data_retrieval_layer.data_event_handlers_psana.PsanaDataEventHandler.retrieve_event_data","text":"Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves all data related to the event specified by the provided identifier. The psana unique event identifier is a string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} . Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested event. Raises: Type Description OmMissingDataEventError Raised when an event cannot be retrieved from the data source.","title":"retrieve_event_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/","text":"data_event_handlers_zmq Handling of data events from a ZMQ stream. This module contains Data Event Handler classes that deal with events retrieved from a a ZMQ stream. Jungfrau1MZmqDataEventHandler Bases: OmDataEventHandlerProtocol See documentation of the __init__ function. __init__ ( * , source , data_sources , monitor_parameters ) Data Event Handler for Jungfrau 1M's ZMQ stream. This class handles data events recovered from a ZMQ stream generated by a Jungfrau 1M detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, an event corresponds to all the information associated with the content of a single ZMQ message (a single detector data frame). The source string required by this Data Event Handler is the URL (in ZeroMQ format) where the Jungfrau 1M detector broadcasts data. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_event_handling_on_collecting_node ( * , node_rank , node_pool_size ) Initializes Jungfrau 1M ZMQ event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Jungfrau 1M's ZMQ event handling does not need to be initialized on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_event_handling_on_processing_node ( * , node_rank , node_pool_size ) Initializes Jungfrau 1M ZMQ event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required event_generator ( * , node_rank , node_pool_size ) Retrieves Jungfrau 1M events from a ZMQ stream. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to the content of an individual ZMQ message, which stores a single detector frame with all its associated data. The events are retrieved from a ZMQ data stream, and the server broadcasting the stream takes care of distributing the events across all processing nodes. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required open_event ( * , event ) Opens a Jungfrau 1M ZMQ event. Please see the documentation of the base Protocol class for additional information about this method. Jungfrau 1M data events retrieved from a ZMQ stream do not need to be opened, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required close_event ( * , event ) Closes a Jungfrau 1M ZMQ event. Please see the documentation of the base Protocol class for additional information about this method. Jungfrau 1M data events retrieved from a ZMQ stream do not need to be closed, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required extract_data ( * , event ) Extracts data from a Jungfrau 1M ZMQ event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event. initialize_event_data_retrieval () Initializes event data retrievals from psana. Please see the documentation of the base Protocol class for additional information about this method. Jungfrau 1M's ZMQ data stream does not allow the retrieval of single standalone data events, so this function has no implementation. Raises: Type Description NotImplementedError This functionality has not been implemented for this Data Event Handler. retrieve_event_data ( event_id ) Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. Jungfrau 1M's ZMQ data stream does not allow the retrieval of single standalone data events, so this function has no implementation. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested detector data frame. Raises: Type Description NotImplementedError This functionality has not been implemented for this Data Event Handler.","title":"data_event_handlers_zmq"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/#om.data_retrieval_layer.data_event_handlers_zmq","text":"Handling of data events from a ZMQ stream. This module contains Data Event Handler classes that deal with events retrieved from a a ZMQ stream.","title":"data_event_handlers_zmq"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/#om.data_retrieval_layer.data_event_handlers_zmq.Jungfrau1MZmqDataEventHandler","text":"Bases: OmDataEventHandlerProtocol See documentation of the __init__ function.","title":"Jungfrau1MZmqDataEventHandler"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/#om.data_retrieval_layer.data_event_handlers_zmq.Jungfrau1MZmqDataEventHandler.__init__","text":"Data Event Handler for Jungfrau 1M's ZMQ stream. This class handles data events recovered from a ZMQ stream generated by a Jungfrau 1M detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. For this Event Handler, an event corresponds to all the information associated with the content of a single ZMQ message (a single detector data frame). The source string required by this Data Event Handler is the URL (in ZeroMQ format) where the Jungfrau 1M detector broadcasts data. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/#om.data_retrieval_layer.data_event_handlers_zmq.Jungfrau1MZmqDataEventHandler.initialize_event_handling_on_collecting_node","text":"Initializes Jungfrau 1M ZMQ event handling on the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Jungfrau 1M's ZMQ event handling does not need to be initialized on the collecting node, so this function actually does nothing. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_collecting_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/#om.data_retrieval_layer.data_event_handlers_zmq.Jungfrau1MZmqDataEventHandler.initialize_event_handling_on_processing_node","text":"Initializes Jungfrau 1M ZMQ event handling on the processing nodes. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_processing_node()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/#om.data_retrieval_layer.data_event_handlers_zmq.Jungfrau1MZmqDataEventHandler.event_generator","text":"Retrieves Jungfrau 1M events from a ZMQ stream. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves data events on the processing nodes. Each retrieved event corresponds to the content of an individual ZMQ message, which stores a single detector frame with all its associated data. The events are retrieved from a ZMQ data stream, and the server broadcasting the stream takes care of distributing the events across all processing nodes. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"event_generator()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/#om.data_retrieval_layer.data_event_handlers_zmq.Jungfrau1MZmqDataEventHandler.open_event","text":"Opens a Jungfrau 1M ZMQ event. Please see the documentation of the base Protocol class for additional information about this method. Jungfrau 1M data events retrieved from a ZMQ stream do not need to be opened, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"open_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/#om.data_retrieval_layer.data_event_handlers_zmq.Jungfrau1MZmqDataEventHandler.close_event","text":"Closes a Jungfrau 1M ZMQ event. Please see the documentation of the base Protocol class for additional information about this method. Jungfrau 1M data events retrieved from a ZMQ stream do not need to be closed, so this function actually does nothing. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"close_event()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/#om.data_retrieval_layer.data_event_handlers_zmq.Jungfrau1MZmqDataEventHandler.extract_data","text":"Extracts data from a Jungfrau 1M ZMQ event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data extracted from the Data Source for the event being processed. Raises: Type Description OmDataExtractionError Raised when data cannot be extracted from the event.","title":"extract_data()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/#om.data_retrieval_layer.data_event_handlers_zmq.Jungfrau1MZmqDataEventHandler.initialize_event_data_retrieval","text":"Initializes event data retrievals from psana. Please see the documentation of the base Protocol class for additional information about this method. Jungfrau 1M's ZMQ data stream does not allow the retrieval of single standalone data events, so this function has no implementation. Raises: Type Description NotImplementedError This functionality has not been implemented for this Data Event Handler.","title":"initialize_event_data_retrieval()"},{"location":"reference/om/data_retrieval_layer/data_event_handlers_zmq/#om.data_retrieval_layer.data_event_handlers_zmq.Jungfrau1MZmqDataEventHandler.retrieve_event_data","text":"Retrieves all data related to the requested event. Please see the documentation of the base Protocol class for additional information about this method. Jungfrau 1M's ZMQ data stream does not allow the retrieval of single standalone data events, so this function has no implementation. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested detector data frame. Raises: Type Description NotImplementedError This functionality has not been implemented for this Data Event Handler.","title":"retrieve_event_data()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_asapo/","text":"data_retrieval_asapo Data retrieval from ASAP::O. This module contains Data Retrieval classes that deal with the ASAP::O software framework (used at the PETRA III facility). EigerAsapoDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data retrieval for Eiger 16M from ASAP::O at the PETRA III facility. This class implements OM's Data Retrieval Layer for an Eiger 16M detector using the ASAP::O software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of an ASAP::O event, which stores data related to a single detector frame. The ASAP::O stream name and the ID of the ASAP::O event within the stream, combined into a single string, are used as event identifier. ASAP::O provides timestamp, beam energy and detector distance information for each event. The source string required by this Data Retrieval class is either the ID of the beamtime for which OM is being used (for online data retrieval) or the ID of the beamtime and the name of the ASAP::O stream separated by a colon (for offline data retrieval). Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"data_retrieval_asapo"},{"location":"reference/om/data_retrieval_layer/data_retrieval_asapo/#om.data_retrieval_layer.data_retrieval_asapo","text":"Data retrieval from ASAP::O. This module contains Data Retrieval classes that deal with the ASAP::O software framework (used at the PETRA III facility).","title":"data_retrieval_asapo"},{"location":"reference/om/data_retrieval_layer/data_retrieval_asapo/#om.data_retrieval_layer.data_retrieval_asapo.EigerAsapoDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"EigerAsapoDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_asapo/#om.data_retrieval_layer.data_retrieval_asapo.EigerAsapoDataRetrieval.__init__","text":"Data retrieval for Eiger 16M from ASAP::O at the PETRA III facility. This class implements OM's Data Retrieval Layer for an Eiger 16M detector using the ASAP::O software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of an ASAP::O event, which stores data related to a single detector frame. The ASAP::O stream name and the ID of the ASAP::O event within the stream, combined into a single string, are used as event identifier. ASAP::O provides timestamp, beam energy and detector distance information for each event. The source string required by this Data Retrieval class is either the ID of the beamtime for which OM is being used (for online data retrieval) or the ID of the beamtime and the name of the ASAP::O stream separated by a colon (for offline data retrieval). Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_asapo/#om.data_retrieval_layer.data_retrieval_asapo.EigerAsapoDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/","text":"data_retrieval_files Data retrieval from files. This module contains Data Retrieval classes that deal with files. PilatusFilesDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data retrieval for Pilatus' single-frame CBF files. This class implements OM's Data Retrieval Layer for a set of single-frame files written by a Pilatus detector in CBF format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as corresponding to the content of a single Pilatus CBF file. The full path to the CBF file is used as event identifier. Since Pilatus files do not contain any timestamp information, the modification time of the each file is taken as a first approximation of the timestamp of the data it contains. Since Pilatus files do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the path to a file containing a list of CBF files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class. Jungfrau1MFilesDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data Retrieval for Jungfrau 1M's HDF5 files. This class implements OM's Data Retrieval Layer for a set of files written by a Jungfrau 1M detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to a single detector frame stored in an HDF5 file, with all its attached information. The full path to the file containing the frame and the index of the frame in the file, combined into a single string and separated by the '//' symbol, are used as event identifier. Jungfrau 1M files do not contain any absolute timestamp information, but they store the readout of the internal detector clock for every frame. As a first approximation, the modification time of each file is taken as the timestamp of the first frame it contains, and the timestamp of all other frames is computed according to the internal clock difference. Since Jungfrau 1M files do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the path to a file containing a list of master HDF5 files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class. EigerFilesDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data Retrieval for Eiger's HDF5 files. This class implements OM's Data Retrieval Layer for a set of files written by an Eiger detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as corresponding to a single detector frame stored in an HDF5 file. The full path to the file containing the frame and the index of the frame in the file, combined into a single string and separated by the '//' symbol, are used as event identifier. Since Eiger's files do not contain any absolute timestamp information, the modification time of a file is taken as a first approximation of the timestamp of the data it contains. Since Eiger's files do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the path to a file containing a list of HDF5 files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class. RayonixMccdFilesDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data Retrieval for Rayonix MX340-HS's single-frame mccd files. This class implements OM's Data Retrieval Layer for a set of single-frame files written by a Rayonix detector in mccd format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as corresponding to the content of a single Rayonix mccd file. The full path to the mccd file is used as event identifier. Since Rayonix mccd files do not contain any timestamp information, the modification time of each file is taken as a first approximation of the timestamp of the data it contains. Since Rayonix mccd files do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the path to a file containing a list of mccd files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class. Lambda1M5FilesDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data Retrieval for Lambda 1.5M's HDF5 files. This class implements OM's Data Retrieval Layer for a set of files written by a Lambda 1.5M detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to an single detector frame, stored in two separate HDF5 files written by two detector modules, together with its attached information. The full path to the file written by the first detector module (\"*_m01.nxs\"), and the index of the frame in the file, combined into a single string and separated by '//' symbol, are used as event identifier. Since Lambda 1.5M files do not contain any timestamp information, the modification time of each file is taken as a first approximation of the timestamp of the data it contains. Since Lambda 1.5M files do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the path to a file containing a list of HDF5 files written by the first detector module (\" _m01 .nxs\"), one per line, with their absolute or relative path. Each file can store more than one detector data frame, and each frame in the file is processed as a separate event. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"data_retrieval_files"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files","text":"Data retrieval from files. This module contains Data Retrieval classes that deal with files.","title":"data_retrieval_files"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.PilatusFilesDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"PilatusFilesDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.PilatusFilesDataRetrieval.__init__","text":"Data retrieval for Pilatus' single-frame CBF files. This class implements OM's Data Retrieval Layer for a set of single-frame files written by a Pilatus detector in CBF format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as corresponding to the content of a single Pilatus CBF file. The full path to the CBF file is used as event identifier. Since Pilatus files do not contain any timestamp information, the modification time of the each file is taken as a first approximation of the timestamp of the data it contains. Since Pilatus files do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the path to a file containing a list of CBF files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.PilatusFilesDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.Jungfrau1MFilesDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"Jungfrau1MFilesDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.Jungfrau1MFilesDataRetrieval.__init__","text":"Data Retrieval for Jungfrau 1M's HDF5 files. This class implements OM's Data Retrieval Layer for a set of files written by a Jungfrau 1M detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to a single detector frame stored in an HDF5 file, with all its attached information. The full path to the file containing the frame and the index of the frame in the file, combined into a single string and separated by the '//' symbol, are used as event identifier. Jungfrau 1M files do not contain any absolute timestamp information, but they store the readout of the internal detector clock for every frame. As a first approximation, the modification time of each file is taken as the timestamp of the first frame it contains, and the timestamp of all other frames is computed according to the internal clock difference. Since Jungfrau 1M files do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the path to a file containing a list of master HDF5 files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.Jungfrau1MFilesDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.EigerFilesDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"EigerFilesDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.EigerFilesDataRetrieval.__init__","text":"Data Retrieval for Eiger's HDF5 files. This class implements OM's Data Retrieval Layer for a set of files written by an Eiger detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as corresponding to a single detector frame stored in an HDF5 file. The full path to the file containing the frame and the index of the frame in the file, combined into a single string and separated by the '//' symbol, are used as event identifier. Since Eiger's files do not contain any absolute timestamp information, the modification time of a file is taken as a first approximation of the timestamp of the data it contains. Since Eiger's files do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the path to a file containing a list of HDF5 files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.EigerFilesDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.RayonixMccdFilesDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"RayonixMccdFilesDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.RayonixMccdFilesDataRetrieval.__init__","text":"Data Retrieval for Rayonix MX340-HS's single-frame mccd files. This class implements OM's Data Retrieval Layer for a set of single-frame files written by a Rayonix detector in mccd format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as corresponding to the content of a single Rayonix mccd file. The full path to the mccd file is used as event identifier. Since Rayonix mccd files do not contain any timestamp information, the modification time of each file is taken as a first approximation of the timestamp of the data it contains. Since Rayonix mccd files do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the path to a file containing a list of mccd files to process, one per line, with their absolute or relative path. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.RayonixMccdFilesDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.Lambda1M5FilesDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"Lambda1M5FilesDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.Lambda1M5FilesDataRetrieval.__init__","text":"Data Retrieval for Lambda 1.5M's HDF5 files. This class implements OM's Data Retrieval Layer for a set of files written by a Lambda 1.5M detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to an single detector frame, stored in two separate HDF5 files written by two detector modules, together with its attached information. The full path to the file written by the first detector module (\"*_m01.nxs\"), and the index of the frame in the file, combined into a single string and separated by '//' symbol, are used as event identifier. Since Lambda 1.5M files do not contain any timestamp information, the modification time of each file is taken as a first approximation of the timestamp of the data it contains. Since Lambda 1.5M files do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the path to a file containing a list of HDF5 files written by the first detector module (\" _m01 .nxs\"), one per line, with their absolute or relative path. Each file can store more than one detector data frame, and each frame in the file is processed as a separate event. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_files/#om.data_retrieval_layer.data_retrieval_files.Lambda1M5FilesDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_http/","text":"data_retrieval_http Retrieval and handling of data from the http/REST interface. This module contains Data Retrieval classes that deal with the HTTP/REST interface used by detectors manufactured by the company Dectris. EigerHttpDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data Retrieval from Eiger's HTTP/REST interface. This class implements OM's Data Retrieval Layer for the HTTPS/REST interface of an Eiger detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a tif file retrieved from the Eiger's HTTP/REST interface, which stores data related to a single detector frame. A string with the format: {SeriesID_FrameID} , where SeriesID and FrameID are two values generated for each event by the HTTP/REST interface, is used as event identifier. Since Eiger's HTTP/REST monitor interface does not provide any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string for this Data Retrieval class is the base URL of the 'monitor' subsystem of the Eiger's HTTP/REST interface: http://<address_of_dcu>/monitor/api/<version> . Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"data_retrieval_http"},{"location":"reference/om/data_retrieval_layer/data_retrieval_http/#om.data_retrieval_layer.data_retrieval_http","text":"Retrieval and handling of data from the http/REST interface. This module contains Data Retrieval classes that deal with the HTTP/REST interface used by detectors manufactured by the company Dectris.","title":"data_retrieval_http"},{"location":"reference/om/data_retrieval_layer/data_retrieval_http/#om.data_retrieval_layer.data_retrieval_http.EigerHttpDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"EigerHttpDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_http/#om.data_retrieval_layer.data_retrieval_http.EigerHttpDataRetrieval.__init__","text":"Data Retrieval from Eiger's HTTP/REST interface. This class implements OM's Data Retrieval Layer for the HTTPS/REST interface of an Eiger detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a tif file retrieved from the Eiger's HTTP/REST interface, which stores data related to a single detector frame. A string with the format: {SeriesID_FrameID} , where SeriesID and FrameID are two values generated for each event by the HTTP/REST interface, is used as event identifier. Since Eiger's HTTP/REST monitor interface does not provide any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string for this Data Retrieval class is the base URL of the 'monitor' subsystem of the Eiger's HTTP/REST interface: http://<address_of_dcu>/monitor/api/<version> . Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_http/#om.data_retrieval_layer.data_retrieval_http.EigerHttpDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/","text":"data_retrieval_psana Retrieval of data from psana. This module contains Data Retrieval classes that deal with the psana software framework (used at the LCLS facility). CxiLclsDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data Retrieval from psana at the CXI beamline of the LCLS facility. This class implements OM's Data Retrieval Layer for the CXI beamline of the LCLS facility, using the Jungfrau 4M x-ray detector. The Jungfrau 4M is currently the main detector used at the CXI beamline. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a psana event, which stores data related to a single detector frame. A string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} , is used as event identifier. Psana provides timestamp, beam energy and detector distance information for each event, retrieved from various sensors in the system. The source string required by this Data Retrieval class is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class. CxiLclsCspadDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data Retrieval from psana at the CXI beamline of the LCLS facility (CSPAD). This class implements OM's Data Retrieval Layer for the CXI beamline of the LCLS facility, using the CSPAD x-ray detector. This detector was used at the beamline until early 2020. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a psana event, which stores data related to a single detector frame. A string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} , is used as event identifier. Psana provides timestamp, beam energy and detector distance data for each event, retrieved from various sensors in the system. The source string required by this Data Retrieval class is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class. LclsEpix100DataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data Retrieval from psana at the CXI beamline of the LCLS facility (ePix100). This class implements OM's Data Retrieval Layer for the CXI beamline of the LCLS facility, using the ePix100 x-ray detector. This detector is often used to record beam energy spectrum information in X-ray Emission Spectroscopy experiments. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a psana event, which stores data related to a single detector frame. A string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} , is used as event identifier. Psana provides timestamp, beam energy and detector distance data for each event, retrieved from various sensors in the system. The source string required by this Data Retrieval class is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class. MfxLclsDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data Retrieval from psana at the MFX beamline of the LCLS facility. This class implements OM's Data Retrieval Layer for the MFX beamline of the LCLS facility, using the Epix10KA 2M x-ray detector. The Epix10KA is currently the main detector used at the MFX beamline. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a psana event, which stores data related to a single detector frame. A string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} , is used as event identifier. Psana provides timestamp, beam energy and detector distance data for each event, retrieved from various sensors in the system. The source string required by this Data Retrieval class is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class. MfxLclsRayonixDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data Retrieval from psana at MFX beamline of the LCLS facility (Rayonix). This class implements OM's Data Retrieval Layer for the MFX beamline of the LCLS facility, using the Rayonix x-ray detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a psana event, which stores data related to a single detector frame. A string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} , is used as event identifier. Psana provides timestamp, beam energy and detector distance data for each event, retrieved from various sensors in the system. The source string required by this Data Retrieval class is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"data_retrieval_psana"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana","text":"Retrieval of data from psana. This module contains Data Retrieval classes that deal with the psana software framework (used at the LCLS facility).","title":"data_retrieval_psana"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.CxiLclsDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"CxiLclsDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.CxiLclsDataRetrieval.__init__","text":"Data Retrieval from psana at the CXI beamline of the LCLS facility. This class implements OM's Data Retrieval Layer for the CXI beamline of the LCLS facility, using the Jungfrau 4M x-ray detector. The Jungfrau 4M is currently the main detector used at the CXI beamline. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a psana event, which stores data related to a single detector frame. A string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} , is used as event identifier. Psana provides timestamp, beam energy and detector distance information for each event, retrieved from various sensors in the system. The source string required by this Data Retrieval class is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.CxiLclsDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.CxiLclsCspadDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"CxiLclsCspadDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.CxiLclsCspadDataRetrieval.__init__","text":"Data Retrieval from psana at the CXI beamline of the LCLS facility (CSPAD). This class implements OM's Data Retrieval Layer for the CXI beamline of the LCLS facility, using the CSPAD x-ray detector. This detector was used at the beamline until early 2020. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a psana event, which stores data related to a single detector frame. A string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} , is used as event identifier. Psana provides timestamp, beam energy and detector distance data for each event, retrieved from various sensors in the system. The source string required by this Data Retrieval class is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.CxiLclsCspadDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.LclsEpix100DataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"LclsEpix100DataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.LclsEpix100DataRetrieval.__init__","text":"Data Retrieval from psana at the CXI beamline of the LCLS facility (ePix100). This class implements OM's Data Retrieval Layer for the CXI beamline of the LCLS facility, using the ePix100 x-ray detector. This detector is often used to record beam energy spectrum information in X-ray Emission Spectroscopy experiments. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a psana event, which stores data related to a single detector frame. A string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} , is used as event identifier. Psana provides timestamp, beam energy and detector distance data for each event, retrieved from various sensors in the system. The source string required by this Data Retrieval class is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.LclsEpix100DataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.MfxLclsDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"MfxLclsDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.MfxLclsDataRetrieval.__init__","text":"Data Retrieval from psana at the MFX beamline of the LCLS facility. This class implements OM's Data Retrieval Layer for the MFX beamline of the LCLS facility, using the Epix10KA 2M x-ray detector. The Epix10KA is currently the main detector used at the MFX beamline. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a psana event, which stores data related to a single detector frame. A string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} , is used as event identifier. Psana provides timestamp, beam energy and detector distance data for each event, retrieved from various sensors in the system. The source string required by this Data Retrieval class is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.MfxLclsDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.MfxLclsRayonixDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"MfxLclsRayonixDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.MfxLclsRayonixDataRetrieval.__init__","text":"Data Retrieval from psana at MFX beamline of the LCLS facility (Rayonix). This class implements OM's Data Retrieval Layer for the MFX beamline of the LCLS facility, using the Rayonix x-ray detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event as equivalent to the content of a psana event, which stores data related to a single detector frame. A string combining psana's timestamp and fiducial information, with the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducials} , is used as event identifier. Psana provides timestamp, beam energy and detector distance data for each event, retrieved from various sensors in the system. The source string required by this Data Retrieval class is a string of the type used by psana to identify specific runs, experiments, or live data streams. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_psana/#om.data_retrieval_layer.data_retrieval_psana.MfxLclsRayonixDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_zmq/","text":"data_retrieval_zmq Retrieval of data from a ZMQ stream. This module contains Data Retrieval classes that deal with ZMQ data streams. Jungfrau1MZmqDataRetrieval Bases: OmDataRetrievalProtocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Data Retrieval for Jungfrau 1M's ZMQ stream. This class implements OM's Data Retrieval Layer for a Jungfrau 1M detector broadcasting data via a ZMQ stream. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event corresponding to the content of a single ZMQ message sent by the Jungfrau 1M. Each message sent by the detector stores data related to a single detector data frame. The ZMQ stream provides detector data, timestamp and an event identifier for each event. Since Jungfrau 1M's ZMQ messages do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the URL where the Jungfrau 1M detector broadcasts data. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"data_retrieval_zmq"},{"location":"reference/om/data_retrieval_layer/data_retrieval_zmq/#om.data_retrieval_layer.data_retrieval_zmq","text":"Retrieval of data from a ZMQ stream. This module contains Data Retrieval classes that deal with ZMQ data streams.","title":"data_retrieval_zmq"},{"location":"reference/om/data_retrieval_layer/data_retrieval_zmq/#om.data_retrieval_layer.data_retrieval_zmq.Jungfrau1MZmqDataRetrieval","text":"Bases: OmDataRetrievalProtocol See documentation of the __init__ function.","title":"Jungfrau1MZmqDataRetrieval"},{"location":"reference/om/data_retrieval_layer/data_retrieval_zmq/#om.data_retrieval_layer.data_retrieval_zmq.Jungfrau1MZmqDataRetrieval.__init__","text":"Data Retrieval for Jungfrau 1M's ZMQ stream. This class implements OM's Data Retrieval Layer for a Jungfrau 1M detector broadcasting data via a ZMQ stream. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. This class considers an individual data event corresponding to the content of a single ZMQ message sent by the Jungfrau 1M. Each message sent by the detector stores data related to a single detector data frame. The ZMQ stream provides detector data, timestamp and an event identifier for each event. Since Jungfrau 1M's ZMQ messages do not contain any detector distance or beam energy information, their values are retrieved from OM's configuration parameters (specifically, the fallback_detector_distance_in_mm and fallback_beam_energy_in_eV entries in the data_retrieval_layer parameter group). The source string required by this Data Retrieval class is the URL where the Jungfrau 1M detector broadcasts data. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_retrieval_zmq/#om.data_retrieval_layer.data_retrieval_zmq.Jungfrau1MZmqDataRetrieval.get_data_event_handler","text":"Retrieves the Data Event Handler used by the Data Retrieval class. Please see the documentation of the base Protocol class for additional information about this method. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/","text":"data_sources_asapo ASAP::O-related data sources. This module contains Data Source classes that deal with data retrieved from the ASAP::O software framework (used at the PETRA III facility). EigerAsapo Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Eiger 16M detector data frames from ASAP::O at the PETRA III facility. This class deals with the retrieval of EIGER 16M detector data frames from the ASAPO software framework, as used at the PETRA III facility. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the ASAP::O Eiger 16M detector data frame source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from ASAP::O, so this function actually does nothing. get_data ( * , event ) Retrieves an Eiger 16M detector data frame from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from ASAP::O the detector data frame associated with the provided event, and returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame. TimestampAsapo Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Timestamp information from ASAP::O at the PETRA III facility. This class deals with the retrieval of timestamp information from the ASAP::O software framework. ASAP::O provides this information for each event. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the ASAP::O timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information from ASAP::O, so this function actually does nothing. get_data ( * , event ) Retrieves timestamp information from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from ASAP::O the timestamp information associated with the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp for the data event. EventIdAsapo Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Data event identifiers from ASAP::O at the PETRA III facility. This class deals with the retrieval of unique event identifiers for ASAP::O-based data events. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the ASAP::O event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is required to retrieve event identifiers for ASAP::O, so this function actually does nothing. get_data ( * , event ) Retrieves an event identifier from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves a unique event identifier for the provided event. Since an ASAP::O-based OM data event corresponds to the content of a single ASAP::O event, the function constructs the event identifier by joining the following elements in a single string, with the \"//\" symbol placed between them: The name of the ASAP::O stream. The ID of the ASAP::O event in the stream. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier. BeamEnergyAsapo Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Beam energy information from ASAP::O at the PETRA III facility. This class deals with the retrieval of beam energy information from ASAP::O. ASAP::O provides this information for each event. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the ASAP::O beam energy data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is required to retrieve beam energy information from ASAP::O, so this function actually does nothing. get_data ( * , event ) Retrieves beam energy information from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from ASAP::O the beam energy information associated with the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The beam energy. DetectorDistanceAsapo Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Detector distance information from ASAP::O at the PETRA III facility. This class deals with the retrieval of detector distance information from ASAP::O. ASAP::O provides this information for each event. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the ASAP::O detector distance data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is required to retrieve detector distance information from ASAP::O, so this function actually does nothing. get_data ( * , event ) Retrieves detector distance information from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from ASAP::O the detector distance information associated with the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The beam energy.","title":"data_sources_asapo"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo","text":"ASAP::O-related data sources. This module contains Data Source classes that deal with data retrieved from the ASAP::O software framework (used at the PETRA III facility).","title":"data_sources_asapo"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.EigerAsapo","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"EigerAsapo"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.EigerAsapo.__init__","text":"Eiger 16M detector data frames from ASAP::O at the PETRA III facility. This class deals with the retrieval of EIGER 16M detector data frames from the ASAPO software framework, as used at the PETRA III facility. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.EigerAsapo.initialize_data_source","text":"Initializes the ASAP::O Eiger 16M detector data frame source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from ASAP::O, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.EigerAsapo.get_data","text":"Retrieves an Eiger 16M detector data frame from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from ASAP::O the detector data frame associated with the provided event, and returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.TimestampAsapo","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"TimestampAsapo"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.TimestampAsapo.__init__","text":"Timestamp information from ASAP::O at the PETRA III facility. This class deals with the retrieval of timestamp information from the ASAP::O software framework. ASAP::O provides this information for each event. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.TimestampAsapo.initialize_data_source","text":"Initializes the ASAP::O timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information from ASAP::O, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.TimestampAsapo.get_data","text":"Retrieves timestamp information from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from ASAP::O the timestamp information associated with the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp for the data event.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.EventIdAsapo","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"EventIdAsapo"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.EventIdAsapo.__init__","text":"Data event identifiers from ASAP::O at the PETRA III facility. This class deals with the retrieval of unique event identifiers for ASAP::O-based data events. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.EventIdAsapo.initialize_data_source","text":"Initializes the ASAP::O event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is required to retrieve event identifiers for ASAP::O, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.EventIdAsapo.get_data","text":"Retrieves an event identifier from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves a unique event identifier for the provided event. Since an ASAP::O-based OM data event corresponds to the content of a single ASAP::O event, the function constructs the event identifier by joining the following elements in a single string, with the \"//\" symbol placed between them: The name of the ASAP::O stream. The ID of the ASAP::O event in the stream. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.BeamEnergyAsapo","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"BeamEnergyAsapo"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.BeamEnergyAsapo.__init__","text":"Beam energy information from ASAP::O at the PETRA III facility. This class deals with the retrieval of beam energy information from ASAP::O. ASAP::O provides this information for each event. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.BeamEnergyAsapo.initialize_data_source","text":"Initializes the ASAP::O beam energy data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is required to retrieve beam energy information from ASAP::O, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.BeamEnergyAsapo.get_data","text":"Retrieves beam energy information from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from ASAP::O the beam energy information associated with the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The beam energy.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.DetectorDistanceAsapo","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"DetectorDistanceAsapo"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.DetectorDistanceAsapo.__init__","text":"Detector distance information from ASAP::O at the PETRA III facility. This class deals with the retrieval of detector distance information from ASAP::O. ASAP::O provides this information for each event. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.DetectorDistanceAsapo.initialize_data_source","text":"Initializes the ASAP::O detector distance data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is required to retrieve detector distance information from ASAP::O, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_asapo/#om.data_retrieval_layer.data_sources_asapo.DetectorDistanceAsapo.get_data","text":"Retrieves detector distance information from ASAP::O. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from ASAP::O the detector distance information associated with the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The beam energy.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/","text":"data_sources_files File-based data sources. This module contains Data Source classes that deal with data stored in files. PilatusSingleFrameFiles Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Detector data frames from Pilatus single-frame CBF files. This class deals with the retrieval of Pilatus detector data frames from single-frame files written by the detector in CBF format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes CBF file-based Pilatus detector data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from single-frame CBF files, so this function actually does nothing. get_data ( * , event ) Retrieves a Pilatus detector data frame from a file-based event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided file-based event, and returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . float_ ] One detector data frame. Jungfrau1MFiles Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Detector data frames from Jungfrau 1M HDF5 files. This class deals with the retrieval of Jungfrau 1M detector data frame from files written by the detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the HDF5 file-based Jungfrau 1M detector data frame source. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from OM's configuration parameters all the information needed to initialize the data source. It looks at the {data_source_name}_calibration entry in OM's data retrieval layer configuration parameter group to determine if calibrated data needs to be retrieved. In the affirmative case, it reads the names of the files containing the required calibration constants from the entries dark_filenames and gain_filenames in the calibration parameter group. get_data ( * , event ) Retrieves a Jungfrau 1M detector data frame from a file-based event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided file-based event, and returns the detector frame as a 2D array storing pixel information. The data is retrieved in calibrated or non-calibrated form depending on the value of the {source_protocols_name}_calibration entry in OM's data_retrieval_layer configuration parameter group. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] One detector data frame. Eiger16MFiles Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Detector data frames from Eiger 16M HDF5 files. This class deals with the retrieval of Eiger 16M detector data frames from files written by the detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the HDF5 file-based Eiger 16M detector data frame source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from files written by the Eiger 16M detector, so this function actually does nothing. get_data ( * , event ) Retrieves an Eiger 16M detector data frame from files. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided file-based event, and returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . int_ ] A detector data frame. RayonixMccdSingleFrameFiles Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Detector data frames from Rayonix MX340-HS single-frame mccd files. This class deals with the retrieval of Rayonix detector data frames from single-frame files written by the detector in MCCD format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the mccd file-based Rayonix MX340-HS detector data frame source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from single-frame mccd files, so this function actually does nothing. get_data ( * , event ) Retrieves a Rayonix MX340-HS detector data frame from files. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided file-based event, and returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . int_ ] A detector data frame. Lambda1M5Files Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Detector data frames from Lambda 1.5M HDF5 files. This class deals with the retrieval of Lambda 1.5M detector data frames from files written by the detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the HDF5 file-based Lambda 1.5M detector data frame source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from files written by the Lambda 1.5M detector, so this function actually does nothing. get_data ( * , event ) Retrieves a Lambda 1.5M detector data frame from files. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided file-based event, and returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] Detector data frame. TimestampFromFileModificationTime Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Timestamp information from the modification date of files. This class deals with the retrieval of timestamp information for file-based data events which do not provide any information of this kind. It assumes that the last modification date of a file is a good first approximation of the timestamp of the data stored in it. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the file modification date timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information from the modification date of files, so this function actually does nothing. get_data ( * , event ) Retrieves timestamp information from the modification date of a file. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the timestamp information associated with the provided file-based event. It uses as timestamp the last modification time of the file attached to the event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp of the data event. TimestampJungfrau1MFiles Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Timestamp information for Jungfrau 1M detector data events. This class deals with the retrieval of timestamp information for Jungfrau 1M data events. The files written by this detector do not record any absolute timestamp information. However, they store the readout of the internal detector clock for every frame they contain. As a first approximation, this class takes the modification time of a data file as the timestamp of the first frame stored in it, and computes the timestamp of all other frames according to the recorded internal clock time difference. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the Jungfrau 1M timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information for Jungfrau 1M data events, so this function actually does nothing. get_data ( * , event ) Retrieves the timestamp information for a Jungfrau 1M data event from files. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the timestamp information associated with the provided file-based event. It computes the timestamp using the last modification time of the file attached to the event, modified by the internal clock reading of the frame associated to the event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp for the Jungfrau 1M data event. EventIdFromFilePath Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Event identifiers from full path of files. This class deals with the retrieval of unique event identifiers for file-based data events that do not provide this information in any other way. It takes the full path to the data file as event identifier. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the full file path event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve an event identifier from a full file path, so this function actually does nothing. get_data ( * , event ) Retrieves the event identifier from the full path of a file. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves a unique event identifier for the provided file-based event, using as identifier the full path of the file attached to the event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier. EventIdJungfrau1MFiles Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Event identifiers for Jungfrau 1M data events. This class deals with the retrieval of unique event identifiers for Jungfrau 1M file-based data events. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the Jungfrau 1M event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve event identifiers for Jungfrau 1M data events, so this function actually does nothing. get_data ( * , event ) Retrieves the event identifier for a Jungfrau 1M data event. Please see the documentation of the base Protocol class for additional information about this method. This function constructs the event identifier for the provided file-based event by joining the following elements in a single string, with the \"//\" symbol placed between them. The full path to the HDF5 file attached to the event. The index, within the file, of the frame being processed. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier. EventIdEiger16MFiles Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Event identifiers for Eiger 16M data events. This class deals with the retrieval of unique event identifiers for an Eiger 16M file-based data events. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the Eiger 16M event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed retrieve event identifiers for Eiger 16M data events, so this function actually does nothing. get_data ( * , event ) Retrieves the event identifier for an Eiger 16M data event. Please see the documentation of the base Protocol class for additional information about this method. This function constructs the event identifier for the provided file-based event by joining the following elements in a single string, with the \"//\" symbol placed between them. The full path to the HDF5 file attached to the provided event. The index, within the file, of the frame being processed. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier. EventIdLambda1M5Files Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Event identifiers for Lambda 1.5M data events. This class deals with the retrieval of unique event identifiers for a Lambda 1.5M data events. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the Lambda 1.5M event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve event identifiers for Lambda 1.5M data events, so this function actually does nothing. get_data ( * , event ) Retrieves the event identifier for an Lambda 1.5M data event. Please see the documentation of the base Protocol class for additional information about this method. This function constructs the event identifier for the provided file-based event by joining the following elements in a single string, with the \"//\" symbol placed between them. The full path to the HDF5 file attached to the event and written by the first detector module, The index, within the file, of the frame being processed. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier.","title":"data_sources_files"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files","text":"File-based data sources. This module contains Data Source classes that deal with data stored in files.","title":"data_sources_files"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.PilatusSingleFrameFiles","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"PilatusSingleFrameFiles"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.PilatusSingleFrameFiles.__init__","text":"Detector data frames from Pilatus single-frame CBF files. This class deals with the retrieval of Pilatus detector data frames from single-frame files written by the detector in CBF format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.PilatusSingleFrameFiles.initialize_data_source","text":"Initializes CBF file-based Pilatus detector data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from single-frame CBF files, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.PilatusSingleFrameFiles.get_data","text":"Retrieves a Pilatus detector data frame from a file-based event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided file-based event, and returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . float_ ] One detector data frame.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Jungfrau1MFiles","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"Jungfrau1MFiles"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Jungfrau1MFiles.__init__","text":"Detector data frames from Jungfrau 1M HDF5 files. This class deals with the retrieval of Jungfrau 1M detector data frame from files written by the detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Jungfrau1MFiles.initialize_data_source","text":"Initializes the HDF5 file-based Jungfrau 1M detector data frame source. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from OM's configuration parameters all the information needed to initialize the data source. It looks at the {data_source_name}_calibration entry in OM's data retrieval layer configuration parameter group to determine if calibrated data needs to be retrieved. In the affirmative case, it reads the names of the files containing the required calibration constants from the entries dark_filenames and gain_filenames in the calibration parameter group.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Jungfrau1MFiles.get_data","text":"Retrieves a Jungfrau 1M detector data frame from a file-based event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided file-based event, and returns the detector frame as a 2D array storing pixel information. The data is retrieved in calibrated or non-calibrated form depending on the value of the {source_protocols_name}_calibration entry in OM's data_retrieval_layer configuration parameter group. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] One detector data frame.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Eiger16MFiles","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"Eiger16MFiles"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Eiger16MFiles.__init__","text":"Detector data frames from Eiger 16M HDF5 files. This class deals with the retrieval of Eiger 16M detector data frames from files written by the detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Eiger16MFiles.initialize_data_source","text":"Initializes the HDF5 file-based Eiger 16M detector data frame source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from files written by the Eiger 16M detector, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Eiger16MFiles.get_data","text":"Retrieves an Eiger 16M detector data frame from files. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided file-based event, and returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . int_ ] A detector data frame.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.RayonixMccdSingleFrameFiles","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"RayonixMccdSingleFrameFiles"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.RayonixMccdSingleFrameFiles.__init__","text":"Detector data frames from Rayonix MX340-HS single-frame mccd files. This class deals with the retrieval of Rayonix detector data frames from single-frame files written by the detector in MCCD format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.RayonixMccdSingleFrameFiles.initialize_data_source","text":"Initializes the mccd file-based Rayonix MX340-HS detector data frame source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from single-frame mccd files, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.RayonixMccdSingleFrameFiles.get_data","text":"Retrieves a Rayonix MX340-HS detector data frame from files. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided file-based event, and returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . int_ ] A detector data frame.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Lambda1M5Files","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"Lambda1M5Files"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Lambda1M5Files.__init__","text":"Detector data frames from Lambda 1.5M HDF5 files. This class deals with the retrieval of Lambda 1.5M detector data frames from files written by the detector in HDF5 format. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Lambda1M5Files.initialize_data_source","text":"Initializes the HDF5 file-based Lambda 1.5M detector data frame source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from files written by the Lambda 1.5M detector, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.Lambda1M5Files.get_data","text":"Retrieves a Lambda 1.5M detector data frame from files. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided file-based event, and returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] Detector data frame.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.TimestampFromFileModificationTime","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"TimestampFromFileModificationTime"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.TimestampFromFileModificationTime.__init__","text":"Timestamp information from the modification date of files. This class deals with the retrieval of timestamp information for file-based data events which do not provide any information of this kind. It assumes that the last modification date of a file is a good first approximation of the timestamp of the data stored in it. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.TimestampFromFileModificationTime.initialize_data_source","text":"Initializes the file modification date timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information from the modification date of files, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.TimestampFromFileModificationTime.get_data","text":"Retrieves timestamp information from the modification date of a file. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the timestamp information associated with the provided file-based event. It uses as timestamp the last modification time of the file attached to the event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp of the data event.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.TimestampJungfrau1MFiles","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"TimestampJungfrau1MFiles"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.TimestampJungfrau1MFiles.__init__","text":"Timestamp information for Jungfrau 1M detector data events. This class deals with the retrieval of timestamp information for Jungfrau 1M data events. The files written by this detector do not record any absolute timestamp information. However, they store the readout of the internal detector clock for every frame they contain. As a first approximation, this class takes the modification time of a data file as the timestamp of the first frame stored in it, and computes the timestamp of all other frames according to the recorded internal clock time difference. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.TimestampJungfrau1MFiles.initialize_data_source","text":"Initializes the Jungfrau 1M timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information for Jungfrau 1M data events, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.TimestampJungfrau1MFiles.get_data","text":"Retrieves the timestamp information for a Jungfrau 1M data event from files. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the timestamp information associated with the provided file-based event. It computes the timestamp using the last modification time of the file attached to the event, modified by the internal clock reading of the frame associated to the event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp for the Jungfrau 1M data event.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdFromFilePath","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"EventIdFromFilePath"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdFromFilePath.__init__","text":"Event identifiers from full path of files. This class deals with the retrieval of unique event identifiers for file-based data events that do not provide this information in any other way. It takes the full path to the data file as event identifier. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdFromFilePath.initialize_data_source","text":"Initializes the full file path event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve an event identifier from a full file path, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdFromFilePath.get_data","text":"Retrieves the event identifier from the full path of a file. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves a unique event identifier for the provided file-based event, using as identifier the full path of the file attached to the event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdJungfrau1MFiles","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"EventIdJungfrau1MFiles"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdJungfrau1MFiles.__init__","text":"Event identifiers for Jungfrau 1M data events. This class deals with the retrieval of unique event identifiers for Jungfrau 1M file-based data events. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdJungfrau1MFiles.initialize_data_source","text":"Initializes the Jungfrau 1M event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve event identifiers for Jungfrau 1M data events, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdJungfrau1MFiles.get_data","text":"Retrieves the event identifier for a Jungfrau 1M data event. Please see the documentation of the base Protocol class for additional information about this method. This function constructs the event identifier for the provided file-based event by joining the following elements in a single string, with the \"//\" symbol placed between them. The full path to the HDF5 file attached to the event. The index, within the file, of the frame being processed. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdEiger16MFiles","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"EventIdEiger16MFiles"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdEiger16MFiles.__init__","text":"Event identifiers for Eiger 16M data events. This class deals with the retrieval of unique event identifiers for an Eiger 16M file-based data events. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdEiger16MFiles.initialize_data_source","text":"Initializes the Eiger 16M event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed retrieve event identifiers for Eiger 16M data events, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdEiger16MFiles.get_data","text":"Retrieves the event identifier for an Eiger 16M data event. Please see the documentation of the base Protocol class for additional information about this method. This function constructs the event identifier for the provided file-based event by joining the following elements in a single string, with the \"//\" symbol placed between them. The full path to the HDF5 file attached to the provided event. The index, within the file, of the frame being processed. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdLambda1M5Files","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"EventIdLambda1M5Files"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdLambda1M5Files.__init__","text":"Event identifiers for Lambda 1.5M data events. This class deals with the retrieval of unique event identifiers for a Lambda 1.5M data events. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdLambda1M5Files.initialize_data_source","text":"Initializes the Lambda 1.5M event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve event identifiers for Lambda 1.5M data events, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_files/#om.data_retrieval_layer.data_sources_files.EventIdLambda1M5Files.get_data","text":"Retrieves the event identifier for an Lambda 1.5M data event. Please see the documentation of the base Protocol class for additional information about this method. This function constructs the event identifier for the provided file-based event by joining the following elements in a single string, with the \"//\" symbol placed between them. The full path to the HDF5 file attached to the event and written by the first detector module, The index, within the file, of the frame being processed. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_generic/","text":"data_sources_generic Generic data sources. This module contains Data Source classes that deal with data whose origin is not tied to a specific facility or experiment. TimestampFromEvent Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Timestamp information from data events. This class deals with the retrieval of the timestamp information stored in data events. Several software frameworks provide direct timestamp information about the events they generate. OM retrieves this information and stores it in the data event structure. This class retrieves it from there. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the event timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information from data events, so this function actually does nothing. get_data ( * , event ) Retrieves the timestamp information from a data event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the timestamp information stored in the provided data event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp from the data event. FloatEntryFromConfiguration Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Numerical values from configuration parameters. This class deals with the retrieval of numerical values from OM's configuration parameters. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the numerical configuration parameter data source. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the value of the {data_source_name} entry from OM's data_retrieval_layer configuration parameter group, and stores it for subsequent recall. The function treats the entry as a required parameter (i.e.: it raises an exception if the parameter is not available), and requires its value to be a float number. get_data ( * , event ) Retrieves the numerical value of an OM's configuration parameter Please see the documentation of the base Protocol class for additional information about this method. This function returns the value of the configuration parameter retrieved by the the Data Source. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The value of the configuration parameter.","title":"data_sources_generic"},{"location":"reference/om/data_retrieval_layer/data_sources_generic/#om.data_retrieval_layer.data_sources_generic","text":"Generic data sources. This module contains Data Source classes that deal with data whose origin is not tied to a specific facility or experiment.","title":"data_sources_generic"},{"location":"reference/om/data_retrieval_layer/data_sources_generic/#om.data_retrieval_layer.data_sources_generic.TimestampFromEvent","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"TimestampFromEvent"},{"location":"reference/om/data_retrieval_layer/data_sources_generic/#om.data_retrieval_layer.data_sources_generic.TimestampFromEvent.__init__","text":"Timestamp information from data events. This class deals with the retrieval of the timestamp information stored in data events. Several software frameworks provide direct timestamp information about the events they generate. OM retrieves this information and stores it in the data event structure. This class retrieves it from there. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_generic/#om.data_retrieval_layer.data_sources_generic.TimestampFromEvent.initialize_data_source","text":"Initializes the event timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information from data events, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_generic/#om.data_retrieval_layer.data_sources_generic.TimestampFromEvent.get_data","text":"Retrieves the timestamp information from a data event. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the timestamp information stored in the provided data event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp from the data event.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_generic/#om.data_retrieval_layer.data_sources_generic.FloatEntryFromConfiguration","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"FloatEntryFromConfiguration"},{"location":"reference/om/data_retrieval_layer/data_sources_generic/#om.data_retrieval_layer.data_sources_generic.FloatEntryFromConfiguration.__init__","text":"Numerical values from configuration parameters. This class deals with the retrieval of numerical values from OM's configuration parameters. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_generic/#om.data_retrieval_layer.data_sources_generic.FloatEntryFromConfiguration.initialize_data_source","text":"Initializes the numerical configuration parameter data source. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the value of the {data_source_name} entry from OM's data_retrieval_layer configuration parameter group, and stores it for subsequent recall. The function treats the entry as a required parameter (i.e.: it raises an exception if the parameter is not available), and requires its value to be a float number.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_generic/#om.data_retrieval_layer.data_sources_generic.FloatEntryFromConfiguration.get_data","text":"Retrieves the numerical value of an OM's configuration parameter Please see the documentation of the base Protocol class for additional information about this method. This function returns the value of the configuration parameter retrieved by the the Data Source. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The value of the configuration parameter.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_http/","text":"data_sources_http HTTP-based data sources. This module contains Data Source classes that deal with data retrieved from the HTTP/REST interface of detectors manufactured by the company Dectris. Eiger16MHttp Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Detector data frames from Eiger 16M's HTTP/REST interface. This class deals with the retrieval of Eiger 16M detector data frames from the detector's HTTP/REST interface. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters required initialize_data_source () Initializes the Eiger 16M's HTTP/REST data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from the Eiger 16M'S HTTP/REST- interface, so this function actually does nothing. get_data ( * , event ) Retrieves an Eiger 16M detector data frame. Please see the documentation of the base Protocol class for additional information about this method. This function extracts the detector data frame stored in the provided HTTP/REST-based event. It returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame. TimestampEiger16MHttp Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Timestamp information from Eiger's 16M HTTP/REST interface. This class deals with the retrieval of timestamp information for data events originating from an Eiger 16M's HTTPS/REST interface. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the Eiger 16M's HTTP/REST interface timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information from the Eiger 16M's HTTP/REST interface, so this function actually does nothing. get_data ( * , event ) Retrieves timestamp information from an Eiger 16M'S HTTP/REST interface. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the timestamp information associated with the provided HTTPS/REST-based event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp of the Jungfrau 1M data event. EventIdEiger16MHttp Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Event identifier from Eiger 16M's HTTP/REST interface. This class deals with the retrieval of unique event identifiers for events originating from an Eiger 16M's HTTP/REST interface. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the Eiger 16M's HTTP/REST interface event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve event identifiers for Eiger 16M data events, so this function actually does nothing. get_data ( * , event ) Retrieves an event identifier from an Eiger 16M'S HTTP/REST interface. Please see the documentation of the base Protocol class for additional information about this method. A data event retrieved from Eiger 16M's HTTP/REST interface contains detector frame data in the format of a TIFF image. The combination of the series_id and frame_id tags retrieved from the header of the TIFF image are used to generate an event identifier, with the format: ` _ . Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier.","title":"data_sources_http"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http","text":"HTTP-based data sources. This module contains Data Source classes that deal with data retrieved from the HTTP/REST interface of detectors manufactured by the company Dectris.","title":"data_sources_http"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.Eiger16MHttp","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"Eiger16MHttp"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.Eiger16MHttp.__init__","text":"Detector data frames from Eiger 16M's HTTP/REST interface. This class deals with the retrieval of Eiger 16M detector data frames from the detector's HTTP/REST interface. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.Eiger16MHttp.initialize_data_source","text":"Initializes the Eiger 16M's HTTP/REST data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve detector data frames from the Eiger 16M'S HTTP/REST- interface, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.Eiger16MHttp.get_data","text":"Retrieves an Eiger 16M detector data frame. Please see the documentation of the base Protocol class for additional information about this method. This function extracts the detector data frame stored in the provided HTTP/REST-based event. It returns the detector frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.TimestampEiger16MHttp","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"TimestampEiger16MHttp"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.TimestampEiger16MHttp.__init__","text":"Timestamp information from Eiger's 16M HTTP/REST interface. This class deals with the retrieval of timestamp information for data events originating from an Eiger 16M's HTTPS/REST interface. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.TimestampEiger16MHttp.initialize_data_source","text":"Initializes the Eiger 16M's HTTP/REST interface timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information from the Eiger 16M's HTTP/REST interface, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.TimestampEiger16MHttp.get_data","text":"Retrieves timestamp information from an Eiger 16M'S HTTP/REST interface. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the timestamp information associated with the provided HTTPS/REST-based event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp of the Jungfrau 1M data event.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.EventIdEiger16MHttp","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"EventIdEiger16MHttp"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.EventIdEiger16MHttp.__init__","text":"Event identifier from Eiger 16M's HTTP/REST interface. This class deals with the retrieval of unique event identifiers for events originating from an Eiger 16M's HTTP/REST interface. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.EventIdEiger16MHttp.initialize_data_source","text":"Initializes the Eiger 16M's HTTP/REST interface event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve event identifiers for Eiger 16M data events, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_http/#om.data_retrieval_layer.data_sources_http.EventIdEiger16MHttp.get_data","text":"Retrieves an event identifier from an Eiger 16M'S HTTP/REST interface. Please see the documentation of the base Protocol class for additional information about this method. A data event retrieved from Eiger 16M's HTTP/REST interface contains detector frame data in the format of a TIFF image. The combination of the series_id and frame_id tags retrieved from the header of the TIFF image are used to generate an event identifier, with the format: ` _ . Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/","text":"data_sources_psana Psana-related data sources. This module contains Data Source classes that deal with data retrieved from the ASAP::O software framework (used at the PETRA III facility). This module contains Data Source classes that deal with data retrieved from the psana software framework (used at the LCLS facility). CspadPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) CSPAD detector data frames from psana at the LCLS facility. This class deals with the retrieval of CSPAD detector data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana CSPAD detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the detector whose psana name matches the entry psana_{source_protocols_name}_name in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} . get_data ( * , event ) Retrieves a CSPAD detector data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Data is retrieved in calibrated or non-calibrated form depending on the value of the {source_protocols_name}_calibration entry in OM's data_retrieval_layer configuration parameter group. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana. Epix10kaPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Epix10KA 2M detector data frames from psana at the LCLS facility. This class deals with the retrieval of Epix10Ka 2M detector data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the Epix10KA 2M detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} . get_data ( * , event ) Retrieves an Epix10KA 2M detector data frame from psana. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This function retrieves from psana the detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Data is retrieved in calibrated or non-calibrated form depending on the value of the {source_protocols_name}_calibration entry in OM's data_retrieval_layer configuration parameter group. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana. Jungfrau4MPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Jungfrau 4M detector data frames from psana at the LCLS facility. This class deals with the retrieval of Jungfrau 4M detector data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana Jungfrau 4M detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval interface for the detector whose psana name matches the psana_{source_protocols_name}_name entry in the OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} . get_data ( * , event ) Retrieves a Jungfrau 4M detector data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Data is retrieved in calibrated or non-calibrated form depending on the value of the {source_protocols_name}_calibration entry in OM's data_retrieval_layer configuration parameter group.. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana. Epix100Psana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Epix100 detector data frames from psana at the LCLS facility. This class deals with the retrieval of Epix 100 detector data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana Epix100 detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} . get_data ( * , event ) Retrieves a Epix100 detector data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Data is retrieved in calibrated or non-calibrated form depending on the value of the {source_protocols_name}_calibration entry in OM's data_retrieval_layer configuration parameter group. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana. RayonixPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Rayonix detector data frames at the LCLS facility. This class deals with the retrieval of Rayonix detector data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM'a configuration parameters. required initialize_data_source () Initializes the psana Rayonix detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} . get_data ( * , event ) Retrieves a Rayonix detector data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . float_ ] A detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana. OpalPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Opal camera data frames from psana at the LCLS facility. This class deals with the retrieval of Opal camera data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana Opal camera frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the camera whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the camera with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} . get_data ( * , event ) Retrieves an Opal camera data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the camera data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . float_ ] A camera data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana. AcqirisPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Acqiris time/voltage waveform data from psana at the LCLS facility. This class deals with the retrieval of waveform data from an Acqiris time/voltage detector at the LCLS facility. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana Acqiris waveform data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval for the Acqiris detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} . get_data ( * , event ) Retrieves Acqiris waveform data from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the waveform data for the provided event. The Acqiris data is retrieved for all of the detector's channels at the same time, and returned in the form of a tuple with two entries: The first entry in the tuple is a 1D array storing information about the time points at which the waveform data has been digitized. The size of this array matches the size of each waveform in the second entry. The second entry is a 2D array that stores the waveform information from all the channels. The first axis of the array corresponds to the channel number, the second one stores, for each channel, the digitized waveform data. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Tuple [ NDArray [ numpy . float_ ], NDArray [ numpy . float_ ]] A tuple, with two entries, storing the digitized waveform data from the Acqiris detector. AssembledDetectorPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Assembled detector data frames from psana at the LCLS facility. This class deals with the retrieval of assembled detector data frames from the psana software framework. Assembled detector data frames are detector data frames to which geometry information has already been applied. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM'a configuration parameters. required initialize_data_source () Initializes the psana assembled detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} . get_data ( * , event ) Retrieves an assembled detector data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the assembled detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . float_ ] An assembled detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana. Wave8TotalIntensityPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Wave8 intensity data from psana at the LCLS facility. This class deals with the retrieval the intensity data recorded by a Wave8 detector from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana Wave8 intensity data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the intensity data retrieval for the Wave8 detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} . get_data ( * , event ) Retrieves Wave8 intensity data from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the total intensity recorded by the detector for the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The total intensity recorded by the Wave8 detector. TimestampPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Timestamp information from psana at the LCLS facility. This class deals with the retrieval of timestamp information from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information from psana, so this function actually does nothing. get_data ( * , event ) Retrieves timestamp information from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the timestamp information for the provided event. Psana provides this information with nanosecond precision. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp for the data event. EventIdPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Data event identifiers from psana at the LCLS facility. This class deals with the retrieval of unique event identifiers for psana-based data events. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is required to retrieve event identifiers for psana-based data events, so this function actually does nothing. get_data ( * , event ) Retrieves an event identifier from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana a unique identifier for the provided event. The psana software framework provides timestamp information with nanosecond-level precision for each event, plus a specific fiducial string for more detailed identification. The identifier is generated by combining the timestamp and fiducial information that psana provides for the event. It has the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducial_string} . Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier. EpicsVariablePsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Epics variable values from psana at the LCLS facility. This class deals with the retrieval of Epics variable values from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana Epics variable data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval for the Epics variable whose psana name matches the psana_{source_protocols_name}_name entry in the OM's data_retrieval_layer configuration parameter group, or for the Epics variable with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} . get_data ( * , event ) Retrieves an Epics variable's value from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the value of the requested Epics variable associated with the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Any The value of the Epics variable. BeamEnergyPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Beam energy information from psana at the LCLS facility. This class deals with the retrieval of beam energy information from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana beam energy data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the psana Detector interface for the retrieval of beam energy information. get_data ( * , event ) Retrieves beam energy information from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the beam energy information for the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The beam energy. BeamEnergyFromEpicsVariablePsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Beam energy information from psana at the LCLS facility, via an Epics variable. This class deals with the retrieval of beam energy information from the psana framework via an Epics variable. This is a different approach from how psana usually provides the beam energy information. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana Epics-based beam energy data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval only for the Epics variable storing the beam energy information (\"SIOC:SYS0:ML00:AO192\"). get_data ( * , event ) Retrieves beam energy information from psana using an Epics variable. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the value of the beam energy associated to the provided event. It calculates the beam energy from the value of the SIOC:SYS0:ML00:AO192 Epics variable attached to the event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The beam energy in eV. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana. EvrCodesPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) EVR event codes from psana at the LCLS facility. This class deals with the retrieval EVR event codes from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana EVR event code data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval for the EVR event code number specified by the {data_source_name}_evr_code entry in OM's Data Retrieval Layer configuration parameter group. The EVR event source to monitor for the emission of the event is instead determined by the psana_evr_source_name entry in the same parameter group. get_data ( * , event ) Retrieves EVR events code information from psana. Please see the documentation of the base Protocol class for additional information about this method. This function checks whether the event code attached to the Data Source has been emitted, for the provided event, by the monitored EVR source. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description bool Whether the required event code has been emitted for the provided event. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana. DiodeTotalIntensityPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Diode intensity data from psana at the LCLS facility. This class deals with the retrieval of the intensity data recorded by a diode from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana diode intensity data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the intensity data retrieval for the diode whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the diode with a given psana name, if the source_protocols_name argument has the format psana-{diode name} . get_data ( * , event ) Retrieves diode intensity data from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the total intensity recorded by the diode for the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The total intensity recorded by the diode. LclsExtraPsana Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Additional facility-specific information from psana at the LCLS facility. This class deals with the retrieval of information that is specific to the LCLS facility. Due to its non-generic nature, the nature of the information that can be collected is limited to a few predefined types. The collected information, due to its specific nature, should not be processed by OM at all, but only saved to a storage media, or passed to a facility-specific downstream application. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the psana LCLS-specific information data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval for the LCLS-specific information defined by the lcls_extra entry in the OM's data_retrieval_layer configuration parameter group. The entry must have the format of a list of tuples. Each tuple must be made up of three elements: The first entry must be a string that defines the nature of the information to retrieve. Currently, only the following types of information are supported: acqiris_waveform : A waveform from an Acqiris detector. For a description of the format of the data, Please refer to the documentation of the get_data function of the AcqirisPsana class. epics_pv : The value of an Epics variable. For a description of the format of the data, Please refer to the documentation of the get_data function of the EpicsVariablePsana class. wave8_total_intensity : The total intensity recorded by a Wave8 detector (expressed as a float number). opal_camera : An data frame collected by an Opal camera. For a description of the format of the data, Please refer to the documentation of the get_data function of the OpalPsana class. assembled_detector_data : A detector data frame with geometry applied, as generated by the psana software framework. The data must have the format of a 2D array storing pixel information. The second entry must be a string identifying the source of the retrieved information. This is the name, in the psana software framework, of the detector generating the data to be retrieved. For the epics_pv data type, this is the Epics name of the variable to retrieve. The third entry is string that assigns an identifying name to data. This is only used by OM, and only within the set of retrieved LCLS-specific data. Raises: Type Description OmWrongParameterTypeError Raised when the lcls_extra entry in OM's configuration parameters is not formatted correctly, or it requests data that is not supported yet. get_data ( * , event ) Retrieves LCLS-specific information from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the LCLS-specific information associated with the provided event. It returns the data in the format of a dictionary. The keys in the dictionary match the OM identifiers assigned to each data entry. The corresponding dictionary values the retrieved information for each required data element. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the retrieved LCLS-specific information for the Dict [ str , Any ] provided event.","title":"data_sources_psana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana","text":"Psana-related data sources. This module contains Data Source classes that deal with data retrieved from the ASAP::O software framework (used at the PETRA III facility). This module contains Data Source classes that deal with data retrieved from the psana software framework (used at the LCLS facility).","title":"data_sources_psana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.CspadPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"CspadPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.CspadPsana.__init__","text":"CSPAD detector data frames from psana at the LCLS facility. This class deals with the retrieval of CSPAD detector data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.CspadPsana.initialize_data_source","text":"Initializes the psana CSPAD detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the detector whose psana name matches the entry psana_{source_protocols_name}_name in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} .","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.CspadPsana.get_data","text":"Retrieves a CSPAD detector data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Data is retrieved in calibrated or non-calibrated form depending on the value of the {source_protocols_name}_calibration entry in OM's data_retrieval_layer configuration parameter group. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Epix10kaPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"Epix10kaPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Epix10kaPsana.__init__","text":"Epix10KA 2M detector data frames from psana at the LCLS facility. This class deals with the retrieval of Epix10Ka 2M detector data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Epix10kaPsana.initialize_data_source","text":"Initializes the Epix10KA 2M detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} .","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Epix10kaPsana.get_data","text":"Retrieves an Epix10KA 2M detector data frame from psana. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This function retrieves from psana the detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Data is retrieved in calibrated or non-calibrated form depending on the value of the {source_protocols_name}_calibration entry in OM's data_retrieval_layer configuration parameter group. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Jungfrau4MPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"Jungfrau4MPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Jungfrau4MPsana.__init__","text":"Jungfrau 4M detector data frames from psana at the LCLS facility. This class deals with the retrieval of Jungfrau 4M detector data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Jungfrau4MPsana.initialize_data_source","text":"Initializes the psana Jungfrau 4M detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval interface for the detector whose psana name matches the psana_{source_protocols_name}_name entry in the OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} .","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Jungfrau4MPsana.get_data","text":"Retrieves a Jungfrau 4M detector data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Data is retrieved in calibrated or non-calibrated form depending on the value of the {source_protocols_name}_calibration entry in OM's data_retrieval_layer configuration parameter group.. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Epix100Psana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"Epix100Psana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Epix100Psana.__init__","text":"Epix100 detector data frames from psana at the LCLS facility. This class deals with the retrieval of Epix 100 detector data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Epix100Psana.initialize_data_source","text":"Initializes the psana Epix100 detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} .","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Epix100Psana.get_data","text":"Retrieves a Epix100 detector data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Data is retrieved in calibrated or non-calibrated form depending on the value of the {source_protocols_name}_calibration entry in OM's data_retrieval_layer configuration parameter group. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.RayonixPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"RayonixPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.RayonixPsana.__init__","text":"Rayonix detector data frames at the LCLS facility. This class deals with the retrieval of Rayonix detector data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM'a configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.RayonixPsana.initialize_data_source","text":"Initializes the psana Rayonix detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} .","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.RayonixPsana.get_data","text":"Retrieves a Rayonix detector data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . float_ ] A detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.OpalPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"OpalPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.OpalPsana.__init__","text":"Opal camera data frames from psana at the LCLS facility. This class deals with the retrieval of Opal camera data frames from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.OpalPsana.initialize_data_source","text":"Initializes the psana Opal camera frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the camera whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the camera with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} .","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.OpalPsana.get_data","text":"Retrieves an Opal camera data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the camera data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . float_ ] A camera data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.AcqirisPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"AcqirisPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.AcqirisPsana.__init__","text":"Acqiris time/voltage waveform data from psana at the LCLS facility. This class deals with the retrieval of waveform data from an Acqiris time/voltage detector at the LCLS facility. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.AcqirisPsana.initialize_data_source","text":"Initializes the psana Acqiris waveform data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval for the Acqiris detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} .","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.AcqirisPsana.get_data","text":"Retrieves Acqiris waveform data from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the waveform data for the provided event. The Acqiris data is retrieved for all of the detector's channels at the same time, and returned in the form of a tuple with two entries: The first entry in the tuple is a 1D array storing information about the time points at which the waveform data has been digitized. The size of this array matches the size of each waveform in the second entry. The second entry is a 2D array that stores the waveform information from all the channels. The first axis of the array corresponds to the channel number, the second one stores, for each channel, the digitized waveform data. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Tuple [ NDArray [ numpy . float_ ], NDArray [ numpy . float_ ]] A tuple, with two entries, storing the digitized waveform data from the Acqiris detector.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.AssembledDetectorPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"AssembledDetectorPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.AssembledDetectorPsana.__init__","text":"Assembled detector data frames from psana at the LCLS facility. This class deals with the retrieval of assembled detector data frames from the psana software framework. Assembled detector data frames are detector data frames to which geometry information has already been applied. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM'a configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.AssembledDetectorPsana.initialize_data_source","text":"Initializes the psana assembled detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes data retrieval for the detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} .","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.AssembledDetectorPsana.get_data","text":"Retrieves an assembled detector data frame from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the assembled detector data frame associated with the provided event. It returns the frame as a 2D array storing pixel information. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description NDArray [ numpy . float_ ] An assembled detector data frame. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Wave8TotalIntensityPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"Wave8TotalIntensityPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Wave8TotalIntensityPsana.__init__","text":"Wave8 intensity data from psana at the LCLS facility. This class deals with the retrieval the intensity data recorded by a Wave8 detector from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Wave8TotalIntensityPsana.initialize_data_source","text":"Initializes the psana Wave8 intensity data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the intensity data retrieval for the Wave8 detector whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the detector with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} .","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.Wave8TotalIntensityPsana.get_data","text":"Retrieves Wave8 intensity data from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the total intensity recorded by the detector for the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The total intensity recorded by the Wave8 detector.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.TimestampPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"TimestampPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.TimestampPsana.__init__","text":"Timestamp information from psana at the LCLS facility. This class deals with the retrieval of timestamp information from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.TimestampPsana.initialize_data_source","text":"Initializes the psana timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information from psana, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.TimestampPsana.get_data","text":"Retrieves timestamp information from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the timestamp information for the provided event. Psana provides this information with nanosecond precision. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp for the data event.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EventIdPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"EventIdPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EventIdPsana.__init__","text":"Data event identifiers from psana at the LCLS facility. This class deals with the retrieval of unique event identifiers for psana-based data events. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EventIdPsana.initialize_data_source","text":"Initializes the psana event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is required to retrieve event identifiers for psana-based data events, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EventIdPsana.get_data","text":"Retrieves an event identifier from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana a unique identifier for the provided event. The psana software framework provides timestamp information with nanosecond-level precision for each event, plus a specific fiducial string for more detailed identification. The identifier is generated by combining the timestamp and fiducial information that psana provides for the event. It has the following format: {timestamp: seconds}-{timestamp: nanoseconds}-{fiducial_string} . Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EpicsVariablePsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"EpicsVariablePsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EpicsVariablePsana.__init__","text":"Epics variable values from psana at the LCLS facility. This class deals with the retrieval of Epics variable values from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EpicsVariablePsana.initialize_data_source","text":"Initializes the psana Epics variable data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval for the Epics variable whose psana name matches the psana_{source_protocols_name}_name entry in the OM's data_retrieval_layer configuration parameter group, or for the Epics variable with a given psana name, if the source_protocols_name argument has the format psana-{psana detector name} .","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EpicsVariablePsana.get_data","text":"Retrieves an Epics variable's value from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the value of the requested Epics variable associated with the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Any The value of the Epics variable.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.BeamEnergyPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"BeamEnergyPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.BeamEnergyPsana.__init__","text":"Beam energy information from psana at the LCLS facility. This class deals with the retrieval of beam energy information from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.BeamEnergyPsana.initialize_data_source","text":"Initializes the psana beam energy data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the psana Detector interface for the retrieval of beam energy information.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.BeamEnergyPsana.get_data","text":"Retrieves beam energy information from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the beam energy information for the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The beam energy.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.BeamEnergyFromEpicsVariablePsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"BeamEnergyFromEpicsVariablePsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.BeamEnergyFromEpicsVariablePsana.__init__","text":"Beam energy information from psana at the LCLS facility, via an Epics variable. This class deals with the retrieval of beam energy information from the psana framework via an Epics variable. This is a different approach from how psana usually provides the beam energy information. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.BeamEnergyFromEpicsVariablePsana.initialize_data_source","text":"Initializes the psana Epics-based beam energy data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval only for the Epics variable storing the beam energy information (\"SIOC:SYS0:ML00:AO192\").","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.BeamEnergyFromEpicsVariablePsana.get_data","text":"Retrieves beam energy information from psana using an Epics variable. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the value of the beam energy associated to the provided event. It calculates the beam energy from the value of the SIOC:SYS0:ML00:AO192 Epics variable attached to the event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The beam energy in eV. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EvrCodesPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"EvrCodesPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EvrCodesPsana.__init__","text":"EVR event codes from psana at the LCLS facility. This class deals with the retrieval EVR event codes from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EvrCodesPsana.initialize_data_source","text":"Initializes the psana EVR event code data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval for the EVR event code number specified by the {data_source_name}_evr_code entry in OM's Data Retrieval Layer configuration parameter group. The EVR event source to monitor for the emission of the event is instead determined by the psana_evr_source_name entry in the same parameter group.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.EvrCodesPsana.get_data","text":"Retrieves EVR events code information from psana. Please see the documentation of the base Protocol class for additional information about this method. This function checks whether the event code attached to the Data Source has been emitted, for the provided event, by the monitored EVR source. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description bool Whether the required event code has been emitted for the provided event. Raises: Type Description OmDataExtractionError Raised when data cannot be retrieved from psana.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.DiodeTotalIntensityPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"DiodeTotalIntensityPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.DiodeTotalIntensityPsana.__init__","text":"Diode intensity data from psana at the LCLS facility. This class deals with the retrieval of the intensity data recorded by a diode from the psana software framework. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.DiodeTotalIntensityPsana.initialize_data_source","text":"Initializes the psana diode intensity data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the intensity data retrieval for the diode whose psana name matches the psana_{source_protocols_name}_name entry in OM's data_retrieval_layer configuration parameter group, or for the diode with a given psana name, if the source_protocols_name argument has the format psana-{diode name} .","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.DiodeTotalIntensityPsana.get_data","text":"Retrieves diode intensity data from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the total intensity recorded by the diode for the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description float The total intensity recorded by the diode.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.LclsExtraPsana","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"LclsExtraPsana"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.LclsExtraPsana.__init__","text":"Additional facility-specific information from psana at the LCLS facility. This class deals with the retrieval of information that is specific to the LCLS facility. Due to its non-generic nature, the nature of the information that can be collected is limited to a few predefined types. The collected information, due to its specific nature, should not be processed by OM at all, but only saved to a storage media, or passed to a facility-specific downstream application. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.LclsExtraPsana.initialize_data_source","text":"Initializes the psana LCLS-specific information data source. Please see the documentation of the base Protocol class for additional information about this method. This function initializes the data retrieval for the LCLS-specific information defined by the lcls_extra entry in the OM's data_retrieval_layer configuration parameter group. The entry must have the format of a list of tuples. Each tuple must be made up of three elements: The first entry must be a string that defines the nature of the information to retrieve. Currently, only the following types of information are supported: acqiris_waveform : A waveform from an Acqiris detector. For a description of the format of the data, Please refer to the documentation of the get_data function of the AcqirisPsana class. epics_pv : The value of an Epics variable. For a description of the format of the data, Please refer to the documentation of the get_data function of the EpicsVariablePsana class. wave8_total_intensity : The total intensity recorded by a Wave8 detector (expressed as a float number). opal_camera : An data frame collected by an Opal camera. For a description of the format of the data, Please refer to the documentation of the get_data function of the OpalPsana class. assembled_detector_data : A detector data frame with geometry applied, as generated by the psana software framework. The data must have the format of a 2D array storing pixel information. The second entry must be a string identifying the source of the retrieved information. This is the name, in the psana software framework, of the detector generating the data to be retrieved. For the epics_pv data type, this is the Epics name of the variable to retrieve. The third entry is string that assigns an identifying name to data. This is only used by OM, and only within the set of retrieved LCLS-specific data. Raises: Type Description OmWrongParameterTypeError Raised when the lcls_extra entry in OM's configuration parameters is not formatted correctly, or it requests data that is not supported yet.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_psana/#om.data_retrieval_layer.data_sources_psana.LclsExtraPsana.get_data","text":"Retrieves LCLS-specific information from psana. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from psana the LCLS-specific information associated with the provided event. It returns the data in the format of a dictionary. The keys in the dictionary match the OM identifiers assigned to each data entry. The corresponding dictionary values the retrieved information for each required data element. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the retrieved LCLS-specific information for the Dict [ str , Any ] provided event.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/","text":"data_sources_zmq ZMQ-based data sources. This module contains Data Source classes that deal with data retrieved from ZMQ data streams. Jungfrau1MZmq Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Detector data frames from a Jungfrau 1M's ZMQ data stream. This class deals with the retrieval of Jungfrau 1M detector data frames from a ZMQ stream broadcast by the detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the Jungfrau 1M's ZMQ stream detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from OM's configuration parameters all the information needed to initialize the data source. It looks at the parameter {data_source_name}_calibration in OM's data retrieval layer configuration parameter group to determine if calibrated data needs to be retrieved. In the affirmative case, it reads the names of the files containing the required calibration constants from the entries dark_filenames and gain_filenames in the calibration parameter group. get_data ( * , event ) Retrieves a Jungfrau 1M detector data frame from a ZMQ data stream. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided ZMQ-based event. It returns the frame as a 2D array storing pixel information. Data is retrieved in calibrated or non-calibrated form depending on the value of the {data_source_name}_calibration entry in OM's data_retrieval_layer configuration parameter group. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame. TimestampJungfrau1MZmq Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Timestamp information from a Jungfrau 1M's ZMQ data stream. This class deals with the retrieval of timestamp information for Jungfrau 1M data events originating from a ZMQ stream broadcast by the detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, for communication with the user or retrieval of initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the Jungfrau 1M's ZMQ stream timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information for Jungfrau 1M data events originating from a ZMQ stream, so this function actually does nothing. get_data ( * , event ) Retrieves timestamp information from a Jungfrau 1M's ZMQ data stream. Please see the documentation of the base Protocol class for additional information about this method. This function returns the timestamp information associated, in the ZMQ data stream broadcast by the detector, to the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp for the data event. EventIdJungfrau1MZmq Bases: OmDataSourceProtocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Event identifiers from a Jungfrau 1M's ZMQ data stream.. This class deals with the retrieval of unique identifiers for Jungfrau 1M data events originating from a ZMQ stream broadcast by the detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, for communication with the user or retrieval of initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Initializes the Jungfrau 1M's ZMQ stream event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve event identifiers for Jungfrau 1M data events originating from a ZMQ stream broadcast by the detector, so this function actually does nothing. get_data ( * , event ) Retrieves an event identifier from a Jungfrau 1M's ZMQ data stream. Please see the documentation of the base Protocol class for additional information about this method. This function returns the frame number associated, in the ZMQ data stream broadcast by the detector to the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier.","title":"data_sources_zmq"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq","text":"ZMQ-based data sources. This module contains Data Source classes that deal with data retrieved from ZMQ data streams.","title":"data_sources_zmq"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.Jungfrau1MZmq","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"Jungfrau1MZmq"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.Jungfrau1MZmq.__init__","text":"Detector data frames from a Jungfrau 1M's ZMQ data stream. This class deals with the retrieval of Jungfrau 1M detector data frames from a ZMQ stream broadcast by the detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.Jungfrau1MZmq.initialize_data_source","text":"Initializes the Jungfrau 1M's ZMQ stream detector frame data source. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves from OM's configuration parameters all the information needed to initialize the data source. It looks at the parameter {data_source_name}_calibration in OM's data retrieval layer configuration parameter group to determine if calibrated data needs to be retrieved. In the affirmative case, it reads the names of the files containing the required calibration constants from the entries dark_filenames and gain_filenames in the calibration parameter group.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.Jungfrau1MZmq.get_data","text":"Retrieves a Jungfrau 1M detector data frame from a ZMQ data stream. Please see the documentation of the base Protocol class for additional information about this method. This function retrieves the detector data frame associated with the provided ZMQ-based event. It returns the frame as a 2D array storing pixel information. Data is retrieved in calibrated or non-calibrated form depending on the value of the {data_source_name}_calibration entry in OM's data_retrieval_layer configuration parameter group. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] A detector data frame.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.TimestampJungfrau1MZmq","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"TimestampJungfrau1MZmq"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.TimestampJungfrau1MZmq.__init__","text":"Timestamp information from a Jungfrau 1M's ZMQ data stream. This class deals with the retrieval of timestamp information for Jungfrau 1M data events originating from a ZMQ stream broadcast by the detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, for communication with the user or retrieval of initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.TimestampJungfrau1MZmq.initialize_data_source","text":"Initializes the Jungfrau 1M's ZMQ stream timestamp data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve timestamp information for Jungfrau 1M data events originating from a ZMQ stream, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.TimestampJungfrau1MZmq.get_data","text":"Retrieves timestamp information from a Jungfrau 1M's ZMQ data stream. Please see the documentation of the base Protocol class for additional information about this method. This function returns the timestamp information associated, in the ZMQ data stream broadcast by the detector, to the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description numpy . float64 The timestamp for the data event.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.EventIdJungfrau1MZmq","text":"Bases: OmDataSourceProtocol See documentation of the __init__ function.","title":"EventIdJungfrau1MZmq"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.EventIdJungfrau1MZmq.__init__","text":"Event identifiers from a Jungfrau 1M's ZMQ data stream.. This class deals with the retrieval of unique identifiers for Jungfrau 1M data events originating from a ZMQ stream broadcast by the detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, for communication with the user or retrieval of initialization parameters. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.EventIdJungfrau1MZmq.initialize_data_source","text":"Initializes the Jungfrau 1M's ZMQ stream event identifier data source. Please see the documentation of the base Protocol class for additional information about this method. No initialization is needed to retrieve event identifiers for Jungfrau 1M data events originating from a ZMQ stream broadcast by the detector, so this function actually does nothing.","title":"initialize_data_source()"},{"location":"reference/om/data_retrieval_layer/data_sources_zmq/#om.data_retrieval_layer.data_sources_zmq.EventIdJungfrau1MZmq.get_data","text":"Retrieves an event identifier from a Jungfrau 1M's ZMQ data stream. Please see the documentation of the base Protocol class for additional information about this method. This function returns the frame number associated, in the ZMQ data stream broadcast by the detector to the provided event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description str A unique event identifier.","title":"get_data()"},{"location":"reference/om/data_retrieval_layer/event_retrieval/","text":"event_retrieval This module contains classes that deals with the retrieval of single standalone events. OmEventDataRetrieval See documentation for the __init__ function. __init__ ( * , monitor_parameters , source ) Retrieval of single standalone data events. This class deals with the retrieval of single standalone data events from a data source. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required retrieve_event_data ( event_id ) Retrieves all data attached to the requested data event. This function retrieves all the information associated with the data event specified by the provided identifier. The data is returned in the form of a dictionary. Each dictionary key identifies a Data Source in the event for which information has been retrieved. The corresponding dictionary values store the data associated with each Data Source. Parameters: Name Type Description Default event_id str a string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] A dictionary storing all data related the retrieved event.","title":"event_retrieval"},{"location":"reference/om/data_retrieval_layer/event_retrieval/#om.data_retrieval_layer.event_retrieval","text":"This module contains classes that deals with the retrieval of single standalone events.","title":"event_retrieval"},{"location":"reference/om/data_retrieval_layer/event_retrieval/#om.data_retrieval_layer.event_retrieval.OmEventDataRetrieval","text":"See documentation for the __init__ function.","title":"OmEventDataRetrieval"},{"location":"reference/om/data_retrieval_layer/event_retrieval/#om.data_retrieval_layer.event_retrieval.OmEventDataRetrieval.__init__","text":"Retrieval of single standalone data events. This class deals with the retrieval of single standalone data events from a data source. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/data_retrieval_layer/event_retrieval/#om.data_retrieval_layer.event_retrieval.OmEventDataRetrieval.retrieve_event_data","text":"Retrieves all data attached to the requested data event. This function retrieves all the information associated with the data event specified by the provided identifier. The data is returned in the form of a dictionary. Each dictionary key identifies a Data Source in the event for which information has been retrieved. The corresponding dictionary values store the data associated with each Data Source. Parameters: Name Type Description Default event_id str a string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] A dictionary storing all data related the retrieved event.","title":"retrieve_event_data()"},{"location":"reference/om/graphical_interfaces/","text":"graphical_interfaces OM's graphical user interfaces. This package contains OM's Qt-based graphical user interfaces for the desktop. Each module in this package contains the implementation of a single GUI or viewer. common crystallography_gui crystallography_parameter_tweaker frame_viewer xes_gui","title":"__init__"},{"location":"reference/om/graphical_interfaces/#om.graphical_interfaces","text":"OM's graphical user interfaces. This package contains OM's Qt-based graphical user interfaces for the desktop. Each module in this package contains the implementation of a single GUI or viewer. common crystallography_gui crystallography_parameter_tweaker frame_viewer xes_gui","title":"graphical_interfaces"},{"location":"reference/om/graphical_interfaces/common/","text":"common Base classes for OM's graphical interfaces. This module contains common base classes and functions used by all of OM's graphical user interfaces and viewers. OmGuiBase Bases: QtWidgets . QMainWindow See documentation of the __init__ function. __init__ ( * , url , tag ) Base class for OM's graphical user interfaces. This class implements elements that are common to all of OM's graphical interfaces. When initialized, this class creates a listening thread that receives data from an OnDA Monitor (filtered according to a provided tag). It additionally lays out the basic widget structure of the interface. Finally, it makes sure that a function that updates the graphical elements of the interface is called at regular intervals. The class has methods to start and stop the listening thread, effectively attaching and detaching the graphical interface from the OnDA Monitor broadcasting the data This base class should be subclassed to create specific graphical interfaces. Each derived class should always call the constructor of this class during initialization, and must additionally provide its own specific implementation of the abstract update_gui function. Parameters: Name Type Description Default url str The URL at which the GUI will connect and listen for data. This must be a string in the format used by the ZeroMQ protocol. required tag str A string used to filter the data received from an OnDA Monitor. The GUI only receives data whose tag matches this argument. required start_listening () Connects to an OnDA Monitor and starts listening for broadcast data. This function instructs the listening thread to connect to an OnDA Monitor and start receiving data. stop_listening () Disconnects from an OnDA Monitor and stops listening for data. This function instructs the listening thread to disconnect from an OnDA Monitor and stop receiving data. update_gui () Updates GUI elements. This function is called at regular intervals by this class. It updates plots and other elements of the graphical interface. This function is an abstract method of this base class: each derived graphical interface class must provide its own implementation.","title":"common"},{"location":"reference/om/graphical_interfaces/common/#om.graphical_interfaces.common","text":"Base classes for OM's graphical interfaces. This module contains common base classes and functions used by all of OM's graphical user interfaces and viewers.","title":"common"},{"location":"reference/om/graphical_interfaces/common/#om.graphical_interfaces.common.OmGuiBase","text":"Bases: QtWidgets . QMainWindow See documentation of the __init__ function.","title":"OmGuiBase"},{"location":"reference/om/graphical_interfaces/common/#om.graphical_interfaces.common.OmGuiBase.__init__","text":"Base class for OM's graphical user interfaces. This class implements elements that are common to all of OM's graphical interfaces. When initialized, this class creates a listening thread that receives data from an OnDA Monitor (filtered according to a provided tag). It additionally lays out the basic widget structure of the interface. Finally, it makes sure that a function that updates the graphical elements of the interface is called at regular intervals. The class has methods to start and stop the listening thread, effectively attaching and detaching the graphical interface from the OnDA Monitor broadcasting the data This base class should be subclassed to create specific graphical interfaces. Each derived class should always call the constructor of this class during initialization, and must additionally provide its own specific implementation of the abstract update_gui function. Parameters: Name Type Description Default url str The URL at which the GUI will connect and listen for data. This must be a string in the format used by the ZeroMQ protocol. required tag str A string used to filter the data received from an OnDA Monitor. The GUI only receives data whose tag matches this argument. required","title":"__init__()"},{"location":"reference/om/graphical_interfaces/common/#om.graphical_interfaces.common.OmGuiBase.start_listening","text":"Connects to an OnDA Monitor and starts listening for broadcast data. This function instructs the listening thread to connect to an OnDA Monitor and start receiving data.","title":"start_listening()"},{"location":"reference/om/graphical_interfaces/common/#om.graphical_interfaces.common.OmGuiBase.stop_listening","text":"Disconnects from an OnDA Monitor and stops listening for data. This function instructs the listening thread to disconnect from an OnDA Monitor and stop receiving data.","title":"stop_listening()"},{"location":"reference/om/graphical_interfaces/common/#om.graphical_interfaces.common.OmGuiBase.update_gui","text":"Updates GUI elements. This function is called at regular intervals by this class. It updates plots and other elements of the graphical interface. This function is an abstract method of this base class: each derived graphical interface class must provide its own implementation.","title":"update_gui()"},{"location":"reference/om/graphical_interfaces/crystallography_gui/","text":"crystallography_gui OM's GUI for Crystallography. This module contains a graphical interface that displays reduced and aggregated data in Serial Crystallography experiments. CrystallographyGui Bases: OmGuiBase See documentation of the __init__ function. __init__ ( * , url ) OM graphical user interface for crystallography. This class implements a graphical user interface for Serial Crystallography experiments. The GUI receives reduced and aggregated data from an OnDA Monitor, but only when it is tagged with the omdata label. The data must contain information about the position of detected Bragg peaks, and about the hit rate of the experiment. The GUI then displays a plot showing the evolution of the hit rate over time, a virtual powder pattern generated using the positions of the detected Bragg peaks, and a peakogram plot calculated from the Bragg peak information. Parameters: Name Type Description Default url str The URL at which the GUI should connect and listen for data. This must be a string in the format used by the ZeroMQ protocol. required update_gui () Updates the elements of the Crystallography GUI. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This method, which is called at regular intervals, updates the hit rate history plot, the virtual powder pattern plot and the peakogram plot. main ( * , url ) OM Graphical User Interface for Crystallography. This program must connect to a running OnDA Monitor for Crystallography. If the monitor broadcasts the necessary information, this GUI displays the evolution of the hit rate over time, a real-time virtual powder pattern created using the positions of detected Bragg peaks, and a peakogram plot computed from the Bragg peak information. The GUI connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321. crystallography_gui.py OM Graphical User Interface for Crystallography. This program must connect to a running OnDA Monitor for Crystallography. If the monitor broadcasts the necessary information, this GUI displays the evolution of the hit rate over time, a real-time virtual powder pattern created using the positions of detected Bragg peaks, and a peakogram plot computed from the Bragg peak information. The GUI connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321. Usage: crystallography_gui.py [OPTIONS] [URL] Options: --help Show this message and exit.","title":"crystallography_gui"},{"location":"reference/om/graphical_interfaces/crystallography_gui/#om.graphical_interfaces.crystallography_gui","text":"OM's GUI for Crystallography. This module contains a graphical interface that displays reduced and aggregated data in Serial Crystallography experiments.","title":"crystallography_gui"},{"location":"reference/om/graphical_interfaces/crystallography_gui/#om.graphical_interfaces.crystallography_gui.CrystallographyGui","text":"Bases: OmGuiBase See documentation of the __init__ function.","title":"CrystallographyGui"},{"location":"reference/om/graphical_interfaces/crystallography_gui/#om.graphical_interfaces.crystallography_gui.CrystallographyGui.__init__","text":"OM graphical user interface for crystallography. This class implements a graphical user interface for Serial Crystallography experiments. The GUI receives reduced and aggregated data from an OnDA Monitor, but only when it is tagged with the omdata label. The data must contain information about the position of detected Bragg peaks, and about the hit rate of the experiment. The GUI then displays a plot showing the evolution of the hit rate over time, a virtual powder pattern generated using the positions of the detected Bragg peaks, and a peakogram plot calculated from the Bragg peak information. Parameters: Name Type Description Default url str The URL at which the GUI should connect and listen for data. This must be a string in the format used by the ZeroMQ protocol. required","title":"__init__()"},{"location":"reference/om/graphical_interfaces/crystallography_gui/#om.graphical_interfaces.crystallography_gui.CrystallographyGui.update_gui","text":"Updates the elements of the Crystallography GUI. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This method, which is called at regular intervals, updates the hit rate history plot, the virtual powder pattern plot and the peakogram plot.","title":"update_gui()"},{"location":"reference/om/graphical_interfaces/crystallography_gui/#om.graphical_interfaces.crystallography_gui.main","text":"OM Graphical User Interface for Crystallography. This program must connect to a running OnDA Monitor for Crystallography. If the monitor broadcasts the necessary information, this GUI displays the evolution of the hit rate over time, a real-time virtual powder pattern created using the positions of detected Bragg peaks, and a peakogram plot computed from the Bragg peak information. The GUI connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321.","title":"main()"},{"location":"reference/om/graphical_interfaces/crystallography_gui/#crystallography_guipy","text":"OM Graphical User Interface for Crystallography. This program must connect to a running OnDA Monitor for Crystallography. If the monitor broadcasts the necessary information, this GUI displays the evolution of the hit rate over time, a real-time virtual powder pattern created using the positions of detected Bragg peaks, and a peakogram plot computed from the Bragg peak information. The GUI connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321. Usage: crystallography_gui.py [OPTIONS] [URL] Options: --help Show this message and exit.","title":"crystallography_gui.py"},{"location":"reference/om/graphical_interfaces/crystallography_parameter_tweaker/","text":"crystallography_parameter_tweaker OM's real-time Parameter Tweaker. This module contains a graphical interface that can be used to test peak-finding parameters in real time during crystallography experiments. CrystallographyParameterTweaker Bases: OmGuiBase See documentation of the __init__ function. __init__ ( * , url , monitor_parameters ) OM Parameter Tweaker for Crystallography. This class implements a graphical user interface that can be used to test new peak finding parameters in real time during Serial Crystallography experiments. The GUI receives data from an OnDA Monitor, but only when is is tagged with the omtweakingdata label. The data must contain calibrated detector data frames. The GUI then displays the detector frames, and allows a user to choose a set of peak-finding parameters. The chosen parameters are used to apply the Peakfinder8PeakDetection algorithm on the fly to each received frame. The GUI displays the positions of all detected Bragg peaks on each frame image. A data storage buffer allows the viewer to stop receiving data from the OnDA Monitor, but still keep in memory the last 10 displayed frames for re-inspection and re-processing (peak-finding with a new set of parameters). Parameters: Name Type Description Default url str The URL at which the GUI will connect and listen for data. This must be a string in the format used by the ZeroMQ protocol. required update_gui () Updates the elements of the Crystallography Parameter Tweaker. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This method, which is called at regular intervals, performs the hit finding with the current chosen parameters, and updates the displayed detector frame and the positions of the detected Bragg peaks. Additionally, this function manages the data storage buffer that allows the last received frames to be re-inspected and re-processed. main ( * , url , config ) OM Parameter Tweaker for Crystallography. This program must connect to a running OnDA Monitor for Crystallography. If the monitor broadcasts the necessary information, this program displays detector frames received from the monitor. Additionally, it allows the user to choose a set of peak-finding parameters that is applied in real time to each received frame. The program displays the position of the detected Bragg peaks on each displayed detector image. The program can also temporarily disconnect from the monitor, and any of the last 10 displayed frames can be recalled and reprocessed. The graphical interface connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321. crystallography_parameter_tweaker.py OM Parameter Tweaker for Crystallography. This program must connect to a running OnDA Monitor for Crystallography. If the monitor broadcasts the necessary information, this program displays detector frames received from the monitor. Additionally, it allows the user to choose a set of peak-finding parameters that is applied in real time to each received frame. The program displays the position of the detected Bragg peaks on each displayed detector image. The program can also temporarily disconnect from the monitor, and any of the last 10 displayed frames can be recalled and reprocessed. The graphical interface connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321. Usage: crystallography_parameter_tweaker.py [OPTIONS] [URL] Options: -c, --config PATH configuration file (default: monitor.yaml file in the current working directory --help Show this message and exit.","title":"crystallography_parameter_tweaker"},{"location":"reference/om/graphical_interfaces/crystallography_parameter_tweaker/#om.graphical_interfaces.crystallography_parameter_tweaker","text":"OM's real-time Parameter Tweaker. This module contains a graphical interface that can be used to test peak-finding parameters in real time during crystallography experiments.","title":"crystallography_parameter_tweaker"},{"location":"reference/om/graphical_interfaces/crystallography_parameter_tweaker/#om.graphical_interfaces.crystallography_parameter_tweaker.CrystallographyParameterTweaker","text":"Bases: OmGuiBase See documentation of the __init__ function.","title":"CrystallographyParameterTweaker"},{"location":"reference/om/graphical_interfaces/crystallography_parameter_tweaker/#om.graphical_interfaces.crystallography_parameter_tweaker.CrystallographyParameterTweaker.__init__","text":"OM Parameter Tweaker for Crystallography. This class implements a graphical user interface that can be used to test new peak finding parameters in real time during Serial Crystallography experiments. The GUI receives data from an OnDA Monitor, but only when is is tagged with the omtweakingdata label. The data must contain calibrated detector data frames. The GUI then displays the detector frames, and allows a user to choose a set of peak-finding parameters. The chosen parameters are used to apply the Peakfinder8PeakDetection algorithm on the fly to each received frame. The GUI displays the positions of all detected Bragg peaks on each frame image. A data storage buffer allows the viewer to stop receiving data from the OnDA Monitor, but still keep in memory the last 10 displayed frames for re-inspection and re-processing (peak-finding with a new set of parameters). Parameters: Name Type Description Default url str The URL at which the GUI will connect and listen for data. This must be a string in the format used by the ZeroMQ protocol. required","title":"__init__()"},{"location":"reference/om/graphical_interfaces/crystallography_parameter_tweaker/#om.graphical_interfaces.crystallography_parameter_tweaker.CrystallographyParameterTweaker.update_gui","text":"Updates the elements of the Crystallography Parameter Tweaker. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This method, which is called at regular intervals, performs the hit finding with the current chosen parameters, and updates the displayed detector frame and the positions of the detected Bragg peaks. Additionally, this function manages the data storage buffer that allows the last received frames to be re-inspected and re-processed.","title":"update_gui()"},{"location":"reference/om/graphical_interfaces/crystallography_parameter_tweaker/#om.graphical_interfaces.crystallography_parameter_tweaker.main","text":"OM Parameter Tweaker for Crystallography. This program must connect to a running OnDA Monitor for Crystallography. If the monitor broadcasts the necessary information, this program displays detector frames received from the monitor. Additionally, it allows the user to choose a set of peak-finding parameters that is applied in real time to each received frame. The program displays the position of the detected Bragg peaks on each displayed detector image. The program can also temporarily disconnect from the monitor, and any of the last 10 displayed frames can be recalled and reprocessed. The graphical interface connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321.","title":"main()"},{"location":"reference/om/graphical_interfaces/crystallography_parameter_tweaker/#crystallography_parameter_tweakerpy","text":"OM Parameter Tweaker for Crystallography. This program must connect to a running OnDA Monitor for Crystallography. If the monitor broadcasts the necessary information, this program displays detector frames received from the monitor. Additionally, it allows the user to choose a set of peak-finding parameters that is applied in real time to each received frame. The program displays the position of the detected Bragg peaks on each displayed detector image. The program can also temporarily disconnect from the monitor, and any of the last 10 displayed frames can be recalled and reprocessed. The graphical interface connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321. Usage: crystallography_parameter_tweaker.py [OPTIONS] [URL] Options: -c, --config PATH configuration file (default: monitor.yaml file in the current working directory --help Show this message and exit.","title":"crystallography_parameter_tweaker.py"},{"location":"reference/om/graphical_interfaces/frame_viewer/","text":"frame_viewer OM's Frame Viewer. This module contains a graphical interface that displays detector data frames and, additional provided information. FrameViewer Bases: OmGuiBase See documentation of the __init__ function. __init__ ( * , url ) OM frame viewer. This class implements a frame viewer. The viewer receives data from an OnDA Monitor, but only when it is tagged with the view:omframedata label. The data must contain calibrated detector data frames. The viewer then displays the received frames. If additional information is included in the received data (for example, the positions of detected Bragg peaks), the graphical interface shows it on each displayed frame image. A data storage buffer allows the viewer to stop receiving data from the OnDA Monitor, but still keep in memory the last 10 displayed frames for re-inspection. Parameters: Name Type Description Default url str The URL at which the GUI will connect and listen for data. This must be a string in the format used by the ZeroMQ protocol. required update_gui () Updates the elements of the Crystallography Frame Viewer. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This method, which is called at regular intervals, updates the displayed detector frame (and any additional shown information) using the most recently received data. Additionally, this function manages the data storage buffer that allows the last received detector frames to be re-inspected. main ( * , url ) OM Frame Viewer. This program must connect to a running OnDA Monitor. If the monitor broadcasts the necessary information, the program displays the most recently received detector data frame, and any additional related received data. The data stream from the monitor can also be temporarily paused, and any of 10 most recently displayed detector frames can be recalled for re-inspection. The viewer connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the viewer connects, using the tcp protocol, to a monitor running on the local machine at port 12321. crystallography_frame_viewer.py OM Frame Viewer. This program must connect to a running OnDA Monitor. If the monitor broadcasts the necessary information, the program displays the most recently received detector data frame, and any additional related received data. The data stream from the monitor can also be temporarily paused, and any of 10 most recently displayed detector frames can be recalled for re-inspection. The viewer connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the viewer connects, using the tcp protocol, to a monitor running on the local machine at port 12321. Usage: crystallography_frame_viewer.py [OPTIONS] [URL] Options: --help Show this message and exit.","title":"frame_viewer"},{"location":"reference/om/graphical_interfaces/frame_viewer/#om.graphical_interfaces.frame_viewer","text":"OM's Frame Viewer. This module contains a graphical interface that displays detector data frames and, additional provided information.","title":"frame_viewer"},{"location":"reference/om/graphical_interfaces/frame_viewer/#om.graphical_interfaces.frame_viewer.FrameViewer","text":"Bases: OmGuiBase See documentation of the __init__ function.","title":"FrameViewer"},{"location":"reference/om/graphical_interfaces/frame_viewer/#om.graphical_interfaces.frame_viewer.FrameViewer.__init__","text":"OM frame viewer. This class implements a frame viewer. The viewer receives data from an OnDA Monitor, but only when it is tagged with the view:omframedata label. The data must contain calibrated detector data frames. The viewer then displays the received frames. If additional information is included in the received data (for example, the positions of detected Bragg peaks), the graphical interface shows it on each displayed frame image. A data storage buffer allows the viewer to stop receiving data from the OnDA Monitor, but still keep in memory the last 10 displayed frames for re-inspection. Parameters: Name Type Description Default url str The URL at which the GUI will connect and listen for data. This must be a string in the format used by the ZeroMQ protocol. required","title":"__init__()"},{"location":"reference/om/graphical_interfaces/frame_viewer/#om.graphical_interfaces.frame_viewer.FrameViewer.update_gui","text":"Updates the elements of the Crystallography Frame Viewer. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This method, which is called at regular intervals, updates the displayed detector frame (and any additional shown information) using the most recently received data. Additionally, this function manages the data storage buffer that allows the last received detector frames to be re-inspected.","title":"update_gui()"},{"location":"reference/om/graphical_interfaces/frame_viewer/#om.graphical_interfaces.frame_viewer.main","text":"OM Frame Viewer. This program must connect to a running OnDA Monitor. If the monitor broadcasts the necessary information, the program displays the most recently received detector data frame, and any additional related received data. The data stream from the monitor can also be temporarily paused, and any of 10 most recently displayed detector frames can be recalled for re-inspection. The viewer connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the viewer connects, using the tcp protocol, to a monitor running on the local machine at port 12321.","title":"main()"},{"location":"reference/om/graphical_interfaces/frame_viewer/#crystallography_frame_viewerpy","text":"OM Frame Viewer. This program must connect to a running OnDA Monitor. If the monitor broadcasts the necessary information, the program displays the most recently received detector data frame, and any additional related received data. The data stream from the monitor can also be temporarily paused, and any of 10 most recently displayed detector frames can be recalled for re-inspection. The viewer connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the viewer connects, using the tcp protocol, to a monitor running on the local machine at port 12321. Usage: crystallography_frame_viewer.py [OPTIONS] [URL] Options: --help Show this message and exit.","title":"crystallography_frame_viewer.py"},{"location":"reference/om/graphical_interfaces/xes_gui/","text":"xes_gui OM's GUI for x-ray emission spectroscopy. This module contains a graphical interface that displays reduced and aggregated data in x-ray emission spectroscopy experiments. XesGui Bases: OmGuiBase See documentation of the __init__ function. __init__ ( url , time_resolved = False ) OM graphical user interface for XES. This class implements a graphical user interface for XES experiments. The GUI receives reduced and aggregated data from an OnDA Monitor, but only when it is tagged with the view:omdata label. The data must contain information about the collected XES spectra. The UI then displays the last observed XES spectrum, both in raw and smoothed form, plus an average of the most recently collected spectra. For time resolved experiments, this GUI displays average spectra for pumped and dark events separately, and also shows their difference. Parameters: Name Type Description Default url str The URL at which the GUI will connect and listen for data. This must be a string in the format used by the ZeroMQ protocol. required update_gui () Updates the elements of the XES GUI. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This method, which is called at regular intervals, updates the plots showing the spectrum information. main ( url , time_resolved ) OM Graphical User Interface for X-ray Emission Spectroscopy. This program must connect to a running OnDA Monitor for X-ray Emission Spectroscopy. If the monitor broadcasts the necessary information, this GUI displays the latest observed XES spectrum, both in raw and smoothed form, and an average of the most recently collected spectra. For time resolved experiments, the GUI displays separate average spectra for pumped and dark events, and also shows their difference. The graphical interface connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321. xes_gui.py OM Graphical User Interface for X-ray Emission Spectroscopy. This program must connect to a running OnDA Monitor for X-ray Emission Spectroscopy. If the monitor broadcasts the necessary information, this GUI displays the latest observed XES spectrum, both in raw and smoothed form, and an average of the most recently collected spectra. For time resolved experiments, the GUI displays separate average spectra for pumped and dark events, and also shows their difference. The graphical interface connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321. Usage: xes_gui.py [OPTIONS] [URL] [TIME_RESOLVED] Options: --help Show this message and exit.","title":"xes_gui"},{"location":"reference/om/graphical_interfaces/xes_gui/#om.graphical_interfaces.xes_gui","text":"OM's GUI for x-ray emission spectroscopy. This module contains a graphical interface that displays reduced and aggregated data in x-ray emission spectroscopy experiments.","title":"xes_gui"},{"location":"reference/om/graphical_interfaces/xes_gui/#om.graphical_interfaces.xes_gui.XesGui","text":"Bases: OmGuiBase See documentation of the __init__ function.","title":"XesGui"},{"location":"reference/om/graphical_interfaces/xes_gui/#om.graphical_interfaces.xes_gui.XesGui.__init__","text":"OM graphical user interface for XES. This class implements a graphical user interface for XES experiments. The GUI receives reduced and aggregated data from an OnDA Monitor, but only when it is tagged with the view:omdata label. The data must contain information about the collected XES spectra. The UI then displays the last observed XES spectrum, both in raw and smoothed form, plus an average of the most recently collected spectra. For time resolved experiments, this GUI displays average spectra for pumped and dark events separately, and also shows their difference. Parameters: Name Type Description Default url str The URL at which the GUI will connect and listen for data. This must be a string in the format used by the ZeroMQ protocol. required","title":"__init__()"},{"location":"reference/om/graphical_interfaces/xes_gui/#om.graphical_interfaces.xes_gui.XesGui.update_gui","text":"Updates the elements of the XES GUI. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This method, which is called at regular intervals, updates the plots showing the spectrum information.","title":"update_gui()"},{"location":"reference/om/graphical_interfaces/xes_gui/#om.graphical_interfaces.xes_gui.main","text":"OM Graphical User Interface for X-ray Emission Spectroscopy. This program must connect to a running OnDA Monitor for X-ray Emission Spectroscopy. If the monitor broadcasts the necessary information, this GUI displays the latest observed XES spectrum, both in raw and smoothed form, and an average of the most recently collected spectra. For time resolved experiments, the GUI displays separate average spectra for pumped and dark events, and also shows their difference. The graphical interface connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321.","title":"main()"},{"location":"reference/om/graphical_interfaces/xes_gui/#xes_guipy","text":"OM Graphical User Interface for X-ray Emission Spectroscopy. This program must connect to a running OnDA Monitor for X-ray Emission Spectroscopy. If the monitor broadcasts the necessary information, this GUI displays the latest observed XES spectrum, both in raw and smoothed form, and an average of the most recently collected spectra. For time resolved experiments, the GUI displays separate average spectra for pumped and dark events, and also shows their difference. The graphical interface connects to and OnDA Monitor running at the IP address (or hostname) + port specified by the URL string. This is a string in the format used by the ZeroMQ protocol. The URL string is optional. If not provided, it defaults to \"tcp://127.0.0.1:12321\": the GUI connects, using the tcp protocol, to a monitor running on the local machine at port 12321. Usage: xes_gui.py [OPTIONS] [URL] [TIME_RESOLVED] Options: --help Show this message and exit.","title":"xes_gui.py"},{"location":"reference/om/lib/","text":"lib OM's utility functions and classes. This package contains functions and classes that perform common operations needed by other modules and packages in OM. They are split into into modules according to the type of functionality they provide. cheetah crystallography [event_management(event_management.md) exceptions geometry hdf5 layer_management parameters rich_console xes zmq zmq_qt u","title":"__init__"},{"location":"reference/om/lib/#om.lib","text":"OM's utility functions and classes. This package contains functions and classes that perform common operations needed by other modules and packages in OM. They are split into into modules according to the type of functionality they provide. cheetah crystallography [event_management(event_management.md) exceptions geometry hdf5 layer_management parameters rich_console xes zmq zmq_qt u","title":"lib"},{"location":"reference/om/lib/cheetah/","text":"cheetah TypeFrameListData Bases: NamedTuple Cheetah frame list data. This named tuple is used to store the detector frame data which is later written to the frames.txt file. Attributes: Name Type Description timestamp numpy . float64 The timestamp of the frame. event_id Union [ str , None] The event ID of the frame. frame_is_hit int A flag indicating whether the frame is a labelled as a hit. filename str The name of the file containing the frame. index_in_file int The index of the frame in the file. num_peaks int The number of peaks in the frame. average_intensity numpy . float64 The average intensity of the peaks in the frame. TypeClassSumData Bases: TypedDict Cheetah data class frame sum data. A dictionary storing the number of detector frames belonging to a specific data class, their sum, and the virtual powder plot generated from the Bragg peaks detected in them. Attributes: Name Type Description num_frames int The number of detector frames belonging to the data class. sum_frames NDArray [ numpy . float_ ] The sum of the detector frames belonging to the class. peak_powder NDArray [ numpy . float_ ] The virtual powder plot for the data class. CheetahStatusFileWriter See documentation for the __init__ function. __init__ ( * , parameters ) Cheetah status file writer. This class stores information about the current state of data processing in Cheetah. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: directory_for_processed_data : A relative or absolute path to the directory where the output files are to be written. required update_status ( * , status = '' , num_frames = 0 , num_hits = 0 ) Writes a status file. This function writes the information about the current state of data processing to a status file. The Cheetah GUI inspect this file to get information about Cheetah's current state. Parameters: Name Type Description Default status str A string describing the current status of the data processing in Cheetah. '' num_frames int The number of detector frames processed so far by Cheetah. 0 num_hits int The number of hits found so far by Cheetah. 0 CheetahListFilesWriter See documentation for the __init__ function. __init__ ( * , cheetah_parameters ) Cheetah list files writer. This class manages the information that gets written to the \"frames.txt\", \"cleaned.txt\", \"events.lst\", \"hits.lst\" and \"peaks.txt\" files required by the Cheetah GUI. \"frames.txt\" contains a list of all the detector frames processed by Cheetah, with information about the frame timestamp, event ID, whether the frame is a hit, the name of the file containing the frame, the index of the frame in the file, the number of peaks detected in the frame, and the average intensity of the peaks in the frame. \"cleaned.txt\" contains a list of all the detector frames that have been identified as hits by Cheetah, with the same information as \"frames.txt\". \"events.lst\" contains a list of all the event IDs of the detector frames processed by Cheetah. \"hits.lst\" contains a list of all the event IDs of the detector frames that have been identified as hits by Cheetah. \"peaks.txt\" contains a list of all the Bragg peaks detected by Cheetah, with information about the event ID of the frame to which the peak belongs, the number of peaks in the frame, the fast-scan and slow-scan coordinates of the peak, the peak intensity, the number of pixels in the peak, the maximum pixel intensity in the peak, and the signal-to-noise ratio of the peak. Parameters: Name Type Description Default cheetah_parameters Dict [ str , Any ] An object storing Cheetah's configuration parameters. required add_frame ( * , frame_data , peak_list ) Adds a frame to the list files. This function adds information related to a single detector data frame to the list files. Parameters: Name Type Description Default frame_data TypeFrameListData Information about the frame that must be added to the list files. required peak_list TypePeakList The list of peaks detected in the frame being added to the files. required flush_files () Flushes the list files. This function flushes the list files to disk, writing on storage media the information still stored only in memory. sort_frames_and_close_files () Performs final operations on the list files. This functions performs some operations on the list files just before closing them: it sorts the frames according to their event identifier and it writes the sorted data to the frames.txt , cleaned.txt and events.lst files. The function then closes all the list files. CheetahClassSumsAccumulator See documentation for the __init__ function. __init__ ( * , cheetah_parameters , num_classes = 2 ) Cheetah data class sum accumulator. This class accumulates information about the sum and virtual powder plot of all detector frames belonging to a specific data class. After data frame information has been added to the accumulator, the sum and virtual powder plot for the data class can be retrieved from the accumulator, either after a predefined number of frames has been added to the accumulator, or at will. Parameters: Name Type Description Default cheetah_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: class_sums_sending_interval: The number of detector frames that the accumulator can receive before returning the sum and virtual powder plot information and resetting the accumulator. required num_classes int The total number of data classes currently managed by Cheetah. 2 add_frame ( * , class_number , frame_data , peak_list ) Adds a detector frame to the accumulator. This function adds information about a detector data frame to the accumulator. Parameters: Name Type Description Default class_number int The data class number to which the frame being added belongs. required frame_data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] Information about the detector data frame that must be added to the accumulator. required peak_list TypePeakList The list of peaks detected in the frame being added to the accumulator. required get_sums_for_sending ( disregard_counter = False ) Retrieves sum and virtual powder plot data from the accumulator. This function returns the data stored in the accumulator if the predefined number of frames has been added to the accumulator, or if the disregard_counter argument is True . Otherwise, returns None . Parameters: Name Type Description Default disregard_counter bool If True , the sending counter is disregarded and the class sums are returned. False Returns: Type Description Union [None, List [ TypeClassSumData ]] The sum and virtual powder plot stored by the accumulator, or None. CheetahClassSumsCollector See documentation for the __init__ function. __init__ ( * , cheetah_parameters , num_classes ) Cheetah data class sum collector. This class collects accumulated data class information retrieved from the processing nodes, and stores the cumulative total information associated with the data class. The information collected by this class can optionally be written to an HDF5 file. Parameters: Name Type Description Default cheetah_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: write_class_sums : Whether the information stored by the collector should be written to disk regularly. class_sums_update_interval : If the information stored by the collector must be written to disk (see the write_class_sums parameter), this parameter determines how many times the collector can be updated before the accumulated data is written to a file After the HDF5 has been written, the update count is reset. required num_classes int The total number of data classes currently managed by Cheetah. required add_sums ( * , class_sums ) Adds information to the collectors Adds class sums information, retrieved from the processing nodes, to the collector. If the predefined number of updates has been reached, the function triggers the writing of the collector's data to an HDF5 file. Parameters: Name Type Description Default class_sums List [ TypeClassSumData ] The information to be added to the collector. required save_sums () Saves the collector's data to an HDF5 file. This function saves the collector's accumulated data to an HDF5 file. It is called automatically by the collector when required, but can also be called manually. HDF5Writer See documentation of the __init__ function. __init__ ( * , node_rank , cheetah_parameters ) HDF5 file writer for Cheetah. This class creates HDF5 data files to store the information processed by Cheetah. For each data event, this class saves into an HDF5 file a processed detector data frame, the list of Bragg peaks detected in the frame, and some additional information (timestamp, beam energy, detector distance, pump laser state). Parameters: Name Type Description Default cheetah_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: directory_for_processed_data: A relative or absolute path to the directory where the output files are written. compression: The compression filter to be applied to the data in the output file. hdf5_fields: A dictionary storing information about the internal HDF5 path where each data entry must be written. * The keys in the dictionary must store the names of data entries to write. * The corresponding dictionary values must contain the internal HDF5 paths where the entries must be written. processed_filename_prefix: A string that is prepended to the name of the output files. Optional. If the value of this entry is None, the string 'processed_' will be used as prefix. Defaults to None. processed_filename_extension: An extension string that id appended to the name of the output files. Optional. If the value of this entry is None, the string 'h5' is be used as extension. Defaults to None. compression_opts: The compression level to be used, if data compression is applied to the output files. The information in this entry only applies if the corresponding compression entry is not None, otherwise, it is ignored. Optional. If the value of this entry is None, the compression level is set to 4. Defaults to None. compression_shuffle: Whether the shuffle filter is applied. If the value of this entry is True, the filter is applied to the data being written, otherwise it is not. Defaults to None. max_num_peaks: The maximum number of detected Bragg peaks that are written in the HDF5 file for each event. Optional. If the value of this entry is None, only the first 1024 peaks detected in each frame are written to the output file. Defaults to None. required node_rank int The rank of the OM node that writes the data in the output files. required write_frame ( * , processed_data ) Writes data into an HDF5 data file. This function writes the provided data into an HDF5 data file, assuming that all the data belongs to the same processed data event. Parameters: Name Type Description Default processed_data Dict [ str , Any ] A dictionary containing the data to write into the HDF5 file. required close () Closes the file currently being written. This function closes the HDF5 file that the class is currently writing. get_current_filename () Retrieves the path to the file currently being written. This function retrieves the full path to the file that the class is currently writing. Returns: Type Description pathlib . Path The path to the file currently being written. get_num_written_frames () Retrieves the number of data events already written to the current file. This function retrieves the number of data events that the class has already saved into the file that is currently writing. Returns: Type Description int The number of data events already written in the current file. SumHDF5Writer See documentation of the __init__ function. __init__ ( * , powder_class , cheetah_parameters ) HDF5 writer for sum of frames. This class creates HDF5 data files to store the aggregate information collected by Cheetah. the function saves into HDF5 files sums of detector data frames, together with virtual powder patterns created using the Bragg peaks detected in them. Parameters: Name Type Description Default powder_class int A unique identifier for the sum of frames and virtual powder pattern being saved. required cheetah_parameters Dict [ str , Any ] A dictionary containing the Cheetah parameters. required write_sums ( * , data ) Writes aggregated detector frame data into an HDF5 file. This function writes the provided aggregated data into an HDF5 data file. Parameters: Name Type Description Default data TypeClassSumData A dictionary containing the aggregated data to write into the HDF5 file. required","title":"cheetah"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah","text":"","title":"cheetah"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.TypeFrameListData","text":"Bases: NamedTuple Cheetah frame list data. This named tuple is used to store the detector frame data which is later written to the frames.txt file. Attributes: Name Type Description timestamp numpy . float64 The timestamp of the frame. event_id Union [ str , None] The event ID of the frame. frame_is_hit int A flag indicating whether the frame is a labelled as a hit. filename str The name of the file containing the frame. index_in_file int The index of the frame in the file. num_peaks int The number of peaks in the frame. average_intensity numpy . float64 The average intensity of the peaks in the frame.","title":"TypeFrameListData"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.TypeClassSumData","text":"Bases: TypedDict Cheetah data class frame sum data. A dictionary storing the number of detector frames belonging to a specific data class, their sum, and the virtual powder plot generated from the Bragg peaks detected in them. Attributes: Name Type Description num_frames int The number of detector frames belonging to the data class. sum_frames NDArray [ numpy . float_ ] The sum of the detector frames belonging to the class. peak_powder NDArray [ numpy . float_ ] The virtual powder plot for the data class.","title":"TypeClassSumData"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahStatusFileWriter","text":"See documentation for the __init__ function.","title":"CheetahStatusFileWriter"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahStatusFileWriter.__init__","text":"Cheetah status file writer. This class stores information about the current state of data processing in Cheetah. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: directory_for_processed_data : A relative or absolute path to the directory where the output files are to be written. required","title":"__init__()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahStatusFileWriter.update_status","text":"Writes a status file. This function writes the information about the current state of data processing to a status file. The Cheetah GUI inspect this file to get information about Cheetah's current state. Parameters: Name Type Description Default status str A string describing the current status of the data processing in Cheetah. '' num_frames int The number of detector frames processed so far by Cheetah. 0 num_hits int The number of hits found so far by Cheetah. 0","title":"update_status()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahListFilesWriter","text":"See documentation for the __init__ function.","title":"CheetahListFilesWriter"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahListFilesWriter.__init__","text":"Cheetah list files writer. This class manages the information that gets written to the \"frames.txt\", \"cleaned.txt\", \"events.lst\", \"hits.lst\" and \"peaks.txt\" files required by the Cheetah GUI. \"frames.txt\" contains a list of all the detector frames processed by Cheetah, with information about the frame timestamp, event ID, whether the frame is a hit, the name of the file containing the frame, the index of the frame in the file, the number of peaks detected in the frame, and the average intensity of the peaks in the frame. \"cleaned.txt\" contains a list of all the detector frames that have been identified as hits by Cheetah, with the same information as \"frames.txt\". \"events.lst\" contains a list of all the event IDs of the detector frames processed by Cheetah. \"hits.lst\" contains a list of all the event IDs of the detector frames that have been identified as hits by Cheetah. \"peaks.txt\" contains a list of all the Bragg peaks detected by Cheetah, with information about the event ID of the frame to which the peak belongs, the number of peaks in the frame, the fast-scan and slow-scan coordinates of the peak, the peak intensity, the number of pixels in the peak, the maximum pixel intensity in the peak, and the signal-to-noise ratio of the peak. Parameters: Name Type Description Default cheetah_parameters Dict [ str , Any ] An object storing Cheetah's configuration parameters. required","title":"__init__()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahListFilesWriter.add_frame","text":"Adds a frame to the list files. This function adds information related to a single detector data frame to the list files. Parameters: Name Type Description Default frame_data TypeFrameListData Information about the frame that must be added to the list files. required peak_list TypePeakList The list of peaks detected in the frame being added to the files. required","title":"add_frame()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahListFilesWriter.flush_files","text":"Flushes the list files. This function flushes the list files to disk, writing on storage media the information still stored only in memory.","title":"flush_files()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahListFilesWriter.sort_frames_and_close_files","text":"Performs final operations on the list files. This functions performs some operations on the list files just before closing them: it sorts the frames according to their event identifier and it writes the sorted data to the frames.txt , cleaned.txt and events.lst files. The function then closes all the list files.","title":"sort_frames_and_close_files()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahClassSumsAccumulator","text":"See documentation for the __init__ function.","title":"CheetahClassSumsAccumulator"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahClassSumsAccumulator.__init__","text":"Cheetah data class sum accumulator. This class accumulates information about the sum and virtual powder plot of all detector frames belonging to a specific data class. After data frame information has been added to the accumulator, the sum and virtual powder plot for the data class can be retrieved from the accumulator, either after a predefined number of frames has been added to the accumulator, or at will. Parameters: Name Type Description Default cheetah_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: class_sums_sending_interval: The number of detector frames that the accumulator can receive before returning the sum and virtual powder plot information and resetting the accumulator. required num_classes int The total number of data classes currently managed by Cheetah. 2","title":"__init__()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahClassSumsAccumulator.add_frame","text":"Adds a detector frame to the accumulator. This function adds information about a detector data frame to the accumulator. Parameters: Name Type Description Default class_number int The data class number to which the frame being added belongs. required frame_data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] Information about the detector data frame that must be added to the accumulator. required peak_list TypePeakList The list of peaks detected in the frame being added to the accumulator. required","title":"add_frame()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahClassSumsAccumulator.get_sums_for_sending","text":"Retrieves sum and virtual powder plot data from the accumulator. This function returns the data stored in the accumulator if the predefined number of frames has been added to the accumulator, or if the disregard_counter argument is True . Otherwise, returns None . Parameters: Name Type Description Default disregard_counter bool If True , the sending counter is disregarded and the class sums are returned. False Returns: Type Description Union [None, List [ TypeClassSumData ]] The sum and virtual powder plot stored by the accumulator, or None.","title":"get_sums_for_sending()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahClassSumsCollector","text":"See documentation for the __init__ function.","title":"CheetahClassSumsCollector"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahClassSumsCollector.__init__","text":"Cheetah data class sum collector. This class collects accumulated data class information retrieved from the processing nodes, and stores the cumulative total information associated with the data class. The information collected by this class can optionally be written to an HDF5 file. Parameters: Name Type Description Default cheetah_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: write_class_sums : Whether the information stored by the collector should be written to disk regularly. class_sums_update_interval : If the information stored by the collector must be written to disk (see the write_class_sums parameter), this parameter determines how many times the collector can be updated before the accumulated data is written to a file After the HDF5 has been written, the update count is reset. required num_classes int The total number of data classes currently managed by Cheetah. required","title":"__init__()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahClassSumsCollector.add_sums","text":"Adds information to the collectors Adds class sums information, retrieved from the processing nodes, to the collector. If the predefined number of updates has been reached, the function triggers the writing of the collector's data to an HDF5 file. Parameters: Name Type Description Default class_sums List [ TypeClassSumData ] The information to be added to the collector. required","title":"add_sums()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.CheetahClassSumsCollector.save_sums","text":"Saves the collector's data to an HDF5 file. This function saves the collector's accumulated data to an HDF5 file. It is called automatically by the collector when required, but can also be called manually.","title":"save_sums()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.HDF5Writer","text":"See documentation of the __init__ function.","title":"HDF5Writer"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.HDF5Writer.__init__","text":"HDF5 file writer for Cheetah. This class creates HDF5 data files to store the information processed by Cheetah. For each data event, this class saves into an HDF5 file a processed detector data frame, the list of Bragg peaks detected in the frame, and some additional information (timestamp, beam energy, detector distance, pump laser state). Parameters: Name Type Description Default cheetah_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: directory_for_processed_data: A relative or absolute path to the directory where the output files are written. compression: The compression filter to be applied to the data in the output file. hdf5_fields: A dictionary storing information about the internal HDF5 path where each data entry must be written. * The keys in the dictionary must store the names of data entries to write. * The corresponding dictionary values must contain the internal HDF5 paths where the entries must be written. processed_filename_prefix: A string that is prepended to the name of the output files. Optional. If the value of this entry is None, the string 'processed_' will be used as prefix. Defaults to None. processed_filename_extension: An extension string that id appended to the name of the output files. Optional. If the value of this entry is None, the string 'h5' is be used as extension. Defaults to None. compression_opts: The compression level to be used, if data compression is applied to the output files. The information in this entry only applies if the corresponding compression entry is not None, otherwise, it is ignored. Optional. If the value of this entry is None, the compression level is set to 4. Defaults to None. compression_shuffle: Whether the shuffle filter is applied. If the value of this entry is True, the filter is applied to the data being written, otherwise it is not. Defaults to None. max_num_peaks: The maximum number of detected Bragg peaks that are written in the HDF5 file for each event. Optional. If the value of this entry is None, only the first 1024 peaks detected in each frame are written to the output file. Defaults to None. required node_rank int The rank of the OM node that writes the data in the output files. required","title":"__init__()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.HDF5Writer.write_frame","text":"Writes data into an HDF5 data file. This function writes the provided data into an HDF5 data file, assuming that all the data belongs to the same processed data event. Parameters: Name Type Description Default processed_data Dict [ str , Any ] A dictionary containing the data to write into the HDF5 file. required","title":"write_frame()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.HDF5Writer.close","text":"Closes the file currently being written. This function closes the HDF5 file that the class is currently writing.","title":"close()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.HDF5Writer.get_current_filename","text":"Retrieves the path to the file currently being written. This function retrieves the full path to the file that the class is currently writing. Returns: Type Description pathlib . Path The path to the file currently being written.","title":"get_current_filename()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.HDF5Writer.get_num_written_frames","text":"Retrieves the number of data events already written to the current file. This function retrieves the number of data events that the class has already saved into the file that is currently writing. Returns: Type Description int The number of data events already written in the current file.","title":"get_num_written_frames()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.SumHDF5Writer","text":"See documentation of the __init__ function.","title":"SumHDF5Writer"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.SumHDF5Writer.__init__","text":"HDF5 writer for sum of frames. This class creates HDF5 data files to store the aggregate information collected by Cheetah. the function saves into HDF5 files sums of detector data frames, together with virtual powder patterns created using the Bragg peaks detected in them. Parameters: Name Type Description Default powder_class int A unique identifier for the sum of frames and virtual powder pattern being saved. required cheetah_parameters Dict [ str , Any ] A dictionary containing the Cheetah parameters. required","title":"__init__()"},{"location":"reference/om/lib/cheetah/#om.lib.cheetah.SumHDF5Writer.write_sums","text":"Writes aggregated detector frame data into an HDF5 file. This function writes the provided aggregated data into an HDF5 data file. Parameters: Name Type Description Default data TypeClassSumData A dictionary containing the aggregated data to write into the HDF5 file. required","title":"write_sums()"},{"location":"reference/om/lib/crystallography/","text":"crystallography Classes and function for processing of crystallography data. This module contains classes and functions that perform common data processing operations for Serial Crystallography (peak finding, radial profile analysis, plot generation, etc.). CrystallographyPeakFinding See documentation for the __init__ function. __init__ ( * , monitor_parameters , geometry_information ) Crystallography Bragg peak detection. This class stores all the information required to perform crystallography Bragg peak detection on a detector data frame, using one of the strategies available in OM. After the class has been initialized, it can be invoked to detect peaks in a data frame. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. The set of parameters must include a group called crystallography , which in turn must contain the following entries: peakfinding_algorithm : The detection strategy that should be used to detect the Bragg peaks in a detector data frame. Currently, the following strategies are available: peakfinder8_peak_detection : Instructs OM to use the peakfinder8 peak detection strategy. If this strategy is selected, the set of OM's configuration parameters must include a parameter group called peakfinder8_peak_detection with the entries required to fine-tune the peak-finding strategy. Please refer to the documentation of the Peakfinder8PeakDetection algorithm). min_num_peaks_for_hit : The minimum number of peaks that must be identified in a detector data frame for the related data event to be considered a hit. max_num_peaks_for_hit : The maximum number of peaks that must be identified in a detector data frame for the related data event to be considered a hit. required find_peaks ( detector_data ) Finds peaks in a detector data frame. This function detects peaks in the provided detector data frame, using the strategy that was selected when the class was initialized. The function returns information about the location, size and intensity of the peaks. Parameters: Name Type Description Default detector_data Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ]] The detector data frame on which the peak-finding operation must be performed. required Returns: Type Description TypePeakList A dictionary storing information about the detected peaks. CrystallographyPlots See documentation for the __init__ function. __init__ ( * , parameters , data_visualizer , pump_probe_experiment , bin_size ) Plots for crystallography data. This class stores all the information needed to generate and update three plots that summarize the state of a Serial Crystallography experiment: a Virtual Powder Pattern plot, a Hit Rate History plot and a Peakogram plot. Separate Hit Rate History plots for dark and pumped events can be generated for pump-probe experiment. After the class has been initialized, data event information can be added, and the updated plots can be retrieved and sent to external programs for visualization. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: peakogram_intensity_bin_size : The size, in ADU units, for each of the intensity bins in the Peakogram plot. peakogram_radius_bin_size : The size, in degrees, for each of the radius bins in the Peakogram plot. running_average_window_size : The size, in number of processed events, of the running window used to compute the smoothed Hit Rate History plot. required update_plots ( * , timestamp , peak_list , frame_is_hit , optical_laser_active ) Updates and recovers the crystallography data plots. This function uses the provided information to update all the crystallography data plots generated by this class. The function assumes that all the provided information refers to the same data event. After updating the data plots, the function returns all the information needed to display them in a graphical interface, in the format of a tuple containing the following entries: A list of timestamps for the events in the Hit Rate History plot. For pump-probe experiments, this list only includes events with an active optical laser. The Hit Rate for all the events in the Hit Rate History plot. For pump-probe experiments, this list only includes events with an active optical laser. A list of timestamps for events without an active optical laser in pump-probe experiments. For non-pump-probe experiments, this list just stores zero values. The Hit Rate for all the events without an active optical laser in the Hit Rate History plot of a pump-probe experiment. For non-pump-probe experiments, this list just stores zero values. A 2D array storing the pixel values of a Virtual Powder Plot image. A 2D array storing the pixel values of a Peakogram Plot image. The size, in degrees, for each of the radius bins in the Peakogram plot The size, in ADU units, for each of the intensity bins in the Peakogram plot. A list storing the x visualization coordinate of each Bragg peak identified in the data event provided to the update function . The coordinate refers to an array storing the assembled detector image, with the origin in the top left corner of the image. A list storing the y visualization coordinate of each Bragg peak identified in the data event provided to the update function . The coordinate refers to an array storing the assembled detector image, with the origin in the top left corner of the image. Parameters: Name Type Description Default timestamp float The timestamp of the event to which the provided data is attached.float, required peak_list TypePeakList Information about the Bragg peaks identified in the detector data frame attached to the data event. required frame_is_hit bool Whether the data event should be considered a hit, or not. required optical_laser_active bool Whether the optical laser is active or not in the provided data event. This information is only relevant for pump-probe experiments. required Returns: Type Description Tuple [ Deque [ float ], Deque [ float ], Deque [ float ], Deque [ float ], NDArray [ numpy . int_ ], NDArray [ numpy . float_ ], float , float , List [ float ], List [ float ]] The information needed to display the plots in a graphical interface. clear_plots () TODO: Add documentation.","title":"crystallography"},{"location":"reference/om/lib/crystallography/#om.lib.crystallography","text":"Classes and function for processing of crystallography data. This module contains classes and functions that perform common data processing operations for Serial Crystallography (peak finding, radial profile analysis, plot generation, etc.).","title":"crystallography"},{"location":"reference/om/lib/crystallography/#om.lib.crystallography.CrystallographyPeakFinding","text":"See documentation for the __init__ function.","title":"CrystallographyPeakFinding"},{"location":"reference/om/lib/crystallography/#om.lib.crystallography.CrystallographyPeakFinding.__init__","text":"Crystallography Bragg peak detection. This class stores all the information required to perform crystallography Bragg peak detection on a detector data frame, using one of the strategies available in OM. After the class has been initialized, it can be invoked to detect peaks in a data frame. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. The set of parameters must include a group called crystallography , which in turn must contain the following entries: peakfinding_algorithm : The detection strategy that should be used to detect the Bragg peaks in a detector data frame. Currently, the following strategies are available: peakfinder8_peak_detection : Instructs OM to use the peakfinder8 peak detection strategy. If this strategy is selected, the set of OM's configuration parameters must include a parameter group called peakfinder8_peak_detection with the entries required to fine-tune the peak-finding strategy. Please refer to the documentation of the Peakfinder8PeakDetection algorithm). min_num_peaks_for_hit : The minimum number of peaks that must be identified in a detector data frame for the related data event to be considered a hit. max_num_peaks_for_hit : The maximum number of peaks that must be identified in a detector data frame for the related data event to be considered a hit. required","title":"__init__()"},{"location":"reference/om/lib/crystallography/#om.lib.crystallography.CrystallographyPeakFinding.find_peaks","text":"Finds peaks in a detector data frame. This function detects peaks in the provided detector data frame, using the strategy that was selected when the class was initialized. The function returns information about the location, size and intensity of the peaks. Parameters: Name Type Description Default detector_data Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ]] The detector data frame on which the peak-finding operation must be performed. required Returns: Type Description TypePeakList A dictionary storing information about the detected peaks.","title":"find_peaks()"},{"location":"reference/om/lib/crystallography/#om.lib.crystallography.CrystallographyPlots","text":"See documentation for the __init__ function.","title":"CrystallographyPlots"},{"location":"reference/om/lib/crystallography/#om.lib.crystallography.CrystallographyPlots.__init__","text":"Plots for crystallography data. This class stores all the information needed to generate and update three plots that summarize the state of a Serial Crystallography experiment: a Virtual Powder Pattern plot, a Hit Rate History plot and a Peakogram plot. Separate Hit Rate History plots for dark and pumped events can be generated for pump-probe experiment. After the class has been initialized, data event information can be added, and the updated plots can be retrieved and sent to external programs for visualization. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: peakogram_intensity_bin_size : The size, in ADU units, for each of the intensity bins in the Peakogram plot. peakogram_radius_bin_size : The size, in degrees, for each of the radius bins in the Peakogram plot. running_average_window_size : The size, in number of processed events, of the running window used to compute the smoothed Hit Rate History plot. required","title":"__init__()"},{"location":"reference/om/lib/crystallography/#om.lib.crystallography.CrystallographyPlots.update_plots","text":"Updates and recovers the crystallography data plots. This function uses the provided information to update all the crystallography data plots generated by this class. The function assumes that all the provided information refers to the same data event. After updating the data plots, the function returns all the information needed to display them in a graphical interface, in the format of a tuple containing the following entries: A list of timestamps for the events in the Hit Rate History plot. For pump-probe experiments, this list only includes events with an active optical laser. The Hit Rate for all the events in the Hit Rate History plot. For pump-probe experiments, this list only includes events with an active optical laser. A list of timestamps for events without an active optical laser in pump-probe experiments. For non-pump-probe experiments, this list just stores zero values. The Hit Rate for all the events without an active optical laser in the Hit Rate History plot of a pump-probe experiment. For non-pump-probe experiments, this list just stores zero values. A 2D array storing the pixel values of a Virtual Powder Plot image. A 2D array storing the pixel values of a Peakogram Plot image. The size, in degrees, for each of the radius bins in the Peakogram plot The size, in ADU units, for each of the intensity bins in the Peakogram plot. A list storing the x visualization coordinate of each Bragg peak identified in the data event provided to the update function . The coordinate refers to an array storing the assembled detector image, with the origin in the top left corner of the image. A list storing the y visualization coordinate of each Bragg peak identified in the data event provided to the update function . The coordinate refers to an array storing the assembled detector image, with the origin in the top left corner of the image. Parameters: Name Type Description Default timestamp float The timestamp of the event to which the provided data is attached.float, required peak_list TypePeakList Information about the Bragg peaks identified in the detector data frame attached to the data event. required frame_is_hit bool Whether the data event should be considered a hit, or not. required optical_laser_active bool Whether the optical laser is active or not in the provided data event. This information is only relevant for pump-probe experiments. required Returns: Type Description Tuple [ Deque [ float ], Deque [ float ], Deque [ float ], Deque [ float ], NDArray [ numpy . int_ ], NDArray [ numpy . float_ ], float , float , List [ float ], List [ float ]] The information needed to display the plots in a graphical interface.","title":"update_plots()"},{"location":"reference/om/lib/crystallography/#om.lib.crystallography.CrystallographyPlots.clear_plots","text":"","title":"clear_plots()"},{"location":"reference/om/lib/crystallography/#om.lib.crystallography.CrystallographyPlots.clear_plots--todo-add-documentation","text":"","title":"TODO: Add documentation."},{"location":"reference/om/lib/event_management/","text":"event_management Classes and function for handling data events. This module contains classes and functions that manage and count data events processed by OM. EventCounter See documentation for the __init__ function. __init__ ( * , om_parameters , node_pool_size ) Event count and management. This class stores all the information needed to count data events processed by OM. After this class has been initialized, it can be provided with information about OM's processed data events. The class can then be invoked to generate speed reports, and can be queried about whether the number of processed events requires data to be broadcast to external programs. Parameters: Name Type Description Default om_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: speed_report_interval : The number of events that must pass between consecutive speed reports from OM. data_broadcast_interval : The number of events that must pas between consecutive data broadcasts from OM. hit_frame_sending_interval : How often the monitor should send full detector frames to external programs, when events are labelled as hits. If the value of this parameter is None, no hit frames are ever sent. If the value is a number, it is the average number of hit frames that OM skips before the next hit frame is broadcast to external programs. Defaults to None. non_hit_frame_sending_interval : How often the monitor should send full detector frames to external programs, when events are labelled as non-hits. If the value of this parameter is None, no non-hit frames are ever sent. If the value is a number, it is the average number of non-hit frames that OM skips before the next non-hit frame is broadcast to external programs. Defaults to None. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required add_hit_event () Adds hit events to the event counter. This function updates the number of hit events counted by this class. add_non_hit_event () Adds non-hit events to the event counter. This function updates the number of non-hit events counted by this class. get_start_timestamp () Gets timestamp of class initialization. This function returns the time at which the event counter class was initialized. This usually corresponds to the moment when OM started processing events. Returns: Type Description float The timestamp of for the initialization of the class. should_broadcast_data () Whether data should be broadcast to external programs. This function computes if the number of processed events requires data to be broadcast to external programs. Returns: Type Description bool Whether data should be broadcast. should_send_hit_frame () Whether a hit detector data frame should be broadcast to external programs. This function computes if the number of processed hit events requires a hit detector data frame to be broadcast to external programs. Returns: Type Description bool Whether a hit detector frame should be broadcast. should_send_non_hit_frame () Whether a non-hit detector data frame should be broadcast to external programs. This function computes if the number of processed non-hit events requires a non-hit detector data frame to be broadcast to external programs. Returns: Type Description bool Whether a non-hit detector frame should be broadcast. get_rank_for_frame_request () Gets the processing node rank to request a frame from. This function returns the rank of the processing node from which a hit or non-hit detector data frame should be requested for external broadcast. This class keeps an internal index of the nodes from which images have been requested in the past, and attempts to spread requests in a round-robin fashion amongst all processing nodes, with the goal of not overloading a single node with requests and of getting a representative sample of the data frames processed by each node. Returns: Type Description int The rank of the processing node from which a detector data frame should be int requested. get_num_events () Gets number of processed events. Returns: Type Description int The number of processed events. get_num_hits () Gets number of processed hit events. Returns: Type Description int The number of processed hit events. report_speed () Prints a speed report to the console. This prints the number of processed events to the console, together with an estimate of the processing speed, based on the number of events recorded by this class.","title":"event_management"},{"location":"reference/om/lib/event_management/#om.lib.event_management","text":"Classes and function for handling data events. This module contains classes and functions that manage and count data events processed by OM.","title":"event_management"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter","text":"See documentation for the __init__ function.","title":"EventCounter"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter.__init__","text":"Event count and management. This class stores all the information needed to count data events processed by OM. After this class has been initialized, it can be provided with information about OM's processed data events. The class can then be invoked to generate speed reports, and can be queried about whether the number of processed events requires data to be broadcast to external programs. Parameters: Name Type Description Default om_parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: speed_report_interval : The number of events that must pass between consecutive speed reports from OM. data_broadcast_interval : The number of events that must pas between consecutive data broadcasts from OM. hit_frame_sending_interval : How often the monitor should send full detector frames to external programs, when events are labelled as hits. If the value of this parameter is None, no hit frames are ever sent. If the value is a number, it is the average number of hit frames that OM skips before the next hit frame is broadcast to external programs. Defaults to None. non_hit_frame_sending_interval : How often the monitor should send full detector frames to external programs, when events are labelled as non-hits. If the value of this parameter is None, no non-hit frames are ever sent. If the value is a number, it is the average number of non-hit frames that OM skips before the next non-hit frame is broadcast to external programs. Defaults to None. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"__init__()"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter.add_hit_event","text":"Adds hit events to the event counter. This function updates the number of hit events counted by this class.","title":"add_hit_event()"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter.add_non_hit_event","text":"Adds non-hit events to the event counter. This function updates the number of non-hit events counted by this class.","title":"add_non_hit_event()"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter.get_start_timestamp","text":"Gets timestamp of class initialization. This function returns the time at which the event counter class was initialized. This usually corresponds to the moment when OM started processing events. Returns: Type Description float The timestamp of for the initialization of the class.","title":"get_start_timestamp()"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter.should_broadcast_data","text":"Whether data should be broadcast to external programs. This function computes if the number of processed events requires data to be broadcast to external programs. Returns: Type Description bool Whether data should be broadcast.","title":"should_broadcast_data()"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter.should_send_hit_frame","text":"Whether a hit detector data frame should be broadcast to external programs. This function computes if the number of processed hit events requires a hit detector data frame to be broadcast to external programs. Returns: Type Description bool Whether a hit detector frame should be broadcast.","title":"should_send_hit_frame()"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter.should_send_non_hit_frame","text":"Whether a non-hit detector data frame should be broadcast to external programs. This function computes if the number of processed non-hit events requires a non-hit detector data frame to be broadcast to external programs. Returns: Type Description bool Whether a non-hit detector frame should be broadcast.","title":"should_send_non_hit_frame()"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter.get_rank_for_frame_request","text":"Gets the processing node rank to request a frame from. This function returns the rank of the processing node from which a hit or non-hit detector data frame should be requested for external broadcast. This class keeps an internal index of the nodes from which images have been requested in the past, and attempts to spread requests in a round-robin fashion amongst all processing nodes, with the goal of not overloading a single node with requests and of getting a representative sample of the data frames processed by each node. Returns: Type Description int The rank of the processing node from which a detector data frame should be int requested.","title":"get_rank_for_frame_request()"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter.get_num_events","text":"Gets number of processed events. Returns: Type Description int The number of processed events.","title":"get_num_events()"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter.get_num_hits","text":"Gets number of processed hit events. Returns: Type Description int The number of processed hit events.","title":"get_num_hits()"},{"location":"reference/om/lib/event_management/#om.lib.event_management.EventCounter.report_speed","text":"Prints a speed report to the console. This prints the number of processed events to the console, together with an estimate of the processing speed, based on the number of events recorded by this class.","title":"report_speed()"},{"location":"reference/om/lib/exceptions/","text":"exceptions OM-specific exceptions and exception handling. This module contains a set of python exceptions that are specific to OM. OmException Bases: Exception Base class for OM's exceptions. All other OM-specific exceptions should inherit from this exception. OmConfigurationFileReadingError Bases: OmException Raised if an error happens while OM is reading its configuration file. OmConfigurationFileSyntaxError Bases: OmException Raised if there is a syntax error in OM's configuration file. OmDataExtractionError Bases: OmException Raised if an error happens during data extraction. OmHttpInterfaceInitializationError Bases: OmException Raised if an error happens while OM is accessing an HTTP/REST interface. OmGeometryError Bases: OmException Raised if there is syntax error in a geometry file read by OM. OmHdf5FileReadingError Bases: OmException Raised if there is an error while reading an HDF5 data file. OmHdf5UnsupportedDataFormat Bases: OmException Raised when trying to write an unsupported data format into an HDF5 data file. OmHdf5PathError Bases: OmException Raised if an internal HDF5 path cannot be found. OmInvalidSourceError Bases: OmException Raised if the format of the source string or file is not valid. OmInvalidZmqUrl Bases: OmException Raised if the format of a ZMQ socket's URL is not valid. OmMissingLayerClassError Bases: OmException Raised if a class that defines one of OM's layers cannot be found. OmMissingDataEventError Bases: OmException Raised if a data event cannot be retrieved from a data source. OmMissingDataSourceClassError Bases: OmException Raised if a Data Source class cannot be found in the Data Retrieval Layer. OmMissingDependencyError Bases: OmException Raised if one of the python module dependencies is not found on the system. OmMissingLayerModuleError Bases: OmException Raised if the python implementation of one of OM's layer cannot be found. OmMissingParameterError Bases: OmException Raised if a parameter is missing from OM's configuration file. OmMissingParameterGroupError Bases: OmException Raised if a parameter group is missing from OM's configuration file. OmWrongArrayShape Bases: OmException Raised if the shape of an array does not fit the data it should contain. OmWrongParameterTypeError Bases: OmException Raised if the type of an OM's configuration parameter is not correct.","title":"exceptions"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions","text":"OM-specific exceptions and exception handling. This module contains a set of python exceptions that are specific to OM.","title":"exceptions"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmException","text":"Bases: Exception Base class for OM's exceptions. All other OM-specific exceptions should inherit from this exception.","title":"OmException"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmConfigurationFileReadingError","text":"Bases: OmException Raised if an error happens while OM is reading its configuration file.","title":"OmConfigurationFileReadingError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmConfigurationFileSyntaxError","text":"Bases: OmException Raised if there is a syntax error in OM's configuration file.","title":"OmConfigurationFileSyntaxError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmDataExtractionError","text":"Bases: OmException Raised if an error happens during data extraction.","title":"OmDataExtractionError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmHttpInterfaceInitializationError","text":"Bases: OmException Raised if an error happens while OM is accessing an HTTP/REST interface.","title":"OmHttpInterfaceInitializationError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmGeometryError","text":"Bases: OmException Raised if there is syntax error in a geometry file read by OM.","title":"OmGeometryError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmHdf5FileReadingError","text":"Bases: OmException Raised if there is an error while reading an HDF5 data file.","title":"OmHdf5FileReadingError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmHdf5UnsupportedDataFormat","text":"Bases: OmException Raised when trying to write an unsupported data format into an HDF5 data file.","title":"OmHdf5UnsupportedDataFormat"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmHdf5PathError","text":"Bases: OmException Raised if an internal HDF5 path cannot be found.","title":"OmHdf5PathError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmInvalidSourceError","text":"Bases: OmException Raised if the format of the source string or file is not valid.","title":"OmInvalidSourceError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmInvalidZmqUrl","text":"Bases: OmException Raised if the format of a ZMQ socket's URL is not valid.","title":"OmInvalidZmqUrl"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmMissingLayerClassError","text":"Bases: OmException Raised if a class that defines one of OM's layers cannot be found.","title":"OmMissingLayerClassError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmMissingDataEventError","text":"Bases: OmException Raised if a data event cannot be retrieved from a data source.","title":"OmMissingDataEventError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmMissingDataSourceClassError","text":"Bases: OmException Raised if a Data Source class cannot be found in the Data Retrieval Layer.","title":"OmMissingDataSourceClassError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmMissingDependencyError","text":"Bases: OmException Raised if one of the python module dependencies is not found on the system.","title":"OmMissingDependencyError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmMissingLayerModuleError","text":"Bases: OmException Raised if the python implementation of one of OM's layer cannot be found.","title":"OmMissingLayerModuleError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmMissingParameterError","text":"Bases: OmException Raised if a parameter is missing from OM's configuration file.","title":"OmMissingParameterError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmMissingParameterGroupError","text":"Bases: OmException Raised if a parameter group is missing from OM's configuration file.","title":"OmMissingParameterGroupError"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmWrongArrayShape","text":"Bases: OmException Raised if the shape of an array does not fit the data it should contain.","title":"OmWrongArrayShape"},{"location":"reference/om/lib/exceptions/#om.lib.exceptions.OmWrongParameterTypeError","text":"Bases: OmException Raised if the type of an OM's configuration parameter is not correct.","title":"OmWrongParameterTypeError"},{"location":"reference/om/lib/geometry/","text":"geometry CrystFEL's geometry utilities. This module contains functions and classes that manipulate geometry information. TypeBeam Bases: TypedDict A dictionary storing information about the x-ray beam. Attributes: Name Type Description photon_energy float The photon energy of the beam in eV. photon_energy_from str The internal path to the photon energy information in an HDF5 data file, in case the beam energy information is extracted from it. photon_energy_scale float The scaling factor to be applied to the photon energy, in case the provided energy value is not in eV. TypePanel Bases: TypedDict A dictionary storing information about a detector panel. Attributes: Name Type Description cnx float The x coordinate of the corner of the panel in the detector reference system. cny float The y coordinate of the corner of the panel in the detector reference system. clen float The perpendicular distance, as reported by the facility, of the sample interaction point from the corner of the panel. clen_from str The internal path to the clen information in an HDF5 data file, in case the information is extracted from it. coffset float The offset to be applied to the clen value reported by the facility in order to determine the real perpendicular distance of the panel from the interaction point. mask str The internal path, in an HDF5 data file, to the mask data for the panel. mask_file str The name of the HDF5 data file in which the mask data for the panel can be found. satmap str The internal path, in an HDF5 data file, to the per-pixel saturation map for the panel. satmap_file str The name of the HDF5 data file in which the per-pixel saturation map for the panel can be found. res float The size of the pixels that make up the the panel (in pixels per meter). badrow str The readout direction for the panel, for filtering out clusters of peaks. The value corresponding to this key must be either x or y . no_index bool Wether the panel should be considered entirely bad. The panel will be considered bad if the value corresponding to this key is non-zero. adu_per_photon float The number of ADUs per photon for the panel. max_adu float The ADU value above which a pixel of the panel should be considered unreliable. data str The internal path, in an HDF5 data file, to the data block where the panel data is stored. adu_per_eV float The number of ADUs per eV of photon energy for the panel. dim_structure List [ Union [ int , str , None]] A description of the internal layout of the data block storing the panel's data. The value corresponding to this key is a list of strings which define the role of each axis in the data block. See the crystfel_geometry man page for a detailed explanation. fsx float The fs->x component of the matrix used to transform pixel indexes into detector reference system coordinates. fsy float The fs->y component of the matrix used to transform pixel indexes into detector reference system coordinates. fsz float The fs->z component of the matrix used to transform pixel indexes into detector reference system coordinates. ssx float The ss->x component of the matrix used to transform pixel indexes into detector reference system coordinates. ssy float The ss->y component of the matrix used to transform pixel indexes into detector reference system coordinates. ssz float The ss->z component of the matrix used to transform pixel indexes into detector reference system coordinates. rail_x float The x component, in the detector reference system, of the direction of the rail along which the detector moves. rail_y float The y component, in the detector reference system, of the direction of the rail along which the detector moves. rail_z float The z component, in the detector reference system, of the direction of the rail along which the detector moves. clen_for_centering float The perpendicular distance of the origin of the detector reference system from the interaction point, as reported by the facility, xfs float The x->fs component of the matrix used to transform detector reference system coordinates into pixel indexes. yfs float The y->fs component of the matrix used to transform detector reference system coordinates into pixel indexes. xss float The x->ss component of the matrix used to transform detector reference system coordinates into pixel indexes. yss float The y->ss component of the matrix used to transform detector reference system coordinates into pixel indexes. orig_min_fs int The initial fs index of the panel data in the data block where it is stored. orig_max_fs int The final (inclusive) fs index of the panel data in the data block where it is stored. orig_min_ss int The initial ss index of the panel data in the data block where it is stored. orig_max_ss int The final (inclusive) fs index of the panel data in the data block where it is stored. w int The width of the panel in pixels. h int The height of the panel in pixels. TypeBadRegion Bases: TypedDict A dictionary storing information about a bad region of a detector. Attributes: Name Type Description panel str The name of the panel in which the bad region lies. min_x float The initial x coordinate of the bad region in the detector reference system. max_x float The final x coordinate of the bad region in the detector reference system. min_y float The initial y coordinate of the bad region in the detector reference system. max_y float The final y coordinate of the bad region in the detector reference system. min_fs int The initial fs index of the bad region in the block where the panel data is stored. max_fs int The final (inclusive) fs index of the bad region in the block where the panel data is stored. min_ss int The initial ss index of the bad region in the block where the panel data is stored. max_ss int The final (inclusive) ss index of the bad region in the block where the panel data is stored. is_fsss int Whether the fs,ss definition of the bad region (as opposed to the x,y-based one) should be considered. In the first case, the min_fs, max_fs, min_ss, and max_ss entries in this dictionary will define the bad region. In the second case, the min_x, max_x, min_y, and max_y entries will. If the value corresponding to this key is 1, the fs,ss-based definition will be considered valid. Otherwise, the x,y definition will be used. TypeDetector Bases: TypedDict A dictionary storing information about a detector. Attributes: Name Type Description panels Dict [ str , TypePanel ] The panels in the detector. The value corresponding to this key is dictionary containing information about the panels that make up the detector. In the dictionary, the keys are the panel names, and the values are TypePanel dictionaries. bad Dict [ str , TypeBadRegion ] The bad regions in the detector. The value corresponding to this key is a dictionary containing information about the bad regions in the detector. In the dictionary, the keys are bad region names, and the values are TypeBadRegion dictionaries. mask_bad int The value used in a bad pixel mask to label a pixel as bad. mask_good int The value used in a bad pixel mask to label a pixel as good. rigid_groups Dict [ str , List [ str ]] The rigid groups of panels in the detector. The value corresponding to this key is a dictionary containing information about the rigid groups. In the dictionary, the keys are names of rigid groups and the values are lists storing the names of the panels belonging to each group. rigid_group_collections Dict [ str , List [ str ]] The collections of rigid groups of panels in the detector. The value corresponding to this key is a dictionary containing information about the rigid group collections. In the dictionary, the keys are names of rigid group collections and the values are lists storing the names of the rigid groups belonging to the each collection. furthest_out_panel str The name of the panel which contains the pixel that is the furthest away from the center of the detector reference system. furthest_out_fs float The fs coordinate, within its panel, of the pixel that is the furthest away from the center of the detector reference system. furthest_out_ss float The ss coordinate, within its panel, of the pixel that is the furthest away from the center of the detector reference system. furthest_in_panel str The name of the panel which contains the closest pixel to the center of the detector reference system. furthest_in_fs float The fs coordinate, within its panel, of the closest pixel to the center of the detector reference system. furthest_in_ss float The ss coordinate, within its panel, of the closest pixel to the center of the detector reference system. TypeDetectorLayoutInformation Bases: TypedDict Detector layout information for the peakfinder8 algorithm. This typed dictionary stores information about the internal data layout of a detector data frame (number and size of ASICs, etc.). The information is needed by the Peakfinder8PeakDetection algorithm, and is usually retrieved via the get_layout_info function. Attributes: Name Type Description asic_nx int The fs size in pixels of each detector panel in the data frame. asic_ny int The ss size in pixels of each detector panel in the data frame. nasics_x int The number of detector panels along the fs axis of the data frame. nasics_y int The number of detector panels along the ss axis of the data frame. TypePixelMaps Bases: TypedDict A dictionary storing a set of pixel maps This dictionary stores a set of look-up pixels maps. Each map stores, for each pixel in a detector data frame, the value of a specific coordinate. All coordinates in this set of maps are assumed to be relative to the detector's reference system. Attributes: Name Type Description x NDArray [ numpy . float_ ] A pixel map for the x coordinate. y NDArray [ numpy . float_ ] A pixel map for the y coordinate. z NDArray [ numpy . float_ ] A pixel map for the z coordinate. radius NDArray [ numpy . float_ ] A pixel map storing the distance of each pixel from the center of the detector reference system. phi NDArray [ numpy . float_ ] A pixel map storing, for each pixel, the amplitude of the angle drawn by the pixel, the center of the detector reference system, and the x axis. TypeVisualizationPixelMaps Bases: TypedDict TODO: Fix documentation A dictionary storing a set of pixel maps used for visualization. This dictionary stores a set of look-up pixels maps. Each map stores, for each pixel in a detector data frame, the value of a specific coordinate. This set of pixel maps is supposed to be used for visualization: all coordinates are assumed to refer to a cartesian reference system mapped on a 2D array storing pixel information, with origin in the top left corner of the array Attributes: Name Type Description x NDArray [ numpy . int_ ] A pixel map for the x coordinate. y NDArray [ numpy . int_ ] A pixel map for the y coordinate. GeometryInformation See documentation for the __init__ function. __init__ ( * , geometry_description , geometry_format ) Detector geometry information. This class stores the all the information describing the geometry of an area detector. It is initialized with a block of text containing the description of the geometry of thr detector (usually the content of a geometry file), and with a string specifying the format of the provided information. Once the class has been initialized, methods can be invoked to recover information about the geometry: lookup-pixel maps, detector's pixel size, etc. Parameters: Name Type Description Default geometry_description List [ str ] a block of text describing the detector's geometry required geometry_format str a string describing the format of the provided geometry description. Currently the following formats are supported: crystfel : the geometry format used by the CrystFEL software package.processing of crystallography data. The format is fully documented in CrystFEL's man pages required Raises: Type Description OmGeometryError Raised if the format of the provided geometry information is not supported. from_file ( * , geometry_filename , geometry_format = None ) classmethod Reads geometry description from file. This class method initializes the GeometryInformation class from a file, rather than from a block of text. Parameters: Name Type Description Default geometry_filename str the relative or absolute path to file containing the description of the geometry of an area detector required geometry_format Union [ str , None] a string describing the format of the geometry description. Currently the following formats are supported: crystfel : the geometry format used by the CrystFEL software package. The format is fully documented in the CrystFEL's man pages None Raises: Type Description OmGeometryError Raised if the format of the geometry file cannot be inferred from the file's extension. get_pixel_maps () Retrieves pixel maps. This function retrieves look-up pixel maps storing coordinate information for each pixel of a detector data frame. Returns: Type Description TypePixelMaps The set of look-up pixel maps. get_layout_info () Retrieves detector layout information for the peakfinder8 algorithm. This function retrieves information about the internal layout of a detector data frame (number and size of ASICs, etc.). This information is needed by the peakfinder8 peak detection algorithm. Returns: Type Description TypeDetectorLayoutInformation Internal layout of a detector data frame. get_detector_distance_offset () Retrieves detector distance offset information. This function retrieves the offset that should be added to the nominal detector distance provided by the facility to obtain the real detector distance (i.e., the distance between the sample interaction point and the area detector where data is recorded. This value is often stored together with the geometry information, but if it is not available, the function returns None. Returns: Type Description float The detector distance offset in meters, or None if the information is not float available. get_pixel_size () Retrieves the size of an area detector pixel. This function retrieves information about the size of each pixel making up an area detector. All pixels in the detector are assumed to have the same size, and have a square shape. The value returned by this function describes the length of the side of each pixel. Returns: Type Description float Length of the pixel's side in meters. DataVisualizer See documentation for the __init__ function. __init__ ( * , pixel_maps ) Visualization of detector data with geometry applied. This class stores all the information needed to display detector data with geometry applied to it. Once the class has been initialized, it can be invoked to retrieve visualization look-up pixel maps and other information needed to display the data. A detector frame is assumed to be visualized in the form of a 2D image showing an approximate representation of the physical layout of the detector. Parameters: Name Type Description Default pixel_maps TypePixelMaps A set of look-up pixel maps storing coordinate information for each pixel in detector data frame. required get_pixel_maps () Retrieves pixel maps. This function just returns the pixel maps that were used to initialize the class. Returns: Type Description TypePixelMaps A set of look-up pixel maps storing coordinate information for each pixel TypePixelMaps in detector data frame. get_visualization_pixel_maps () Retrieves visualization pixel maps. This function retrieves a set of visualization look-up pixel maps. These pixel maps store the information needed to display a detector data frame. with geometry information applied to it, in the form of a 2D image. Returns: Type Description TypeVisualizationPixelMaps A set of look-up pixel maps storing the information needed to display a TypeVisualizationPixelMaps detector data frame as a 2D image. get_min_array_shape_for_visualization () Retrieves the minimum shape of an array that can store a detector frame image. Computes the minimum size of an array that can hold the pixel information for the image representation of a detector data frame. The size of the array is enough to include the full representation of the data frame with geometry applied. The size of the array also calculated assuming that the center of the detector's reference system is kept at the center of the detector image. Returns: Type Description int The minimum shape, in numpy format, of an array storing the image int representation of a detector data frame. visualize_data ( * , data , array_for_visualization = None ) Applies geometry information to a detector data frame. This function applies the geometry information stored by the class to a provided detector data frame. It returns a 2D array storing the pixel information of an image representing the data frame with geometry applied. If a pre-existing visualization array is provided, with exactly the shape returned by the get_min_array_shape_for_visualization function, this function can used it to store the pixel information. Otherwise the function creates a new array with the appropriate shape. Parameters: Name Type Description Default data Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ]] The detector data frame on which geometry should be applied. required array_for_visualization Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ], None] Either a pre-existing array of the correct size, in which case the array is used to store the pixel information of the detector data frame image, or None. If the value of this argument is None, an array with the appropriate shape is generated by the function. Optional. Defaults to None. None Returns: Type Description Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ]] An array containing pixel information for the image representation of the Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ]] provided detector data frame. Raises: Type Description OmWrongArrayShape Raised if the provided array has the wrong shape and cannot be used to store the pixel information.","title":"geometry"},{"location":"reference/om/lib/geometry/#om.lib.geometry","text":"CrystFEL's geometry utilities. This module contains functions and classes that manipulate geometry information.","title":"geometry"},{"location":"reference/om/lib/geometry/#om.lib.geometry.TypeBeam","text":"Bases: TypedDict A dictionary storing information about the x-ray beam. Attributes: Name Type Description photon_energy float The photon energy of the beam in eV. photon_energy_from str The internal path to the photon energy information in an HDF5 data file, in case the beam energy information is extracted from it. photon_energy_scale float The scaling factor to be applied to the photon energy, in case the provided energy value is not in eV.","title":"TypeBeam"},{"location":"reference/om/lib/geometry/#om.lib.geometry.TypePanel","text":"Bases: TypedDict A dictionary storing information about a detector panel. Attributes: Name Type Description cnx float The x coordinate of the corner of the panel in the detector reference system. cny float The y coordinate of the corner of the panel in the detector reference system. clen float The perpendicular distance, as reported by the facility, of the sample interaction point from the corner of the panel. clen_from str The internal path to the clen information in an HDF5 data file, in case the information is extracted from it. coffset float The offset to be applied to the clen value reported by the facility in order to determine the real perpendicular distance of the panel from the interaction point. mask str The internal path, in an HDF5 data file, to the mask data for the panel. mask_file str The name of the HDF5 data file in which the mask data for the panel can be found. satmap str The internal path, in an HDF5 data file, to the per-pixel saturation map for the panel. satmap_file str The name of the HDF5 data file in which the per-pixel saturation map for the panel can be found. res float The size of the pixels that make up the the panel (in pixels per meter). badrow str The readout direction for the panel, for filtering out clusters of peaks. The value corresponding to this key must be either x or y . no_index bool Wether the panel should be considered entirely bad. The panel will be considered bad if the value corresponding to this key is non-zero. adu_per_photon float The number of ADUs per photon for the panel. max_adu float The ADU value above which a pixel of the panel should be considered unreliable. data str The internal path, in an HDF5 data file, to the data block where the panel data is stored. adu_per_eV float The number of ADUs per eV of photon energy for the panel. dim_structure List [ Union [ int , str , None]] A description of the internal layout of the data block storing the panel's data. The value corresponding to this key is a list of strings which define the role of each axis in the data block. See the crystfel_geometry man page for a detailed explanation. fsx float The fs->x component of the matrix used to transform pixel indexes into detector reference system coordinates. fsy float The fs->y component of the matrix used to transform pixel indexes into detector reference system coordinates. fsz float The fs->z component of the matrix used to transform pixel indexes into detector reference system coordinates. ssx float The ss->x component of the matrix used to transform pixel indexes into detector reference system coordinates. ssy float The ss->y component of the matrix used to transform pixel indexes into detector reference system coordinates. ssz float The ss->z component of the matrix used to transform pixel indexes into detector reference system coordinates. rail_x float The x component, in the detector reference system, of the direction of the rail along which the detector moves. rail_y float The y component, in the detector reference system, of the direction of the rail along which the detector moves. rail_z float The z component, in the detector reference system, of the direction of the rail along which the detector moves. clen_for_centering float The perpendicular distance of the origin of the detector reference system from the interaction point, as reported by the facility, xfs float The x->fs component of the matrix used to transform detector reference system coordinates into pixel indexes. yfs float The y->fs component of the matrix used to transform detector reference system coordinates into pixel indexes. xss float The x->ss component of the matrix used to transform detector reference system coordinates into pixel indexes. yss float The y->ss component of the matrix used to transform detector reference system coordinates into pixel indexes. orig_min_fs int The initial fs index of the panel data in the data block where it is stored. orig_max_fs int The final (inclusive) fs index of the panel data in the data block where it is stored. orig_min_ss int The initial ss index of the panel data in the data block where it is stored. orig_max_ss int The final (inclusive) fs index of the panel data in the data block where it is stored. w int The width of the panel in pixels. h int The height of the panel in pixels.","title":"TypePanel"},{"location":"reference/om/lib/geometry/#om.lib.geometry.TypeBadRegion","text":"Bases: TypedDict A dictionary storing information about a bad region of a detector. Attributes: Name Type Description panel str The name of the panel in which the bad region lies. min_x float The initial x coordinate of the bad region in the detector reference system. max_x float The final x coordinate of the bad region in the detector reference system. min_y float The initial y coordinate of the bad region in the detector reference system. max_y float The final y coordinate of the bad region in the detector reference system. min_fs int The initial fs index of the bad region in the block where the panel data is stored. max_fs int The final (inclusive) fs index of the bad region in the block where the panel data is stored. min_ss int The initial ss index of the bad region in the block where the panel data is stored. max_ss int The final (inclusive) ss index of the bad region in the block where the panel data is stored. is_fsss int Whether the fs,ss definition of the bad region (as opposed to the x,y-based one) should be considered. In the first case, the min_fs, max_fs, min_ss, and max_ss entries in this dictionary will define the bad region. In the second case, the min_x, max_x, min_y, and max_y entries will. If the value corresponding to this key is 1, the fs,ss-based definition will be considered valid. Otherwise, the x,y definition will be used.","title":"TypeBadRegion"},{"location":"reference/om/lib/geometry/#om.lib.geometry.TypeDetector","text":"Bases: TypedDict A dictionary storing information about a detector. Attributes: Name Type Description panels Dict [ str , TypePanel ] The panels in the detector. The value corresponding to this key is dictionary containing information about the panels that make up the detector. In the dictionary, the keys are the panel names, and the values are TypePanel dictionaries. bad Dict [ str , TypeBadRegion ] The bad regions in the detector. The value corresponding to this key is a dictionary containing information about the bad regions in the detector. In the dictionary, the keys are bad region names, and the values are TypeBadRegion dictionaries. mask_bad int The value used in a bad pixel mask to label a pixel as bad. mask_good int The value used in a bad pixel mask to label a pixel as good. rigid_groups Dict [ str , List [ str ]] The rigid groups of panels in the detector. The value corresponding to this key is a dictionary containing information about the rigid groups. In the dictionary, the keys are names of rigid groups and the values are lists storing the names of the panels belonging to each group. rigid_group_collections Dict [ str , List [ str ]] The collections of rigid groups of panels in the detector. The value corresponding to this key is a dictionary containing information about the rigid group collections. In the dictionary, the keys are names of rigid group collections and the values are lists storing the names of the rigid groups belonging to the each collection. furthest_out_panel str The name of the panel which contains the pixel that is the furthest away from the center of the detector reference system. furthest_out_fs float The fs coordinate, within its panel, of the pixel that is the furthest away from the center of the detector reference system. furthest_out_ss float The ss coordinate, within its panel, of the pixel that is the furthest away from the center of the detector reference system. furthest_in_panel str The name of the panel which contains the closest pixel to the center of the detector reference system. furthest_in_fs float The fs coordinate, within its panel, of the closest pixel to the center of the detector reference system. furthest_in_ss float The ss coordinate, within its panel, of the closest pixel to the center of the detector reference system.","title":"TypeDetector"},{"location":"reference/om/lib/geometry/#om.lib.geometry.TypeDetectorLayoutInformation","text":"Bases: TypedDict Detector layout information for the peakfinder8 algorithm. This typed dictionary stores information about the internal data layout of a detector data frame (number and size of ASICs, etc.). The information is needed by the Peakfinder8PeakDetection algorithm, and is usually retrieved via the get_layout_info function. Attributes: Name Type Description asic_nx int The fs size in pixels of each detector panel in the data frame. asic_ny int The ss size in pixels of each detector panel in the data frame. nasics_x int The number of detector panels along the fs axis of the data frame. nasics_y int The number of detector panels along the ss axis of the data frame.","title":"TypeDetectorLayoutInformation"},{"location":"reference/om/lib/geometry/#om.lib.geometry.TypePixelMaps","text":"Bases: TypedDict A dictionary storing a set of pixel maps This dictionary stores a set of look-up pixels maps. Each map stores, for each pixel in a detector data frame, the value of a specific coordinate. All coordinates in this set of maps are assumed to be relative to the detector's reference system. Attributes: Name Type Description x NDArray [ numpy . float_ ] A pixel map for the x coordinate. y NDArray [ numpy . float_ ] A pixel map for the y coordinate. z NDArray [ numpy . float_ ] A pixel map for the z coordinate. radius NDArray [ numpy . float_ ] A pixel map storing the distance of each pixel from the center of the detector reference system. phi NDArray [ numpy . float_ ] A pixel map storing, for each pixel, the amplitude of the angle drawn by the pixel, the center of the detector reference system, and the x axis.","title":"TypePixelMaps"},{"location":"reference/om/lib/geometry/#om.lib.geometry.TypeVisualizationPixelMaps","text":"Bases: TypedDict","title":"TypeVisualizationPixelMaps"},{"location":"reference/om/lib/geometry/#om.lib.geometry.TypeVisualizationPixelMaps--todo-fix-documentation","text":"A dictionary storing a set of pixel maps used for visualization. This dictionary stores a set of look-up pixels maps. Each map stores, for each pixel in a detector data frame, the value of a specific coordinate. This set of pixel maps is supposed to be used for visualization: all coordinates are assumed to refer to a cartesian reference system mapped on a 2D array storing pixel information, with origin in the top left corner of the array Attributes: Name Type Description x NDArray [ numpy . int_ ] A pixel map for the x coordinate. y NDArray [ numpy . int_ ] A pixel map for the y coordinate.","title":"TODO: Fix documentation"},{"location":"reference/om/lib/geometry/#om.lib.geometry.GeometryInformation","text":"See documentation for the __init__ function.","title":"GeometryInformation"},{"location":"reference/om/lib/geometry/#om.lib.geometry.GeometryInformation.__init__","text":"Detector geometry information. This class stores the all the information describing the geometry of an area detector. It is initialized with a block of text containing the description of the geometry of thr detector (usually the content of a geometry file), and with a string specifying the format of the provided information. Once the class has been initialized, methods can be invoked to recover information about the geometry: lookup-pixel maps, detector's pixel size, etc. Parameters: Name Type Description Default geometry_description List [ str ] a block of text describing the detector's geometry required geometry_format str a string describing the format of the provided geometry description. Currently the following formats are supported: crystfel : the geometry format used by the CrystFEL software package.processing of crystallography data. The format is fully documented in CrystFEL's man pages required Raises: Type Description OmGeometryError Raised if the format of the provided geometry information is not supported.","title":"__init__()"},{"location":"reference/om/lib/geometry/#om.lib.geometry.GeometryInformation.from_file","text":"Reads geometry description from file. This class method initializes the GeometryInformation class from a file, rather than from a block of text. Parameters: Name Type Description Default geometry_filename str the relative or absolute path to file containing the description of the geometry of an area detector required geometry_format Union [ str , None] a string describing the format of the geometry description. Currently the following formats are supported: crystfel : the geometry format used by the CrystFEL software package. The format is fully documented in the CrystFEL's man pages None Raises: Type Description OmGeometryError Raised if the format of the geometry file cannot be inferred from the file's extension.","title":"from_file()"},{"location":"reference/om/lib/geometry/#om.lib.geometry.GeometryInformation.get_pixel_maps","text":"Retrieves pixel maps. This function retrieves look-up pixel maps storing coordinate information for each pixel of a detector data frame. Returns: Type Description TypePixelMaps The set of look-up pixel maps.","title":"get_pixel_maps()"},{"location":"reference/om/lib/geometry/#om.lib.geometry.GeometryInformation.get_layout_info","text":"Retrieves detector layout information for the peakfinder8 algorithm. This function retrieves information about the internal layout of a detector data frame (number and size of ASICs, etc.). This information is needed by the peakfinder8 peak detection algorithm. Returns: Type Description TypeDetectorLayoutInformation Internal layout of a detector data frame.","title":"get_layout_info()"},{"location":"reference/om/lib/geometry/#om.lib.geometry.GeometryInformation.get_detector_distance_offset","text":"Retrieves detector distance offset information. This function retrieves the offset that should be added to the nominal detector distance provided by the facility to obtain the real detector distance (i.e., the distance between the sample interaction point and the area detector where data is recorded. This value is often stored together with the geometry information, but if it is not available, the function returns None. Returns: Type Description float The detector distance offset in meters, or None if the information is not float available.","title":"get_detector_distance_offset()"},{"location":"reference/om/lib/geometry/#om.lib.geometry.GeometryInformation.get_pixel_size","text":"Retrieves the size of an area detector pixel. This function retrieves information about the size of each pixel making up an area detector. All pixels in the detector are assumed to have the same size, and have a square shape. The value returned by this function describes the length of the side of each pixel. Returns: Type Description float Length of the pixel's side in meters.","title":"get_pixel_size()"},{"location":"reference/om/lib/geometry/#om.lib.geometry.DataVisualizer","text":"See documentation for the __init__ function.","title":"DataVisualizer"},{"location":"reference/om/lib/geometry/#om.lib.geometry.DataVisualizer.__init__","text":"Visualization of detector data with geometry applied. This class stores all the information needed to display detector data with geometry applied to it. Once the class has been initialized, it can be invoked to retrieve visualization look-up pixel maps and other information needed to display the data. A detector frame is assumed to be visualized in the form of a 2D image showing an approximate representation of the physical layout of the detector. Parameters: Name Type Description Default pixel_maps TypePixelMaps A set of look-up pixel maps storing coordinate information for each pixel in detector data frame. required","title":"__init__()"},{"location":"reference/om/lib/geometry/#om.lib.geometry.DataVisualizer.get_pixel_maps","text":"Retrieves pixel maps. This function just returns the pixel maps that were used to initialize the class. Returns: Type Description TypePixelMaps A set of look-up pixel maps storing coordinate information for each pixel TypePixelMaps in detector data frame.","title":"get_pixel_maps()"},{"location":"reference/om/lib/geometry/#om.lib.geometry.DataVisualizer.get_visualization_pixel_maps","text":"Retrieves visualization pixel maps. This function retrieves a set of visualization look-up pixel maps. These pixel maps store the information needed to display a detector data frame. with geometry information applied to it, in the form of a 2D image. Returns: Type Description TypeVisualizationPixelMaps A set of look-up pixel maps storing the information needed to display a TypeVisualizationPixelMaps detector data frame as a 2D image.","title":"get_visualization_pixel_maps()"},{"location":"reference/om/lib/geometry/#om.lib.geometry.DataVisualizer.get_min_array_shape_for_visualization","text":"Retrieves the minimum shape of an array that can store a detector frame image. Computes the minimum size of an array that can hold the pixel information for the image representation of a detector data frame. The size of the array is enough to include the full representation of the data frame with geometry applied. The size of the array also calculated assuming that the center of the detector's reference system is kept at the center of the detector image. Returns: Type Description int The minimum shape, in numpy format, of an array storing the image int representation of a detector data frame.","title":"get_min_array_shape_for_visualization()"},{"location":"reference/om/lib/geometry/#om.lib.geometry.DataVisualizer.visualize_data","text":"Applies geometry information to a detector data frame. This function applies the geometry information stored by the class to a provided detector data frame. It returns a 2D array storing the pixel information of an image representing the data frame with geometry applied. If a pre-existing visualization array is provided, with exactly the shape returned by the get_min_array_shape_for_visualization function, this function can used it to store the pixel information. Otherwise the function creates a new array with the appropriate shape. Parameters: Name Type Description Default data Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ]] The detector data frame on which geometry should be applied. required array_for_visualization Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ], None] Either a pre-existing array of the correct size, in which case the array is used to store the pixel information of the detector data frame image, or None. If the value of this argument is None, an array with the appropriate shape is generated by the function. Optional. Defaults to None. None Returns: Type Description Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ]] An array containing pixel information for the image representation of the Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ]] provided detector data frame. Raises: Type Description OmWrongArrayShape Raised if the provided array has the wrong shape and cannot be used to store the pixel information.","title":"visualize_data()"},{"location":"reference/om/lib/hdf5/","text":"hdf5 HDF5 writing. This module contains classes and functions that allow OM to write data to files in HDF5 format. load_hdf5_data ( * , hdf5_filename , hdf5_path ) Loads data from an HDF5 file. This function loads data from an HDF5 file. Parameters: Name Type Description Default hdf5_filename str The relative of absolute path to an HDF5 file containing the data to load. required hdf5_path str The internal path, within the HDF5 file, to the block storing the data to load. required Returns: Type Description Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ], None] The loaded data array. Raises: Type Description OmHdf5FileReadingError Raised when an error is encountered while reading the file. parse_parameters_and_load_hdf5_data ( * , parameters , hdf5_filename_parameter , hdf5_path_parameter ) Reads data from an HDF5 file identified by a set of configuration parameters. This function retrieves the path to a data file, and the internal HDF5 path to a block storing data, from a set of configuration parameters, then loads the data. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: An entry, whose name is specified by the hdf5_filename_parameter argument of this function, storing the relative of absolute path to an HDF5 file containing the data to load. An entry, whose name is specified by the hdf5_path_parameter argument argument of this function, storing the internal path, within the HDF5 file, to the block storing the data to load. required hdf5_filename_parameter str The name of the entry in the parameter set that stores the path to the data file. required hdf5_path_parameter str The name of the entry in the parameter set that stores the internal HDF5 path to the block storing the data. required Returns: Type Description Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ], None] The loaded data.","title":"hdf5"},{"location":"reference/om/lib/hdf5/#om.lib.hdf5","text":"HDF5 writing. This module contains classes and functions that allow OM to write data to files in HDF5 format.","title":"hdf5"},{"location":"reference/om/lib/hdf5/#om.lib.hdf5.load_hdf5_data","text":"Loads data from an HDF5 file. This function loads data from an HDF5 file. Parameters: Name Type Description Default hdf5_filename str The relative of absolute path to an HDF5 file containing the data to load. required hdf5_path str The internal path, within the HDF5 file, to the block storing the data to load. required Returns: Type Description Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ], None] The loaded data array. Raises: Type Description OmHdf5FileReadingError Raised when an error is encountered while reading the file.","title":"load_hdf5_data()"},{"location":"reference/om/lib/hdf5/#om.lib.hdf5.parse_parameters_and_load_hdf5_data","text":"Reads data from an HDF5 file identified by a set of configuration parameters. This function retrieves the path to a data file, and the internal HDF5 path to a block storing data, from a set of configuration parameters, then loads the data. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: An entry, whose name is specified by the hdf5_filename_parameter argument of this function, storing the relative of absolute path to an HDF5 file containing the data to load. An entry, whose name is specified by the hdf5_path_parameter argument argument of this function, storing the internal path, within the HDF5 file, to the block storing the data to load. required hdf5_filename_parameter str The name of the entry in the parameter set that stores the path to the data file. required hdf5_path_parameter str The name of the entry in the parameter set that stores the internal HDF5 path to the block storing the data. required Returns: Type Description Union [ NDArray [ numpy . int_ ], NDArray [ numpy . float_ ], None] The loaded data.","title":"parse_parameters_and_load_hdf5_data()"},{"location":"reference/om/lib/layer_management/","text":"layer_management OM's layer management. This module contains classes and functions that mange OM's various data processing and extraction layers. import_class_from_layer ( * , layer_name , class_name ) Imports a class from an OM's layer. This function imports a class, identified by the class_name argument, from a layer identified by the layer_name argument. The function looks for the python module containing the layer code in the current directory first. Specifically, it looks for a python file with the same name as the layer. If the function cannot fine the file in the current directory, it imports the layer from the OM's normal installation directories. It then proceeds to import the requested class from the layer module. Parameters: Name Type Description Default layer_name str The name of the layer from which the class should be imported. required class_name str The name of the class to import. required Returns: Type Description Union [ Type [ OmParallelizationProtocol ], Type [ OmProcessingProtocol ], Type [ OmDataRetrievalProtocol ], None] The imported class. Raises: Type Description OmMissingLayerClass Raised when the requested class cannot be found in the specified Python module. OmMissingLayerModuleFile Raised when the requested python module cannot be found. filter_data_sources ( * , data_sources , required_data ) Filters a list Data Sources. This function filters the list of all Data Sources associated with a Data Retrieval class, returning only the subset of Data Sources needed to retrieve the data requested by the user. Parameters: Name Type Description Default data_sources Dict [ str , OmDataSourceProtocol ] A list containing the names of all Data Sources available for a Data Retrieval class. required required_data List [ str ] A list containing the names of the data items requested by the user. required Returns: Type Description List [ str ] A list of Data Source names containing only the needed Data Sources. Raises: Type Description OmMissingDataSourceClassError Raised when one of the required Data Source class cannot be found in the list of Data Source available for the Data Retrieval.","title":"layer_management"},{"location":"reference/om/lib/layer_management/#om.lib.layer_management","text":"OM's layer management. This module contains classes and functions that mange OM's various data processing and extraction layers.","title":"layer_management"},{"location":"reference/om/lib/layer_management/#om.lib.layer_management.import_class_from_layer","text":"Imports a class from an OM's layer. This function imports a class, identified by the class_name argument, from a layer identified by the layer_name argument. The function looks for the python module containing the layer code in the current directory first. Specifically, it looks for a python file with the same name as the layer. If the function cannot fine the file in the current directory, it imports the layer from the OM's normal installation directories. It then proceeds to import the requested class from the layer module. Parameters: Name Type Description Default layer_name str The name of the layer from which the class should be imported. required class_name str The name of the class to import. required Returns: Type Description Union [ Type [ OmParallelizationProtocol ], Type [ OmProcessingProtocol ], Type [ OmDataRetrievalProtocol ], None] The imported class. Raises: Type Description OmMissingLayerClass Raised when the requested class cannot be found in the specified Python module. OmMissingLayerModuleFile Raised when the requested python module cannot be found.","title":"import_class_from_layer()"},{"location":"reference/om/lib/layer_management/#om.lib.layer_management.filter_data_sources","text":"Filters a list Data Sources. This function filters the list of all Data Sources associated with a Data Retrieval class, returning only the subset of Data Sources needed to retrieve the data requested by the user. Parameters: Name Type Description Default data_sources Dict [ str , OmDataSourceProtocol ] A list containing the names of all Data Sources available for a Data Retrieval class. required required_data List [ str ] A list containing the names of the data items requested by the user. required Returns: Type Description List [ str ] A list of Data Source names containing only the needed Data Sources. Raises: Type Description OmMissingDataSourceClassError Raised when one of the required Data Source class cannot be found in the list of Data Source available for the Data Retrieval.","title":"filter_data_sources()"},{"location":"reference/om/lib/parameters/","text":"parameters OM's configuration parameter management. This module contains classes and functions that can be used to manage and validate a set of OM's configuration parameters from a configuration file. MonitorParameters See documentation for the __init__ function. __init__ ( * , config , source = None , node_pool_size = None ) Storage, retrieval and validation of OM's configuration parameters. This class stores a set of OM's configuration parameters, subdivided in groups. It is initialized with a set of parameters read from a configuration file written in YAML format. It then allows single parameters or group of parameters to be retrieved, and optionally validated. In addition to the set of parameters read from the file, this class stores the path to the configuration file itself, in a parameter named configuration_file within the om parameter group. Parameters: Name Type Description Default config str The absolute or relative path to a YAML-format configuration file. required Raises: Type Description OMConfigurationFileSyntaxError Raised if there is a syntax error in OM's configuration file. get_parameter_group ( * , group ) Retrieves an OM's configuration parameter group. This function retrieves a configuration parameter group from the full set of OM's configuration parameters. Parameters: Name Type Description Default group str The name of the parameter group to retrieve. required Returns: Type Description Any The parameter group. Raises: Type Description OmMissingParameterGroupError Raised if the requested parameter group is not present in the full set of OM's configuration parameters. get_parameter ( * , group , parameter , parameter_type = None , required = False , default = None ) Retrieves an OM's configuration parameter. This function retrieves a single parameter from the full set of OM's configuration parameters. Optionally, it also validates the type of the parameter, according to the following rules: If the value of the required argument is True and the parameter cannot be found in OM's configuration file, this function raises an exception. If the value of the required argument is False and the parameter cannot be found in OM's configuration file, this function returns None, or the value of the default argument, if it is provided. If a type is specified for the parameter (the parameter_type argument is not None) and the type of the retrieved parameter does not match the specified one, this function raises an exception. Parameters: Name Type Description Default group str The name of the parameter group from which the parameter must be retrieved. required parameter str The name of the parameter to retrieve. required parameter_type Any The type of the parameter to retrieve. If a type is specified in this argument, the type of the retrieved parameter will be validated. Defaults to None. None required bool True if the parameter is strictly required and must be present in OM's configuration file, False otherwise. Defaults to False. False default Any The default value that this function should return if the requested parameter cannot be found and the parameter is not strictly required. None Returns: Type Description Any The value of the requested parameter, or None, if the parameter was not Any found in OM's configuration file, it is not required, and a default value Any has not been provided. Raises: Type Description OmMissingParameterGroupError Raised if the requested parameter group is not present in the full set of OM's configuration parameters. OmMissingParameterError Raised if the parameter is required but cannot be found in the full set of OM's configuration parameters. OmWrongParameterTypeError Raised if the requested parameter type does not match the type of the retrieved configuration parameter. add_source_and_node_pool_size_information ( * , source = None , node_pool_size = None ) Adds source and node pool size information to the parameter set. If the name of a data source is provided as an input parameter, this function adds it to the parameter set stored by this class, and makes it available as a parameter with the name source within the om group. If the total number of nodes in OM's node pool is also provided, the information will added to the parameter set and made available as a parameter named node_pool_size within the om group. Parameters: Name Type Description Default source Union [ str , None] A string describing the data event source. None node_pool_size Union [ int , None] The total number of nodes in the OM pool, including all the processing nodes and the collecting node. None get_parameter_from_parameter_group ( * , group , parameter , parameter_type = None , required = False , default = None ) Retrieves the value of an OM's configuration parameter from a parameter group. This function retrieves the value of a single configuration parameter from a provided group of configuration parameters. Optionally, it validates the type of the parameter according to the following rules: If the value of the required argument is True and the parameter cannot be found in OM's configuration file, this function raises an exception. If the value of the required argument is False and the parameter cannot be found in OM's configuration file, this function returns None, or the value of the default argument, if it is provided. If a type is specified for the parameter (the parameter_type argument is not None) and the type of the retrieved parameter does not match the specified one, this function raises an exception. Parameters: Name Type Description Default group Dict [ str , Any ] The parameter group containing the parameter to retrieve. required parameter str The name of the parameter to retrieve. required parameter_type Any The type of the parameter to retrieve. If a type is specified in this argument, the type of the retrieved parameter will be validated. Defaults to None. None required bool True if the parameter is strictly required and must be present in OM's configuration file, False otherwise. Defaults to False. False default Any The default value that this function should return if the requested parameter cannot be found and the parameter is not strictly required. None Returns: Type Description Any The value of the requested parameter, or None, if the parameter was not Any found in OM's configuration file, it is not required, and a default value Any has not been provided. Raises: Type Description OmMissingParameterError Raised if the parameter is required but cannot be found in the parameter group. OmWrongParameterTypeError Raised if the requested parameter type does not match the type of the retrieved configuration parameter.","title":"parameters"},{"location":"reference/om/lib/parameters/#om.lib.parameters","text":"OM's configuration parameter management. This module contains classes and functions that can be used to manage and validate a set of OM's configuration parameters from a configuration file.","title":"parameters"},{"location":"reference/om/lib/parameters/#om.lib.parameters.MonitorParameters","text":"See documentation for the __init__ function.","title":"MonitorParameters"},{"location":"reference/om/lib/parameters/#om.lib.parameters.MonitorParameters.__init__","text":"Storage, retrieval and validation of OM's configuration parameters. This class stores a set of OM's configuration parameters, subdivided in groups. It is initialized with a set of parameters read from a configuration file written in YAML format. It then allows single parameters or group of parameters to be retrieved, and optionally validated. In addition to the set of parameters read from the file, this class stores the path to the configuration file itself, in a parameter named configuration_file within the om parameter group. Parameters: Name Type Description Default config str The absolute or relative path to a YAML-format configuration file. required Raises: Type Description OMConfigurationFileSyntaxError Raised if there is a syntax error in OM's configuration file.","title":"__init__()"},{"location":"reference/om/lib/parameters/#om.lib.parameters.MonitorParameters.get_parameter_group","text":"Retrieves an OM's configuration parameter group. This function retrieves a configuration parameter group from the full set of OM's configuration parameters. Parameters: Name Type Description Default group str The name of the parameter group to retrieve. required Returns: Type Description Any The parameter group. Raises: Type Description OmMissingParameterGroupError Raised if the requested parameter group is not present in the full set of OM's configuration parameters.","title":"get_parameter_group()"},{"location":"reference/om/lib/parameters/#om.lib.parameters.MonitorParameters.get_parameter","text":"Retrieves an OM's configuration parameter. This function retrieves a single parameter from the full set of OM's configuration parameters. Optionally, it also validates the type of the parameter, according to the following rules: If the value of the required argument is True and the parameter cannot be found in OM's configuration file, this function raises an exception. If the value of the required argument is False and the parameter cannot be found in OM's configuration file, this function returns None, or the value of the default argument, if it is provided. If a type is specified for the parameter (the parameter_type argument is not None) and the type of the retrieved parameter does not match the specified one, this function raises an exception. Parameters: Name Type Description Default group str The name of the parameter group from which the parameter must be retrieved. required parameter str The name of the parameter to retrieve. required parameter_type Any The type of the parameter to retrieve. If a type is specified in this argument, the type of the retrieved parameter will be validated. Defaults to None. None required bool True if the parameter is strictly required and must be present in OM's configuration file, False otherwise. Defaults to False. False default Any The default value that this function should return if the requested parameter cannot be found and the parameter is not strictly required. None Returns: Type Description Any The value of the requested parameter, or None, if the parameter was not Any found in OM's configuration file, it is not required, and a default value Any has not been provided. Raises: Type Description OmMissingParameterGroupError Raised if the requested parameter group is not present in the full set of OM's configuration parameters. OmMissingParameterError Raised if the parameter is required but cannot be found in the full set of OM's configuration parameters. OmWrongParameterTypeError Raised if the requested parameter type does not match the type of the retrieved configuration parameter.","title":"get_parameter()"},{"location":"reference/om/lib/parameters/#om.lib.parameters.MonitorParameters.add_source_and_node_pool_size_information","text":"Adds source and node pool size information to the parameter set. If the name of a data source is provided as an input parameter, this function adds it to the parameter set stored by this class, and makes it available as a parameter with the name source within the om group. If the total number of nodes in OM's node pool is also provided, the information will added to the parameter set and made available as a parameter named node_pool_size within the om group. Parameters: Name Type Description Default source Union [ str , None] A string describing the data event source. None node_pool_size Union [ int , None] The total number of nodes in the OM pool, including all the processing nodes and the collecting node. None","title":"add_source_and_node_pool_size_information()"},{"location":"reference/om/lib/parameters/#om.lib.parameters.get_parameter_from_parameter_group","text":"Retrieves the value of an OM's configuration parameter from a parameter group. This function retrieves the value of a single configuration parameter from a provided group of configuration parameters. Optionally, it validates the type of the parameter according to the following rules: If the value of the required argument is True and the parameter cannot be found in OM's configuration file, this function raises an exception. If the value of the required argument is False and the parameter cannot be found in OM's configuration file, this function returns None, or the value of the default argument, if it is provided. If a type is specified for the parameter (the parameter_type argument is not None) and the type of the retrieved parameter does not match the specified one, this function raises an exception. Parameters: Name Type Description Default group Dict [ str , Any ] The parameter group containing the parameter to retrieve. required parameter str The name of the parameter to retrieve. required parameter_type Any The type of the parameter to retrieve. If a type is specified in this argument, the type of the retrieved parameter will be validated. Defaults to None. None required bool True if the parameter is strictly required and must be present in OM's configuration file, False otherwise. Defaults to False. False default Any The default value that this function should return if the requested parameter cannot be found and the parameter is not strictly required. None Returns: Type Description Any The value of the requested parameter, or None, if the parameter was not Any found in OM's configuration file, it is not required, and a default value Any has not been provided. Raises: Type Description OmMissingParameterError Raised if the parameter is required but cannot be found in the parameter group. OmWrongParameterTypeError Raised if the requested parameter type does not match the type of the retrieved configuration parameter.","title":"get_parameter_from_parameter_group()"},{"location":"reference/om/lib/rich_console/","text":"rich_console Rich console utilities. This module contains classes and functions that OM uses to improve and augment its terminal console output, using the Rich python library. get_current_timestamp () Gets the current timestamp formatted for console output. This function returns the current timestamp, with seconds precision, formatted in a style that is fit to be printed in the rich console. Returns: Type Description str A string with the formatted timestamp. set_null_theme () Configures OM's rich console not to use colors. This function configures OM's rich console to use an null theme, effectively preventing it from using colors when displaying its output. set_custom_theme ( * , theme_dict ) Sets a custom theme for OM's rich console. This function configures OM's rich console to use a custom theme. A dictionary passed to this function as an input parameter must stores the theme definition, using the syntax adopted by the python [Rich library][https://rich.readthedocs.io/en/stable/style.html]. The custom theme is applied on top of OM's base rich console's theme: the console will fall back to the base theme for any entry not defined in the dictionary passed to this function. Parameters: Name Type Description Default theme_dict Dict [ str , str ] A dictionary storing the custom theme definition, following the syntax defined by python Rich library. required","title":"rich_console"},{"location":"reference/om/lib/rich_console/#om.lib.rich_console","text":"Rich console utilities. This module contains classes and functions that OM uses to improve and augment its terminal console output, using the Rich python library.","title":"rich_console"},{"location":"reference/om/lib/rich_console/#om.lib.rich_console.get_current_timestamp","text":"Gets the current timestamp formatted for console output. This function returns the current timestamp, with seconds precision, formatted in a style that is fit to be printed in the rich console. Returns: Type Description str A string with the formatted timestamp.","title":"get_current_timestamp()"},{"location":"reference/om/lib/rich_console/#om.lib.rich_console.set_null_theme","text":"Configures OM's rich console not to use colors. This function configures OM's rich console to use an null theme, effectively preventing it from using colors when displaying its output.","title":"set_null_theme()"},{"location":"reference/om/lib/rich_console/#om.lib.rich_console.set_custom_theme","text":"Sets a custom theme for OM's rich console. This function configures OM's rich console to use a custom theme. A dictionary passed to this function as an input parameter must stores the theme definition, using the syntax adopted by the python [Rich library][https://rich.readthedocs.io/en/stable/style.html]. The custom theme is applied on top of OM's base rich console's theme: the console will fall back to the base theme for any entry not defined in the dictionary passed to this function. Parameters: Name Type Description Default theme_dict Dict [ str , str ] A dictionary storing the custom theme definition, following the syntax defined by python Rich library. required","title":"set_custom_theme()"},{"location":"reference/om/lib/xes/","text":"xes TODO XesAnalysisAndPlots TODO __init__ ( * , parameters , time_resolved ) Data analysis and plot generation for x-ray emission spectroscopy data. This class stores all the information required to compute energy spectra from detector data frames, and analyze them. Additionally, the class stores all the information needed to generate and update plots that summarize the state of an x-ray emission spectroscopy experiment. specifically. After the class has been initialized, data event information can be added, and the updated plots can be retrieved and sent to external programs for visualization. Parameters: Name Type Description Default parameters Dict [ str , Any ] An object storing OM's configuration parameters. The set of OM's configuration parameters must include a parameter group called xes with the entries required to fine-tune the spectrum calculation. Please refer to the documentation of the EnergySpectrumRetrieval algorithm). required update_plots ( * , detector_data , optical_laser_active ) Updates and recovers the x-ray emission spectroscopy data plots. This function uses the provided information to update all the x-ray emission spectroscopy data plots generated by this class. The function assumes that all the provided information refers to the same data event. After updating the data plots, the function returns all the information needed to display them in a graphical interface, in the format of a tuple containing the following entries: The cumulative sum of all observed energy spectra. The cumulative sum of the smoothed versions of all observed energy spectra. The cumulative sum of all observed data frames. For pump-probe experiments, the cumulative sum of all observed energy spectra for events with an active optical laser. Otherwise, just the value None. For pump-probe experiments, the cumulative sum of all observed energy spectra for events without an active optical laser. Otherwise, just the value None. For pump-probe experiments, the the difference between the cumulative sum of all observed energy spectra observed for events with and without an active optical laser. Otherwise, just the value None. Parameters: Name Type Description Default detector_data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] The detector data frame to analyze and to use for updating the plots. required optical_laser_active bool Whether the optical laser is active or not in the data event to which the provided information is associated. This argument is only relevant for pump-probe experiments. required Returns: Type Description Tuple [ Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ], None], Union [ NDArray [ numpy . float_ ], None], Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ], None], Union [ NDArray [ numpy . float_ ], None], Union [ NDArray [ numpy . float_ ], None], Union [ NDArray [ numpy . float_ ], None]] The information needed to display the plots in a graphical interface.","title":"xes"},{"location":"reference/om/lib/xes/#om.lib.xes","text":"TODO","title":"xes"},{"location":"reference/om/lib/xes/#om.lib.xes.XesAnalysisAndPlots","text":"TODO","title":"XesAnalysisAndPlots"},{"location":"reference/om/lib/xes/#om.lib.xes.XesAnalysisAndPlots.__init__","text":"Data analysis and plot generation for x-ray emission spectroscopy data. This class stores all the information required to compute energy spectra from detector data frames, and analyze them. Additionally, the class stores all the information needed to generate and update plots that summarize the state of an x-ray emission spectroscopy experiment. specifically. After the class has been initialized, data event information can be added, and the updated plots can be retrieved and sent to external programs for visualization. Parameters: Name Type Description Default parameters Dict [ str , Any ] An object storing OM's configuration parameters. The set of OM's configuration parameters must include a parameter group called xes with the entries required to fine-tune the spectrum calculation. Please refer to the documentation of the EnergySpectrumRetrieval algorithm). required","title":"__init__()"},{"location":"reference/om/lib/xes/#om.lib.xes.XesAnalysisAndPlots.update_plots","text":"Updates and recovers the x-ray emission spectroscopy data plots. This function uses the provided information to update all the x-ray emission spectroscopy data plots generated by this class. The function assumes that all the provided information refers to the same data event. After updating the data plots, the function returns all the information needed to display them in a graphical interface, in the format of a tuple containing the following entries: The cumulative sum of all observed energy spectra. The cumulative sum of the smoothed versions of all observed energy spectra. The cumulative sum of all observed data frames. For pump-probe experiments, the cumulative sum of all observed energy spectra for events with an active optical laser. Otherwise, just the value None. For pump-probe experiments, the cumulative sum of all observed energy spectra for events without an active optical laser. Otherwise, just the value None. For pump-probe experiments, the the difference between the cumulative sum of all observed energy spectra observed for events with and without an active optical laser. Otherwise, just the value None. Parameters: Name Type Description Default detector_data Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ]] The detector data frame to analyze and to use for updating the plots. required optical_laser_active bool Whether the optical laser is active or not in the data event to which the provided information is associated. This argument is only relevant for pump-probe experiments. required Returns: Type Description Tuple [ Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ], None], Union [ NDArray [ numpy . float_ ], None], Union [ NDArray [ numpy . float_ ], NDArray [ numpy . int_ ], None], Union [ NDArray [ numpy . float_ ], None], Union [ NDArray [ numpy . float_ ], None], Union [ NDArray [ numpy . float_ ], None]] The information needed to display the plots in a graphical interface.","title":"update_plots()"},{"location":"reference/om/lib/zmq/","text":"zmq ZMQ utilities to broadcast data from an OnDA Monitor. This module contains classes and functions that allow OnDA Monitors to broadcast data to external programs over a ZMQ socket. ZmqDataBroadcaster See documentation of the __init__ function. __init__ ( * , parameters ) Data-broadcasting socket for OnDA Monitors. This class manages a broadcasting socket that can be used by OnDA Monitors to transmit data to external programs. The class must be initialized with the URL, in ZeroMQ format, were the socket should operate. The created socket can then be used to broadcast data. Each data item broadcast by the socket can be tagged with a different label, and external programs can use this label to filter their incoming data. The socket can also transmit to multiple clients at the same time but has no queuing system: broadcast data will be lost to the clients if not received before the next transmission takes place. This class creates a ZMQ PUB socket that accepts connections from ZMQ PUB sockets. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: url : The URL where the socket will be opened. It must be a string in the format used by ZeroMQ, or None. If the value of this argument is None, the IP address of the local machine is auto-detected, and the socket is opened at port 12321 using the 'tcp://' protocol. Defaults to None. required send_data ( * , tag , message ) Broadcasts data from the ZMQ PUB socket. This function transmits the provided data from the broadcasting socket. The data must have the format of a python dictionary strictly containing only Python objects. When broadcast, the data is tagged with the specified label. Parameters: Name Type Description Default tag str The label used to tag the broadcast data. required message Dict [ str , Any ] A dictionary storing the data to be transmitted. The dictionary keys must store the names of the data units being broadcast. The corresponding dictionary values must store the data content, associated to each data unit, to be transmitted. required ZmqResponder See documentation of the __init__ function. __init__ ( * , parameters , blocking = False ) ZMQ-based responding socket for OnDA Monitors. This class manages a socket that can be used by an OnDA Monitor to receive requests from external programs, and to respond to them. The class must be initialized with the URL, in ZeroMQ format, were the socket should operate. The socket can then be used to receive requests and to satisfy them by sending data, if necessary. The socket can be of blocking or non-blocking type. In the first case, the socket waits for a request and does not allow the monitor to proceed until one is received. In the second case, the socket retrieves a request if one is available, but proceeds otherwise. Unless a blocking socket is requested when the class is initialized, the class creates a non-blocking socket. This class creates a ZMQ ROUTER socket that can accept requests from REQ sockets in external programs and respond to them. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: url : The URL where the socket will be opened. It must be a string in the format used by ZeroMQ, or None. If the value of this argument is None, the IP address of the local machine is auto-detected, and the socket is opened at port 12321 using the 'tcp://' protocol. Defaults to None. required blocking bool whether the socket should be of blocking type. Defaults to False. False get_request () Gets a request from the responding socket, if present. This function checks if a request has been received by the responding socket. If the socket has been set up as blocking, this function does not return until a request is received. The function then returns a tuple storing the identity of the requester and the content of the request. If the socket is instead non-blocking, the function return the same information if a request is present when the function is called, and None otherwise. The identity of the requester must be stored by the program invoking the function and provided later to the send_data function to answer the request, if necessary. Returns: Name Type Description request Union [ Tuple [ bytes , bytes ], None] If a request was received by the socket, a tuple storing the identity of the caller as the first entry, and a string with the request's content as the second entry. If no request has been received by the socket, None. send_data ( * , identity , message ) Send data from the ZMQ REP socket. This function transmits data to an external program that has previously sent a request to the socket. The response must either have the format of a python dictionary or of a sequence of bytes (an ASCII string, for example) Parameters: Name Type Description Default identity bytes The identity of the requester to which the data should sent. This information is returned by the get_request . required message Union [ Dict [ str , Any ], bytes ] A dictionary containing the information to be transmitted. required get_current_machine_ip () Retrieves the IP address of the local machine. This function uses Python's socket module to autodetect the IP address of the the machine where it is invoked. Returns: Type Description str A string storing the IP address of the machine where the function was invoked.","title":"zmq"},{"location":"reference/om/lib/zmq/#om.lib.zmq","text":"ZMQ utilities to broadcast data from an OnDA Monitor. This module contains classes and functions that allow OnDA Monitors to broadcast data to external programs over a ZMQ socket.","title":"zmq"},{"location":"reference/om/lib/zmq/#om.lib.zmq.ZmqDataBroadcaster","text":"See documentation of the __init__ function.","title":"ZmqDataBroadcaster"},{"location":"reference/om/lib/zmq/#om.lib.zmq.ZmqDataBroadcaster.__init__","text":"Data-broadcasting socket for OnDA Monitors. This class manages a broadcasting socket that can be used by OnDA Monitors to transmit data to external programs. The class must be initialized with the URL, in ZeroMQ format, were the socket should operate. The created socket can then be used to broadcast data. Each data item broadcast by the socket can be tagged with a different label, and external programs can use this label to filter their incoming data. The socket can also transmit to multiple clients at the same time but has no queuing system: broadcast data will be lost to the clients if not received before the next transmission takes place. This class creates a ZMQ PUB socket that accepts connections from ZMQ PUB sockets. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: url : The URL where the socket will be opened. It must be a string in the format used by ZeroMQ, or None. If the value of this argument is None, the IP address of the local machine is auto-detected, and the socket is opened at port 12321 using the 'tcp://' protocol. Defaults to None. required","title":"__init__()"},{"location":"reference/om/lib/zmq/#om.lib.zmq.ZmqDataBroadcaster.send_data","text":"Broadcasts data from the ZMQ PUB socket. This function transmits the provided data from the broadcasting socket. The data must have the format of a python dictionary strictly containing only Python objects. When broadcast, the data is tagged with the specified label. Parameters: Name Type Description Default tag str The label used to tag the broadcast data. required message Dict [ str , Any ] A dictionary storing the data to be transmitted. The dictionary keys must store the names of the data units being broadcast. The corresponding dictionary values must store the data content, associated to each data unit, to be transmitted. required","title":"send_data()"},{"location":"reference/om/lib/zmq/#om.lib.zmq.ZmqResponder","text":"See documentation of the __init__ function.","title":"ZmqResponder"},{"location":"reference/om/lib/zmq/#om.lib.zmq.ZmqResponder.__init__","text":"ZMQ-based responding socket for OnDA Monitors. This class manages a socket that can be used by an OnDA Monitor to receive requests from external programs, and to respond to them. The class must be initialized with the URL, in ZeroMQ format, were the socket should operate. The socket can then be used to receive requests and to satisfy them by sending data, if necessary. The socket can be of blocking or non-blocking type. In the first case, the socket waits for a request and does not allow the monitor to proceed until one is received. In the second case, the socket retrieves a request if one is available, but proceeds otherwise. Unless a blocking socket is requested when the class is initialized, the class creates a non-blocking socket. This class creates a ZMQ ROUTER socket that can accept requests from REQ sockets in external programs and respond to them. Parameters: Name Type Description Default parameters Dict [ str , Any ] A set of OM configuration parameters collected together in a parameter group. The parameter group must contain the following entries: url : The URL where the socket will be opened. It must be a string in the format used by ZeroMQ, or None. If the value of this argument is None, the IP address of the local machine is auto-detected, and the socket is opened at port 12321 using the 'tcp://' protocol. Defaults to None. required blocking bool whether the socket should be of blocking type. Defaults to False. False","title":"__init__()"},{"location":"reference/om/lib/zmq/#om.lib.zmq.ZmqResponder.get_request","text":"Gets a request from the responding socket, if present. This function checks if a request has been received by the responding socket. If the socket has been set up as blocking, this function does not return until a request is received. The function then returns a tuple storing the identity of the requester and the content of the request. If the socket is instead non-blocking, the function return the same information if a request is present when the function is called, and None otherwise. The identity of the requester must be stored by the program invoking the function and provided later to the send_data function to answer the request, if necessary. Returns: Name Type Description request Union [ Tuple [ bytes , bytes ], None] If a request was received by the socket, a tuple storing the identity of the caller as the first entry, and a string with the request's content as the second entry. If no request has been received by the socket, None.","title":"get_request()"},{"location":"reference/om/lib/zmq/#om.lib.zmq.ZmqResponder.send_data","text":"Send data from the ZMQ REP socket. This function transmits data to an external program that has previously sent a request to the socket. The response must either have the format of a python dictionary or of a sequence of bytes (an ASCII string, for example) Parameters: Name Type Description Default identity bytes The identity of the requester to which the data should sent. This information is returned by the get_request . required message Union [ Dict [ str , Any ], bytes ] A dictionary containing the information to be transmitted. required","title":"send_data()"},{"location":"reference/om/lib/zmq/#om.lib.zmq.get_current_machine_ip","text":"Retrieves the IP address of the local machine. This function uses Python's socket module to autodetect the IP address of the the machine where it is invoked. Returns: Type Description str A string storing the IP address of the machine where the function was invoked.","title":"get_current_machine_ip()"},{"location":"reference/om/lib/zmq_qt/","text":"zmq_qt ZMQ utilities to receive data from OnDA Monitors. This module contains classes and functions that allow external programs to receive data from an OnDA Monitor over a ZMQ socket. ZmqDataListener Bases: QtCore . QObject See documentation for the __init__ function. zmqmessage : Any = QtCore . pyqtSignal ( dict ) class-attribute instance-attribute Qt signal emitted when data is received. This signal is emitted by this class when it receives data from an OnDA Monitor. It brings the received data as payload. __init__ ( * , url , tag ) Data receiving socket for external programs. This class manages a listening socket that can receive data broadcast by an OnDA Monitor. The class must be initialized with the URL address, in ZeroMQ format, of the broadcasting socket of the monitor. It then creates a receiving socket that listens for data, but only when is tagged with a specific label, provided to the class when it is initialized. Every time the socket receives data, this class emits a Qt signal carrying the received data as payload. This class is designed to be run in a separate thread from the main graphical interface program. The main program can listen for the signal emitted by this class to determine when new data has been received. This class is designed to be executed in a Qt thread. It creates a ZMQ SUB socket that connects to an OM's PUB socket, subscribing to a single specific topic. When the socket receives data, this class emits a zmqmessage Qt signal that other threads can listen to. The signal carries the received data. Parameters: Name Type Description Default url str The URL to which the PUB socket will connect. It must be a URL string in the format used by ZeroMQ. required tag str The label used by the socket to filter incoming data. Only data whose label matches this argument will be accepted and received. required start_listening () Connects to a OM's broadcasting socket and starts listening for data. This function connects the listening socket to a data source broadcasting at the URL provided to the class at initialization. The socket starts receiving data immediately. Raises: Type Description OmInvalidZmqUrl Raised if any error happens while the socket is being connected to the data broadcasting source. stop_listening () Stops listening to an OM's broadcasting socket and disconnects. This function completely disconnects the listening socket from the broadcasting source. The socket needs to be reconnected (using the start_listening function) to start receiving data again.","title":"zmq_qt"},{"location":"reference/om/lib/zmq_qt/#om.lib.zmq_qt","text":"ZMQ utilities to receive data from OnDA Monitors. This module contains classes and functions that allow external programs to receive data from an OnDA Monitor over a ZMQ socket.","title":"zmq_qt"},{"location":"reference/om/lib/zmq_qt/#om.lib.zmq_qt.ZmqDataListener","text":"Bases: QtCore . QObject See documentation for the __init__ function.","title":"ZmqDataListener"},{"location":"reference/om/lib/zmq_qt/#om.lib.zmq_qt.ZmqDataListener.zmqmessage","text":"Qt signal emitted when data is received. This signal is emitted by this class when it receives data from an OnDA Monitor. It brings the received data as payload.","title":"zmqmessage"},{"location":"reference/om/lib/zmq_qt/#om.lib.zmq_qt.ZmqDataListener.__init__","text":"Data receiving socket for external programs. This class manages a listening socket that can receive data broadcast by an OnDA Monitor. The class must be initialized with the URL address, in ZeroMQ format, of the broadcasting socket of the monitor. It then creates a receiving socket that listens for data, but only when is tagged with a specific label, provided to the class when it is initialized. Every time the socket receives data, this class emits a Qt signal carrying the received data as payload. This class is designed to be run in a separate thread from the main graphical interface program. The main program can listen for the signal emitted by this class to determine when new data has been received. This class is designed to be executed in a Qt thread. It creates a ZMQ SUB socket that connects to an OM's PUB socket, subscribing to a single specific topic. When the socket receives data, this class emits a zmqmessage Qt signal that other threads can listen to. The signal carries the received data. Parameters: Name Type Description Default url str The URL to which the PUB socket will connect. It must be a URL string in the format used by ZeroMQ. required tag str The label used by the socket to filter incoming data. Only data whose label matches this argument will be accepted and received. required","title":"__init__()"},{"location":"reference/om/lib/zmq_qt/#om.lib.zmq_qt.ZmqDataListener.start_listening","text":"Connects to a OM's broadcasting socket and starts listening for data. This function connects the listening socket to a data source broadcasting at the URL provided to the class at initialization. The socket starts receiving data immediately. Raises: Type Description OmInvalidZmqUrl Raised if any error happens while the socket is being connected to the data broadcasting source.","title":"start_listening()"},{"location":"reference/om/lib/zmq_qt/#om.lib.zmq_qt.ZmqDataListener.stop_listening","text":"Stops listening to an OM's broadcasting socket and disconnects. This function completely disconnects the listening socket from the broadcasting source. The socket needs to be reconnected (using the start_listening function) to start receiving data again.","title":"stop_listening()"},{"location":"reference/om/parallelization_layer/","text":"parallelization_layer OM's Parallelization Layer. This package contains OM's Parallelization Layer, which manages the communication between the processing and collecting nodes. Modules in this package contain functions and classes for specific communication approaches or techniques. mpi multiprocessing","title":"__init__"},{"location":"reference/om/parallelization_layer/#om.parallelization_layer","text":"OM's Parallelization Layer. This package contains OM's Parallelization Layer, which manages the communication between the processing and collecting nodes. Modules in this package contain functions and classes for specific communication approaches or techniques. mpi multiprocessing","title":"parallelization_layer"},{"location":"reference/om/parallelization_layer/mpi/","text":"mpi MPI-based Parallelization Layer for OM. This module contains a Parallelization Layer based on the MPI protocol. MpiParallelization Bases: OmParallelizationProtocol See documentation of the __init__ function. __init__ ( * , data_retrieval_layer , processing_layer , monitor_parameters ) MPI-based Parallelization Layer for OM. This class implements a Parallelization Layer based on the MPI protocol. The nodes communicate with each other using an implementation of the MPI protocol supported by the Python language (OpenMPI or MPICH). This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_retrieval_layer OmDataRetrievalProtocol A class defining how data and data events are retrieved and handled. required processing_layer OmProcessingProtocol A class defining how retrieved data is processed. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required start () Starts the MPI parallelization. This function sets up the communication between OM's collecting and processing nodes using the MPI protocol. The function starts the nodes and manages all of their interactions, organizing the receiving and dispatching of data and control commands over MPI channels. Please see the documentation of the base Protocol class for additional information about this method. shutdown ( * , msg = 'Reason not provided.' ) Shuts down the MPI parallelization. This function stops OM, closing all the communication channels between the nodes and managing a controlled shutdown of OM's resources. Additionally, it terminates the MPI processes in an orderly fashion. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default msg str Reason for shutting down. Defaults to \"Reason not provided\". 'Reason not provided.'","title":"mpi"},{"location":"reference/om/parallelization_layer/mpi/#om.parallelization_layer.mpi","text":"MPI-based Parallelization Layer for OM. This module contains a Parallelization Layer based on the MPI protocol.","title":"mpi"},{"location":"reference/om/parallelization_layer/mpi/#om.parallelization_layer.mpi.MpiParallelization","text":"Bases: OmParallelizationProtocol See documentation of the __init__ function.","title":"MpiParallelization"},{"location":"reference/om/parallelization_layer/mpi/#om.parallelization_layer.mpi.MpiParallelization.__init__","text":"MPI-based Parallelization Layer for OM. This class implements a Parallelization Layer based on the MPI protocol. The nodes communicate with each other using an implementation of the MPI protocol supported by the Python language (OpenMPI or MPICH). This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_retrieval_layer OmDataRetrievalProtocol A class defining how data and data events are retrieved and handled. required processing_layer OmProcessingProtocol A class defining how retrieved data is processed. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/parallelization_layer/mpi/#om.parallelization_layer.mpi.MpiParallelization.start","text":"Starts the MPI parallelization. This function sets up the communication between OM's collecting and processing nodes using the MPI protocol. The function starts the nodes and manages all of their interactions, organizing the receiving and dispatching of data and control commands over MPI channels. Please see the documentation of the base Protocol class for additional information about this method.","title":"start()"},{"location":"reference/om/parallelization_layer/mpi/#om.parallelization_layer.mpi.MpiParallelization.shutdown","text":"Shuts down the MPI parallelization. This function stops OM, closing all the communication channels between the nodes and managing a controlled shutdown of OM's resources. Additionally, it terminates the MPI processes in an orderly fashion. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default msg str Reason for shutting down. Defaults to \"Reason not provided\". 'Reason not provided.'","title":"shutdown()"},{"location":"reference/om/parallelization_layer/multiprocessing/","text":"multiprocessing Multiprocessing Parallelization Layer for OM. This module contains a Parallelization Layer based on Python's multiprocessing module. MultiprocessingParallelization Bases: OmParallelizationProtocol See documentation of the __init__ function. __init__ ( * , data_retrieval_layer , processing_layer , monitor_parameters ) Multiprocessing-based Parallelization Layer for OM. This class implements a Parallelization Layer based on Python's multiprocessing module. Each processing node is spawned as a subprocess. The parent process acts as the collecting node and additionally manages the child processes. This class manages all the subprocesses, and sets up all the communication channels through which data and control commands are received and dispatched. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_retrieval_layer OmDataRetrievalProtocol A class defining how data and data events are retrieved and handled. required processing_layer OmProcessingProtocol A class defining how retrieved data is processed. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required start () Starts the multiprocessing parallelization. The function starts the nodes and manages all of their interactions,organizing the receiving and dispatching of data and control commands. Please see the documentation of the base Protocol class for additional information about this method. shutdown ( * , msg = 'Reason not provided.' ) Shuts down the multiprocessing parallelization. This function stops OM, closing all the communication channels between the nodes and managing a controlled shutdown of OM's resources. Additionally, it terminates all the subprocesses in an orderly fashion. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default msg str Reason for shutting down. Defaults to \"Reason not provided\". 'Reason not provided.'","title":"multiprocessing"},{"location":"reference/om/parallelization_layer/multiprocessing/#om.parallelization_layer.multiprocessing","text":"Multiprocessing Parallelization Layer for OM. This module contains a Parallelization Layer based on Python's multiprocessing module.","title":"multiprocessing"},{"location":"reference/om/parallelization_layer/multiprocessing/#om.parallelization_layer.multiprocessing.MultiprocessingParallelization","text":"Bases: OmParallelizationProtocol See documentation of the __init__ function.","title":"MultiprocessingParallelization"},{"location":"reference/om/parallelization_layer/multiprocessing/#om.parallelization_layer.multiprocessing.MultiprocessingParallelization.__init__","text":"Multiprocessing-based Parallelization Layer for OM. This class implements a Parallelization Layer based on Python's multiprocessing module. Each processing node is spawned as a subprocess. The parent process acts as the collecting node and additionally manages the child processes. This class manages all the subprocesses, and sets up all the communication channels through which data and control commands are received and dispatched. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default data_retrieval_layer OmDataRetrievalProtocol A class defining how data and data events are retrieved and handled. required processing_layer OmProcessingProtocol A class defining how retrieved data is processed. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/parallelization_layer/multiprocessing/#om.parallelization_layer.multiprocessing.MultiprocessingParallelization.start","text":"Starts the multiprocessing parallelization. The function starts the nodes and manages all of their interactions,organizing the receiving and dispatching of data and control commands. Please see the documentation of the base Protocol class for additional information about this method.","title":"start()"},{"location":"reference/om/parallelization_layer/multiprocessing/#om.parallelization_layer.multiprocessing.MultiprocessingParallelization.shutdown","text":"Shuts down the multiprocessing parallelization. This function stops OM, closing all the communication channels between the nodes and managing a controlled shutdown of OM's resources. Additionally, it terminates all the subprocesses in an orderly fashion. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default msg str Reason for shutting down. Defaults to \"Reason not provided\". 'Reason not provided.'","title":"shutdown()"},{"location":"reference/om/processing_layer/","text":"processing_layer OM's Processing Layer. This package contains OM's Processing Layer, which defines the scientific data analysis logic for all OnDA Monitors. Each module in the package stores the implementation of a different OnDA Monitor. cheetah_streaming cheetah crystallography testing xes","title":"__init__"},{"location":"reference/om/processing_layer/#om.processing_layer","text":"OM's Processing Layer. This package contains OM's Processing Layer, which defines the scientific data analysis logic for all OnDA Monitors. Each module in the package stores the implementation of a different OnDA Monitor. cheetah_streaming cheetah crystallography testing xes","title":"processing_layer"},{"location":"reference/om/processing_layer/cheetah/","text":"cheetah Cheetah This module contains Cheetah, a data-processing program for Serial X-ray Crystallography, based on OM but not designed to be run in real time. CheetahProcessing Bases: OmProcessingProtocol See documentation for the __init__ function. __init__ ( * , monitor_parameters ) Cheetah. This Processing class implements the Cheetah software package. Cheetah processes detector data frames, detecting Bragg peaks in each frame using the Peakfinder8PeakDetection algorithm. It retrieves information about the location, size, intensity, SNR and maximum pixel value of each peak, Cheetah then saves the calibrated and corrected detector data, plus all the information retrieved from the facility or extracted from the data, in multi-event HDF5 files. Cheetah can also compute, and write to HDF5 sum files, sums of detector data frames (calculating separate sums for hit and non-hit frames). The sums can saved together with their corresponding Virtual Powder patterns. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_processing_node ( * , node_rank , node_pool_size ) Initializes the processing nodes for Cheetah. This function initializes all the required algorithms (peak finding, binning, etc.), plus some internal counters. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_collecting_node ( node_rank , node_pool_size ) Initializes the collecting node for Cheetah. This function initializes the data accumulation algorithms, the storage buffers used to compute statistics on the detected Bragg peaks and all the file writers. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required process_data ( * , node_rank , node_pool_size , data ) Processes a detector data frame and saves the extracted data to HDF5 file. This function processes retrieved data events, extracting the Bragg peak information. It also saves the frame-related processed data in an output HDF5 file, if a frame is identified as a hit. Finally, it prepares the reduced data (and optionally, the detector frame data) for transmission to the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data that OM retrieved for the detector data frame being processed. The dictionary keys describe the Data Sources for which OM has retrieved data. The keys must match the source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries. The first entry is a dictionary storing the processed data that should be sent to the collecting node. The second entry is the OM rank number of the node that processed the information. wait_for_data ( * , node_rank , node_pool_size ) Receives and handles requests from external programs. This function is not used in Cheetah, and therefore does nothing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required collect_data ( * , node_rank , node_pool_size , processed_data ) Computes statistics on aggregated data and saves them to files. This function collects and accumulates frame- and peak-related information received from the processing nodes. Optionally, it computes the sums of hit and non-hit detector frames and the corresponding virtual powder patterns, and saves them to file. Additionally, this function writes information about the processing statistics (number of processed events, number of found hits and the elapsed time) to a status file at regular intervals. External programs can inspect the file to determine the advancement of the data processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required end_processing_on_processing_node ( * , node_rank , node_pool_size ) Ends processing on the processing nodes for Cheetah. This function prints a message on the console, closes the output HDF5 files and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information to be sent to the processing node. end_processing_on_collecting_node ( * , node_rank , node_pool_size ) Ends processing on the collecting node for Cheetah. This function prints a message on the console, writes the final information in the sum and status files, closes the files and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"cheetah"},{"location":"reference/om/processing_layer/cheetah/#om.processing_layer.cheetah","text":"Cheetah This module contains Cheetah, a data-processing program for Serial X-ray Crystallography, based on OM but not designed to be run in real time.","title":"cheetah"},{"location":"reference/om/processing_layer/cheetah/#om.processing_layer.cheetah.CheetahProcessing","text":"Bases: OmProcessingProtocol See documentation for the __init__ function.","title":"CheetahProcessing"},{"location":"reference/om/processing_layer/cheetah/#om.processing_layer.cheetah.CheetahProcessing.__init__","text":"Cheetah. This Processing class implements the Cheetah software package. Cheetah processes detector data frames, detecting Bragg peaks in each frame using the Peakfinder8PeakDetection algorithm. It retrieves information about the location, size, intensity, SNR and maximum pixel value of each peak, Cheetah then saves the calibrated and corrected detector data, plus all the information retrieved from the facility or extracted from the data, in multi-event HDF5 files. Cheetah can also compute, and write to HDF5 sum files, sums of detector data frames (calculating separate sums for hit and non-hit frames). The sums can saved together with their corresponding Virtual Powder patterns. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/processing_layer/cheetah/#om.processing_layer.cheetah.CheetahProcessing.initialize_processing_node","text":"Initializes the processing nodes for Cheetah. This function initializes all the required algorithms (peak finding, binning, etc.), plus some internal counters. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_processing_node()"},{"location":"reference/om/processing_layer/cheetah/#om.processing_layer.cheetah.CheetahProcessing.initialize_collecting_node","text":"Initializes the collecting node for Cheetah. This function initializes the data accumulation algorithms, the storage buffers used to compute statistics on the detected Bragg peaks and all the file writers. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_collecting_node()"},{"location":"reference/om/processing_layer/cheetah/#om.processing_layer.cheetah.CheetahProcessing.process_data","text":"Processes a detector data frame and saves the extracted data to HDF5 file. This function processes retrieved data events, extracting the Bragg peak information. It also saves the frame-related processed data in an output HDF5 file, if a frame is identified as a hit. Finally, it prepares the reduced data (and optionally, the detector frame data) for transmission to the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data that OM retrieved for the detector data frame being processed. The dictionary keys describe the Data Sources for which OM has retrieved data. The keys must match the source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries. The first entry is a dictionary storing the processed data that should be sent to the collecting node. The second entry is the OM rank number of the node that processed the information.","title":"process_data()"},{"location":"reference/om/processing_layer/cheetah/#om.processing_layer.cheetah.CheetahProcessing.wait_for_data","text":"Receives and handles requests from external programs. This function is not used in Cheetah, and therefore does nothing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"wait_for_data()"},{"location":"reference/om/processing_layer/cheetah/#om.processing_layer.cheetah.CheetahProcessing.collect_data","text":"Computes statistics on aggregated data and saves them to files. This function collects and accumulates frame- and peak-related information received from the processing nodes. Optionally, it computes the sums of hit and non-hit detector frames and the corresponding virtual powder patterns, and saves them to file. Additionally, this function writes information about the processing statistics (number of processed events, number of found hits and the elapsed time) to a status file at regular intervals. External programs can inspect the file to determine the advancement of the data processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required","title":"collect_data()"},{"location":"reference/om/processing_layer/cheetah/#om.processing_layer.cheetah.CheetahProcessing.end_processing_on_processing_node","text":"Ends processing on the processing nodes for Cheetah. This function prints a message on the console, closes the output HDF5 files and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information to be sent to the processing node.","title":"end_processing_on_processing_node()"},{"location":"reference/om/processing_layer/cheetah/#om.processing_layer.cheetah.CheetahProcessing.end_processing_on_collecting_node","text":"Ends processing on the collecting node for Cheetah. This function prints a message on the console, writes the final information in the sum and status files, closes the files and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"end_processing_on_collecting_node()"},{"location":"reference/om/processing_layer/cheetah_streaming/","text":"cheetah_streaming Cheetah Streaming. This module contains a specific version of Cheetah, a data-processing program for Serial X-ray Crystallography. Compare to Cheetah, this version processes data frames, but does not save the extracted data to files: it sends it to external programs for further processing. StreamingCheetahProcessing Bases: OmProcessingProtocol See documentation for the __init__ function. __init__ ( * , monitor_parameters ) Cheetah Streaming. This Processing class implements the Cheetah Streaming software package. Cheetah Streaming processes detector data frames, detecting Bragg peaks in each frame using the Peakfinder8PeakDetection algorithm. It retrieves information about the location, size, intensity, SNR and maximum pixel value of each peak, and then streams the information retrieved from the facility or extracted from the data to external programs for further processing. Optionally, it can also broadcast full detector data frames. Cheetah Streaming can also compute, and write to HDF5 sum files, sums of detector data frames (calculating separate sums for hit and non-hit frames). The sums can saved together with their corresponding Virtual Powder patterns. Cheetah Streaming can also respond to requests for data or change of behavior from external programs (a control GUI, for example.) This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_processing_node ( * , node_rank , node_pool_size ) Initializes the processing nodes for Cheetah Streaming. This function initializes all the required algorithms (peak finding, binning, etc.), plus some internal counters. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_collecting_node ( node_rank , node_pool_size ) Initializes the collecting node for Cheetah. This function initializes the data accumulation algorithms, the storage buffers used to compute aggregated statistics on the processed data, and some internal counters. Additionally, it prepares all the necessary network sockets. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required process_data ( * , node_rank , node_pool_size , data ) Processes a detector data frame. This function processes retrieved data events, extracting the Bragg peak information. It prepares the reduced data (and optionally, the detector frame data) to be transmitted to the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data that OM retrieved for the detector data frame being processed. The dictionary keys describe the Data Sources for which OM has retrieved data. The keys must match the source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries. The first entry is a dictionary storing the processed data that should be sent to the collecting node. The second entry is the OM rank number of the node that processed the information. wait_for_data ( * , node_rank , node_pool_size ) Receives and handles requests from external programs. This function receives requests from external programs over a network socket and reacts according to the nature of the request, sending data back to the source of the request or modifying the internal behavior of Cheetah Streaming. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required collect_data ( * , node_rank , node_pool_size , processed_data ) Computes statistics on aggregated data and broadcasts data to external programs. This function collects and accumulates frame- and peak-related information received from the processing nodes, and streams it to external programs. Optionally, it computes the sums of hit and non-hit detector frames and the corresponding virtual powder patterns, and saves them to file. Additionally, this function writes information about the processing statistics (number of processed events, number of found hits and the elapsed time) to a status file at regular intervals. External programs can inspect the file to determine the advancement of the data processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required end_processing_on_processing_node ( * , node_rank , node_pool_size ) Ends processing on the processing nodes for Cheetah Streaming. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information to be sent to the processing node. end_processing_on_collecting_node ( * , node_rank , node_pool_size ) Ends processing on the collecting node for Cheetah Streaming. This function prints a message on the console, writes the final information in the sum and status files, closes the files and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"cheetah_streaming"},{"location":"reference/om/processing_layer/cheetah_streaming/#om.processing_layer.cheetah_streaming","text":"Cheetah Streaming. This module contains a specific version of Cheetah, a data-processing program for Serial X-ray Crystallography. Compare to Cheetah, this version processes data frames, but does not save the extracted data to files: it sends it to external programs for further processing.","title":"cheetah_streaming"},{"location":"reference/om/processing_layer/cheetah_streaming/#om.processing_layer.cheetah_streaming.StreamingCheetahProcessing","text":"Bases: OmProcessingProtocol See documentation for the __init__ function.","title":"StreamingCheetahProcessing"},{"location":"reference/om/processing_layer/cheetah_streaming/#om.processing_layer.cheetah_streaming.StreamingCheetahProcessing.__init__","text":"Cheetah Streaming. This Processing class implements the Cheetah Streaming software package. Cheetah Streaming processes detector data frames, detecting Bragg peaks in each frame using the Peakfinder8PeakDetection algorithm. It retrieves information about the location, size, intensity, SNR and maximum pixel value of each peak, and then streams the information retrieved from the facility or extracted from the data to external programs for further processing. Optionally, it can also broadcast full detector data frames. Cheetah Streaming can also compute, and write to HDF5 sum files, sums of detector data frames (calculating separate sums for hit and non-hit frames). The sums can saved together with their corresponding Virtual Powder patterns. Cheetah Streaming can also respond to requests for data or change of behavior from external programs (a control GUI, for example.) This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/processing_layer/cheetah_streaming/#om.processing_layer.cheetah_streaming.StreamingCheetahProcessing.initialize_processing_node","text":"Initializes the processing nodes for Cheetah Streaming. This function initializes all the required algorithms (peak finding, binning, etc.), plus some internal counters. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_processing_node()"},{"location":"reference/om/processing_layer/cheetah_streaming/#om.processing_layer.cheetah_streaming.StreamingCheetahProcessing.initialize_collecting_node","text":"Initializes the collecting node for Cheetah. This function initializes the data accumulation algorithms, the storage buffers used to compute aggregated statistics on the processed data, and some internal counters. Additionally, it prepares all the necessary network sockets. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_collecting_node()"},{"location":"reference/om/processing_layer/cheetah_streaming/#om.processing_layer.cheetah_streaming.StreamingCheetahProcessing.process_data","text":"Processes a detector data frame. This function processes retrieved data events, extracting the Bragg peak information. It prepares the reduced data (and optionally, the detector frame data) to be transmitted to the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data that OM retrieved for the detector data frame being processed. The dictionary keys describe the Data Sources for which OM has retrieved data. The keys must match the source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries. The first entry is a dictionary storing the processed data that should be sent to the collecting node. The second entry is the OM rank number of the node that processed the information.","title":"process_data()"},{"location":"reference/om/processing_layer/cheetah_streaming/#om.processing_layer.cheetah_streaming.StreamingCheetahProcessing.wait_for_data","text":"Receives and handles requests from external programs. This function receives requests from external programs over a network socket and reacts according to the nature of the request, sending data back to the source of the request or modifying the internal behavior of Cheetah Streaming. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"wait_for_data()"},{"location":"reference/om/processing_layer/cheetah_streaming/#om.processing_layer.cheetah_streaming.StreamingCheetahProcessing.collect_data","text":"Computes statistics on aggregated data and broadcasts data to external programs. This function collects and accumulates frame- and peak-related information received from the processing nodes, and streams it to external programs. Optionally, it computes the sums of hit and non-hit detector frames and the corresponding virtual powder patterns, and saves them to file. Additionally, this function writes information about the processing statistics (number of processed events, number of found hits and the elapsed time) to a status file at regular intervals. External programs can inspect the file to determine the advancement of the data processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required","title":"collect_data()"},{"location":"reference/om/processing_layer/cheetah_streaming/#om.processing_layer.cheetah_streaming.StreamingCheetahProcessing.end_processing_on_processing_node","text":"Ends processing on the processing nodes for Cheetah Streaming. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information to be sent to the processing node.","title":"end_processing_on_processing_node()"},{"location":"reference/om/processing_layer/cheetah_streaming/#om.processing_layer.cheetah_streaming.StreamingCheetahProcessing.end_processing_on_collecting_node","text":"Ends processing on the collecting node for Cheetah Streaming. This function prints a message on the console, writes the final information in the sum and status files, closes the files and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"end_processing_on_collecting_node()"},{"location":"reference/om/processing_layer/crystallography/","text":"crystallography OnDA Monitor for Crystallography. This module contains an OnDA Monitor for serial x-ray crystallography experiments. CrystallographyProcessing Bases: OmProcessingProtocol See documentation for the __init__ function. __init__ ( * , monitor_parameters ) OnDA Monitor for Crystallography. This Processing class implements an OnDA Monitor for Serial Crystallography experiments. The monitor processes detector data frames, detecting Bragg peaks in each frame using the Peakfinder8PeakDetection algorithm, It retrieves information about the location, size, intensity, SNR and maximum pixel value of each peak. The monitor also calculates the evolution of the hit rate over time. and can additionally optionally collect examples of hit and non-hit calibrated detector data frames. All the information retrieved from the facility or extracted from the data is then streamed to external programs (like OM's Crystallography GUI # noqa: E501 or OM's Frame Viewer ) for visualization. The monitor can also respond to requests for data or change of behavior from external programs (a control GUI, for example.) Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_processing_node ( * , node_rank , node_pool_size ) Initializes the processing nodes for the Crystallography Monitor. This function initializes all the required algorithms (peak finding, binning, etc.), plus some internal counters. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_collecting_node ( * , node_rank , node_pool_size ) Initializes the collecting node for the Crystallography Monitor. This function initializes the data accumulation algorithms and the storage buffers used to compute statistics on the aggregated data. Additionally, it prepares all the necessary network sockets. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required process_data ( * , node_rank , node_pool_size , data ) Processes a detector data frame. This function processes retrieved data events, extracting the Bragg peak information. It prepares the reduced data (and optionally, the detector frame data) to be transmitted to the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data that OM retrieved for the detector data frame being processed. The dictionary keys describe the Data Sources for which OM has retrieved data. The keys must match the source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries. The first entry is a dictionary storing the processed data that should be sent to the collecting node. The second entry is the OM rank number of the node that processed the information. wait_for_data ( * , node_rank , node_pool_size ) Receives and handles requests from external programs. This function receives requests from external programs over a network socket and reacts according to the nature of the request, sending data back to the source of the request or modifying the internal behavior of the monitor. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required collect_data ( * , node_rank , node_pool_size , processed_data ) Computes statistics on aggregated data and broadcasts data to external programs. This function collects and accumulates frame- and peak-related information received from the processing nodes. It also computes a rolling average estimation of the hit rate evolution over time. Additionally, it uses the Bragg peak information to compute virtual powder pattern and a peakogram plot. All the aggregated information is then broadcast to external programs for visualization. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required end_processing_on_processing_node ( * , node_rank , node_pool_size ) Ends processing on the processing nodes for the Crystallography Monitor. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information to be sent to the processing node. end_processing_on_collecting_node ( * , node_rank , node_pool_size ) Ends processing on the collecting node for the Crystallography Monitor. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"crystallography"},{"location":"reference/om/processing_layer/crystallography/#om.processing_layer.crystallography","text":"OnDA Monitor for Crystallography. This module contains an OnDA Monitor for serial x-ray crystallography experiments.","title":"crystallography"},{"location":"reference/om/processing_layer/crystallography/#om.processing_layer.crystallography.CrystallographyProcessing","text":"Bases: OmProcessingProtocol See documentation for the __init__ function.","title":"CrystallographyProcessing"},{"location":"reference/om/processing_layer/crystallography/#om.processing_layer.crystallography.CrystallographyProcessing.__init__","text":"OnDA Monitor for Crystallography. This Processing class implements an OnDA Monitor for Serial Crystallography experiments. The monitor processes detector data frames, detecting Bragg peaks in each frame using the Peakfinder8PeakDetection algorithm, It retrieves information about the location, size, intensity, SNR and maximum pixel value of each peak. The monitor also calculates the evolution of the hit rate over time. and can additionally optionally collect examples of hit and non-hit calibrated detector data frames. All the information retrieved from the facility or extracted from the data is then streamed to external programs (like OM's Crystallography GUI # noqa: E501 or OM's Frame Viewer ) for visualization. The monitor can also respond to requests for data or change of behavior from external programs (a control GUI, for example.) Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/processing_layer/crystallography/#om.processing_layer.crystallography.CrystallographyProcessing.initialize_processing_node","text":"Initializes the processing nodes for the Crystallography Monitor. This function initializes all the required algorithms (peak finding, binning, etc.), plus some internal counters. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_processing_node()"},{"location":"reference/om/processing_layer/crystallography/#om.processing_layer.crystallography.CrystallographyProcessing.initialize_collecting_node","text":"Initializes the collecting node for the Crystallography Monitor. This function initializes the data accumulation algorithms and the storage buffers used to compute statistics on the aggregated data. Additionally, it prepares all the necessary network sockets. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_collecting_node()"},{"location":"reference/om/processing_layer/crystallography/#om.processing_layer.crystallography.CrystallographyProcessing.process_data","text":"Processes a detector data frame. This function processes retrieved data events, extracting the Bragg peak information. It prepares the reduced data (and optionally, the detector frame data) to be transmitted to the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data that OM retrieved for the detector data frame being processed. The dictionary keys describe the Data Sources for which OM has retrieved data. The keys must match the source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries. The first entry is a dictionary storing the processed data that should be sent to the collecting node. The second entry is the OM rank number of the node that processed the information.","title":"process_data()"},{"location":"reference/om/processing_layer/crystallography/#om.processing_layer.crystallography.CrystallographyProcessing.wait_for_data","text":"Receives and handles requests from external programs. This function receives requests from external programs over a network socket and reacts according to the nature of the request, sending data back to the source of the request or modifying the internal behavior of the monitor. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"wait_for_data()"},{"location":"reference/om/processing_layer/crystallography/#om.processing_layer.crystallography.CrystallographyProcessing.collect_data","text":"Computes statistics on aggregated data and broadcasts data to external programs. This function collects and accumulates frame- and peak-related information received from the processing nodes. It also computes a rolling average estimation of the hit rate evolution over time. Additionally, it uses the Bragg peak information to compute virtual powder pattern and a peakogram plot. All the aggregated information is then broadcast to external programs for visualization. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required","title":"collect_data()"},{"location":"reference/om/processing_layer/crystallography/#om.processing_layer.crystallography.CrystallographyProcessing.end_processing_on_processing_node","text":"Ends processing on the processing nodes for the Crystallography Monitor. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information to be sent to the processing node.","title":"end_processing_on_processing_node()"},{"location":"reference/om/processing_layer/crystallography/#om.processing_layer.crystallography.CrystallographyProcessing.end_processing_on_collecting_node","text":"Ends processing on the collecting node for the Crystallography Monitor. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"end_processing_on_collecting_node()"},{"location":"reference/om/processing_layer/testing/","text":"testing OnDA Test Monitor. This module contains an OnDA Monitor that can be used for testing. TestProcessing Bases: OmProcessingProtocol See documentation for the __init__ function. __init__ ( * , monitor_parameters ) OnDA Test Monitor. This Processing class implements an OnDA Monitor that can be used for testing purposes. The monitor retrieves data events, but does not process the them. It simply broadcasts the timestamp of each data event to a network socket. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_processing_node ( * , node_rank , node_pool_size ) Initializes the processing nodes for the Test Monitor. This function does not actually perform any task. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_collecting_node ( * , node_rank , node_pool_size ) Initializes the collecting node for the Test Monitor. This function simply initializes the some internal counters and prepares a network socket. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required process_data ( * , node_rank , node_pool_size , data ) Processes a data event. This function processes data events but does nothing with them. It simply extracts the timestamp information for each data event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data that OM retrieved for the detector data frame being processed. The dictionary keys describe the Data Sources for which OM has retrieved data. The keys must match the source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries. The first entry is a dictionary storing the processed data that should be sent to the collecting node. The second entry is the OM rank number of the node that processed the information. wait_for_data ( * , node_rank , node_pool_size ) Receives and handles requests from external programs. This function is not used in the Testing Monitor, and therefore does nothing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required collect_data ( * , node_rank , node_pool_size , processed_data ) Computes statistics on aggregated data and broadcasts data to external programs. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This function receives data from the processing node, but does nothing with it. It simply broadcasts the value of an event counter and the timestamp of each received event over a network socket. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required end_processing_on_processing_node ( * , node_rank , node_pool_size ) Ends processing on the processing nodes for the testing Monitor. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information to be sent to the processing node. end_processing_on_collecting_node ( * , node_rank , node_pool_size ) Ends processing on the collecting node. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"testing"},{"location":"reference/om/processing_layer/testing/#om.processing_layer.testing","text":"OnDA Test Monitor. This module contains an OnDA Monitor that can be used for testing.","title":"testing"},{"location":"reference/om/processing_layer/testing/#om.processing_layer.testing.TestProcessing","text":"Bases: OmProcessingProtocol See documentation for the __init__ function.","title":"TestProcessing"},{"location":"reference/om/processing_layer/testing/#om.processing_layer.testing.TestProcessing.__init__","text":"OnDA Test Monitor. This Processing class implements an OnDA Monitor that can be used for testing purposes. The monitor retrieves data events, but does not process the them. It simply broadcasts the timestamp of each data event to a network socket. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/processing_layer/testing/#om.processing_layer.testing.TestProcessing.initialize_processing_node","text":"Initializes the processing nodes for the Test Monitor. This function does not actually perform any task. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_processing_node()"},{"location":"reference/om/processing_layer/testing/#om.processing_layer.testing.TestProcessing.initialize_collecting_node","text":"Initializes the collecting node for the Test Monitor. This function simply initializes the some internal counters and prepares a network socket. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_collecting_node()"},{"location":"reference/om/processing_layer/testing/#om.processing_layer.testing.TestProcessing.process_data","text":"Processes a data event. This function processes data events but does nothing with them. It simply extracts the timestamp information for each data event. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data that OM retrieved for the detector data frame being processed. The dictionary keys describe the Data Sources for which OM has retrieved data. The keys must match the source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries. The first entry is a dictionary storing the processed data that should be sent to the collecting node. The second entry is the OM rank number of the node that processed the information.","title":"process_data()"},{"location":"reference/om/processing_layer/testing/#om.processing_layer.testing.TestProcessing.wait_for_data","text":"Receives and handles requests from external programs. This function is not used in the Testing Monitor, and therefore does nothing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"wait_for_data()"},{"location":"reference/om/processing_layer/testing/#om.processing_layer.testing.TestProcessing.collect_data","text":"Computes statistics on aggregated data and broadcasts data to external programs. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This function receives data from the processing node, but does nothing with it. It simply broadcasts the value of an event counter and the timestamp of each received event over a network socket. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required","title":"collect_data()"},{"location":"reference/om/processing_layer/testing/#om.processing_layer.testing.TestProcessing.end_processing_on_processing_node","text":"Ends processing on the processing nodes for the testing Monitor. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information to be sent to the processing node.","title":"end_processing_on_processing_node()"},{"location":"reference/om/processing_layer/testing/#om.processing_layer.testing.TestProcessing.end_processing_on_collecting_node","text":"Ends processing on the collecting node. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"end_processing_on_collecting_node()"},{"location":"reference/om/processing_layer/xes/","text":"xes OnDA Monitor for X-ray Emission Spectroscopy. This module contains an OnDA Monitor for x-ray emission spectroscopy experiments. XesProcessing Bases: OmProcessingProtocol See documentation for the __init__ function. __init__ ( * , monitor_parameters ) OnDA Monitor for X-ray Emission Spectroscopy. This Processing class implements and OnDA Monitor for X-ray Emission Spectroscopy experiments. The monitor processes camera data frames,extracting an energy spectrum from each of the data frames. The monitor computes smoothed and averaged spectral data information and broadcasts it to external programs (like OM's XES GUI , for visualization. In time resolved experiments, the monitor can process spectra for pumped and dark events separately, and compute their difference. This monitor is designed to work with cameras or simple single-module detectors. It will not work with a segmented detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_processing_node ( * , node_rank , node_pool_size ) Initializes the processing nodes for the XES Monitor. This function initializes the the spectrum extraction algorithm, plus some internal counters. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_collecting_node ( * , node_rank , node_pool_size ) Initializes the collecting node for the XES Monitor. This function initializes the data accumulation algorithms and the storage buffers used to compute statistics on the aggregated spectral data. Additionally, it prepares all the necessary network sockets. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required process_data ( * , node_rank , node_pool_size , data ) Processes a detector data frame and extracts spectrum information. This function processes retrieved data events, extracting an energy spectrum from each of them. It additionally prepares the spectral data for transmission to to the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data that OM retrieved for the detector data frame being processed. The dictionary keys describe the Data Sources for which OM has retrieved data. The keys must match the source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries. The first entry is a dictionary storing the processed data that should be sent to the collecting node. The second entry is the OM rank number of the node that processed the information. wait_for_data ( * , node_rank , node_pool_size ) Receives and handles requests from external programs. This function receives requests from external programs over a network socket and reacts according to the nature of the request, sending data back to the source of the request or modifying the internal behavior of the monitor. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required collect_data ( * , node_rank , node_pool_size , processed_data ) Computes statistics on aggregated spectrum data and broadcasts them. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This function computes aggregated statistics on spectral data received from the processing nodes. It then broadcasts the aggregated information to external programs for visualization. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required end_processing_on_processing_node ( * , node_rank , node_pool_size ) Ends processing on the processing nodes for the XES Monitor. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information to be sent to the processing node. end_processing_on_collecting_node ( * , node_rank , node_pool_size ) Ends processing on the collecting node for the XES Monitor. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"xes"},{"location":"reference/om/processing_layer/xes/#om.processing_layer.xes","text":"OnDA Monitor for X-ray Emission Spectroscopy. This module contains an OnDA Monitor for x-ray emission spectroscopy experiments.","title":"xes"},{"location":"reference/om/processing_layer/xes/#om.processing_layer.xes.XesProcessing","text":"Bases: OmProcessingProtocol See documentation for the __init__ function.","title":"XesProcessing"},{"location":"reference/om/processing_layer/xes/#om.processing_layer.xes.XesProcessing.__init__","text":"OnDA Monitor for X-ray Emission Spectroscopy. This Processing class implements and OnDA Monitor for X-ray Emission Spectroscopy experiments. The monitor processes camera data frames,extracting an energy spectrum from each of the data frames. The monitor computes smoothed and averaged spectral data information and broadcasts it to external programs (like OM's XES GUI , for visualization. In time resolved experiments, the monitor can process spectra for pumped and dark events separately, and compute their difference. This monitor is designed to work with cameras or simple single-module detectors. It will not work with a segmented detector. This class implements the interface described by its base Protocol class. Please see the documentation of that class for additional information about the interface. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/processing_layer/xes/#om.processing_layer.xes.XesProcessing.initialize_processing_node","text":"Initializes the processing nodes for the XES Monitor. This function initializes the the spectrum extraction algorithm, plus some internal counters. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_processing_node()"},{"location":"reference/om/processing_layer/xes/#om.processing_layer.xes.XesProcessing.initialize_collecting_node","text":"Initializes the collecting node for the XES Monitor. This function initializes the data accumulation algorithms and the storage buffers used to compute statistics on the aggregated spectral data. Additionally, it prepares all the necessary network sockets. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_collecting_node()"},{"location":"reference/om/processing_layer/xes/#om.processing_layer.xes.XesProcessing.process_data","text":"Processes a detector data frame and extracts spectrum information. This function processes retrieved data events, extracting an energy spectrum from each of them. It additionally prepares the spectral data for transmission to to the collecting node. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data that OM retrieved for the detector data frame being processed. The dictionary keys describe the Data Sources for which OM has retrieved data. The keys must match the source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries. The first entry is a dictionary storing the processed data that should be sent to the collecting node. The second entry is the OM rank number of the node that processed the information.","title":"process_data()"},{"location":"reference/om/processing_layer/xes/#om.processing_layer.xes.XesProcessing.wait_for_data","text":"Receives and handles requests from external programs. This function receives requests from external programs over a network socket and reacts according to the nature of the request, sending data back to the source of the request or modifying the internal behavior of the monitor. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"wait_for_data()"},{"location":"reference/om/processing_layer/xes/#om.processing_layer.xes.XesProcessing.collect_data","text":"Computes statistics on aggregated spectrum data and broadcasts them. This method overrides the corresponding method of the base class: please also refer to the documentation of that class for more information. This function computes aggregated statistics on spectral data received from the processing nodes. It then broadcasts the aggregated information to external programs for visualization. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required","title":"collect_data()"},{"location":"reference/om/processing_layer/xes/#om.processing_layer.xes.XesProcessing.end_processing_on_processing_node","text":"Ends processing on the processing nodes for the XES Monitor. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information to be sent to the processing node.","title":"end_processing_on_processing_node()"},{"location":"reference/om/processing_layer/xes/#om.processing_layer.xes.XesProcessing.end_processing_on_collecting_node","text":"Ends processing on the collecting node for the XES Monitor. This function prints a message on the console and ends the processing. Please see the documentation of the base Protocol class for additional information about this method. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"end_processing_on_collecting_node()"},{"location":"reference/om/protocols/","text":"protocols OM's Protocols. This package contains the base Protocol classes that describe the interfaces of the classes in OM's Data Retrieval, Parallelization, and Processing Layers. Each module in the package contains the Protocols for one of the three layers. data_retrieval_layer parallelization_layer processing_layer","title":"__init__"},{"location":"reference/om/protocols/#om.protocols","text":"OM's Protocols. This package contains the base Protocol classes that describe the interfaces of the classes in OM's Data Retrieval, Parallelization, and Processing Layers. Each module in the package contains the Protocols for one of the three layers. data_retrieval_layer parallelization_layer processing_layer","title":"protocols"},{"location":"reference/om/protocols/data_retrieval_layer/","text":"data_retrieval_layer Data Extraction Layer's Protocol classes. This module contains base Protocol classes for OM's Data Extraction Layer. OmDataSourceProtocol Bases: Protocol See documentation of the __init__ function. __init__ ( * , data_source_name , monitor_parameters ) Protocol for OM's Data Source classes. Data Sources are classes that perform all the operations needed to retrieve data from a single specific sensor or detector. A Data Source class can refer to any type of detector, from a simple diode or wave digitizer, to a big x-ray or optical detector. This class Protocol describes the interface that every Data Source class in OM must implement. A Data Source class must be initialized with the full set of OM's configuration parameters, from which it extracts information about the sensor or detector. An identifying name for the sensor must also be provided. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_data_source () Data source initialization. This method prepares OM to retrieve data from the sensor or detector, reading all the necessary configuration parameters and retrieving any additional required external data. get_data ( * , event ) Data Retrieval. This function retrieves all the data generated by the sensor or detector for the provided data event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Any Data from the sensor. OmDataEventHandlerProtocol Bases: Protocol See documentation of the __init__ function. __init__ ( * , source , data_sources , monitor_parameters ) Protocol class for OM's Data Event Handler classes. Data Event Handlers are classes that deal with data events and their sources. They have methods to initialize data event sources, retrieve events from them, open and close events, and examine the events' content. This Protocol class describes the interface that every Data Event Handler class in OM must implement. A Data Event Handler class must be initialized with a string describing its data event source, and with a set of Data Source class instances that instruct the Data Event Handler on how to retrieve data from the events. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the data source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_event_handling_on_collecting_node ( * , node_rank , node_pool_size ) Initializes event handling on the collecting node. This function is called on the collecting node when OM starts, and initializes the event handling on the node. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_event_handling_on_processing_node ( * , node_rank , node_pool_size ) Initializes event handling on a processing node. This function is called on a processing node when OM starts. It configures the node to start retrieving and processing data events, and initializes all the relevant Data Sources. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required event_generator ( * , node_rank , node_pool_size ) Retrieves events from the source. This function retrieves a series of data events from a source. OM calls this function on each processing node to start retrieving events. The function, which is a generator, returns an iterator over the events that the calling node must process. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Yields: Type Description Dict [ str , Any ] A dictionary storing the data for the current event. open_event ( * , event ) Opens an event. This function processes a data event and makes its content accessible for OM. OM calls this function on each processing node before the extract_data function. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required close_event ( * , event ) Closes an event. This function processes a data event and prepares it to be discarded by OM. OM calls this function on each processing node after the extract_data function. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required extract_data ( * , event ) Extracts data from a frame stored in an event. This function extracts data from a data event. It works by calling, one after the other, the get_data function of each Data Source associated with the event, passing the event itself as input each time. Each function call returns the data extracted from the Data Source. All the retrieved data items are finally aggregated and returned. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data that could be extracted from the Data Source for the provided event. initialize_event_data_retrieval () Initializes frame data retrieval. This function initializes the retrieval of data for a single standalone data event from a data event source, with all its related information. The way this function operates is in contrast with the way OM usually works. OM usually retrieves a series of events in sequence, one after the other. This function retrieves a single event, separated from all others. This function can be called on any type of node in OM and even outside of an OnDA Monitor class instance. It prepares the system to retrieve the event data, it initializes the relevant Data Sources, etc. After this function has been called, data for single events can be retrieved by invoking the retrieve_event_data function. retrieve_event_data ( event_id ) Retrieves all data attached to the requested data event. This function retrieves all the information associated with the data event specified by the provided identifier. The data is returned in the form of a dictionary. Before this function can be called, frame data retrieval must be initialized by calling the initialize_event_data_retrieval function. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested data event. OmDataRetrievalProtocol Bases: Protocol See documentation of the __init__ function. __init__ ( * , monitor_parameters , source ) Protocol for OM's Data Retrieval classes. Data Retrieval classes implement OM's Data Retrieval Layer for a specific beamline, experiment or facility. They describe how data is retrieved and data events are managed. This Protocol class describes the interface that every Data Retrieval class in OM must implement. A Data Retrieval class must be initialized with a string describing a data event source, and the full set of OM's configuration parameters. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required get_data_event_handler () Retrieves the Data Event Handler used by the class. This function returns the Data Event Handler used by the Data Retrieval class to manipulate data events. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"data_retrieval_layer"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer","text":"Data Extraction Layer's Protocol classes. This module contains base Protocol classes for OM's Data Extraction Layer.","title":"data_retrieval_layer"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataSourceProtocol","text":"Bases: Protocol See documentation of the __init__ function.","title":"OmDataSourceProtocol"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataSourceProtocol.__init__","text":"Protocol for OM's Data Source classes. Data Sources are classes that perform all the operations needed to retrieve data from a single specific sensor or detector. A Data Source class can refer to any type of detector, from a simple diode or wave digitizer, to a big x-ray or optical detector. This class Protocol describes the interface that every Data Source class in OM must implement. A Data Source class must be initialized with the full set of OM's configuration parameters, from which it extracts information about the sensor or detector. An identifying name for the sensor must also be provided. Parameters: Name Type Description Default data_source_name str A name that identifies the current data source. It is used, for example, in communications with the user or for the retrieval of a sensor's initialization required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataSourceProtocol.initialize_data_source","text":"Data source initialization. This method prepares OM to retrieve data from the sensor or detector, reading all the necessary configuration parameters and retrieving any additional required external data.","title":"initialize_data_source()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataSourceProtocol.get_data","text":"Data Retrieval. This function retrieves all the data generated by the sensor or detector for the provided data event. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Any Data from the sensor.","title":"get_data()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataEventHandlerProtocol","text":"Bases: Protocol See documentation of the __init__ function.","title":"OmDataEventHandlerProtocol"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataEventHandlerProtocol.__init__","text":"Protocol class for OM's Data Event Handler classes. Data Event Handlers are classes that deal with data events and their sources. They have methods to initialize data event sources, retrieve events from them, open and close events, and examine the events' content. This Protocol class describes the interface that every Data Event Handler class in OM must implement. A Data Event Handler class must be initialized with a string describing its data event source, and with a set of Data Source class instances that instruct the Data Event Handler on how to retrieve data from the events. Parameters: Name Type Description Default source str A string describing the data event source. required data_sources Dict [ str , OmDataSourceProtocol ] A dictionary containing a set of Data Source class instances. Each dictionary key must define the name of a data source. The corresponding dictionary value must store the instance of the Data Source class # noqa: E501 that describes the data source. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataEventHandlerProtocol.initialize_event_handling_on_collecting_node","text":"Initializes event handling on the collecting node. This function is called on the collecting node when OM starts, and initializes the event handling on the node. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_collecting_node()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataEventHandlerProtocol.initialize_event_handling_on_processing_node","text":"Initializes event handling on a processing node. This function is called on a processing node when OM starts. It configures the node to start retrieving and processing data events, and initializes all the relevant Data Sources. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_event_handling_on_processing_node()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataEventHandlerProtocol.event_generator","text":"Retrieves events from the source. This function retrieves a series of data events from a source. OM calls this function on each processing node to start retrieving events. The function, which is a generator, returns an iterator over the events that the calling node must process. Parameters: Name Type Description Default node_rank int The rank, in the OM pool, of the processing node calling the function. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Yields: Type Description Dict [ str , Any ] A dictionary storing the data for the current event.","title":"event_generator()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataEventHandlerProtocol.open_event","text":"Opens an event. This function processes a data event and makes its content accessible for OM. OM calls this function on each processing node before the extract_data function. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"open_event()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataEventHandlerProtocol.close_event","text":"Closes an event. This function processes a data event and prepares it to be discarded by OM. OM calls this function on each processing node after the extract_data function. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required","title":"close_event()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataEventHandlerProtocol.extract_data","text":"Extracts data from a frame stored in an event. This function extracts data from a data event. It works by calling, one after the other, the get_data function of each Data Source associated with the event, passing the event itself as input each time. Each function call returns the data extracted from the Data Source. All the retrieved data items are finally aggregated and returned. Parameters: Name Type Description Default event Dict [ str , Any ] A dictionary storing the event data. required Returns: Type Description Dict [ str , Any ] A dictionary storing the extracted data. Each dictionary key identifies a Data Source in the event for which data has been retrieved. The corresponding dictionary value stores the data that could be extracted from the Data Source for the provided event.","title":"extract_data()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataEventHandlerProtocol.initialize_event_data_retrieval","text":"Initializes frame data retrieval. This function initializes the retrieval of data for a single standalone data event from a data event source, with all its related information. The way this function operates is in contrast with the way OM usually works. OM usually retrieves a series of events in sequence, one after the other. This function retrieves a single event, separated from all others. This function can be called on any type of node in OM and even outside of an OnDA Monitor class instance. It prepares the system to retrieve the event data, it initializes the relevant Data Sources, etc. After this function has been called, data for single events can be retrieved by invoking the retrieve_event_data function.","title":"initialize_event_data_retrieval()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataEventHandlerProtocol.retrieve_event_data","text":"Retrieves all data attached to the requested data event. This function retrieves all the information associated with the data event specified by the provided identifier. The data is returned in the form of a dictionary. Before this function can be called, frame data retrieval must be initialized by calling the initialize_event_data_retrieval function. Parameters: Name Type Description Default event_id str A string that uniquely identifies a data event. required Returns: Type Description Dict [ str , Any ] All data related to the requested data event.","title":"retrieve_event_data()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataRetrievalProtocol","text":"Bases: Protocol See documentation of the __init__ function.","title":"OmDataRetrievalProtocol"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataRetrievalProtocol.__init__","text":"Protocol for OM's Data Retrieval classes. Data Retrieval classes implement OM's Data Retrieval Layer for a specific beamline, experiment or facility. They describe how data is retrieved and data events are managed. This Protocol class describes the interface that every Data Retrieval class in OM must implement. A Data Retrieval class must be initialized with a string describing a data event source, and the full set of OM's configuration parameters. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required source str A string describing the data event source. required","title":"__init__()"},{"location":"reference/om/protocols/data_retrieval_layer/#om.protocols.data_retrieval_layer.OmDataRetrievalProtocol.get_data_event_handler","text":"Retrieves the Data Event Handler used by the class. This function returns the Data Event Handler used by the Data Retrieval class to manipulate data events. Returns: Type Description OmDataEventHandlerProtocol The Data Event Handler used by the Data Retrieval class.","title":"get_data_event_handler()"},{"location":"reference/om/protocols/parallelization_layer/","text":"parallelization_layer Parallelization Layer's Protocol classes. This module contains base Protocol classes for OM's Parallelization Layer. OmParallelizationProtocol Bases: Protocol See documentation of the __init__ function. __init__ ( * , data_retrieval_layer , processing_layer , monitor_parameters ) Protocol for OM's Parallelization classes. Parallelization classes orchestrate OM's processing and collecting nodes, and take care of the communication between them. When OM start, a Parallelization class instance initializes several processing nodes, plus a single collecting node. The class then associates an instance of a Data Retrieval class (see OmDataRetrievalProtocol; ) # noqa: E501 and an instance of a Processing class (see OmProcessingProtocol][om.protocols.processing_layer.OmProcessingProtocol]) with each node. Each processing node retrieves an event from a data event source by calling the relevant Data Retrieval class methods. It then invokes the appropriate Processing class methods on the event. Finally, it transfers the processed data to the collecting node. The node then retrieves another event, and the cycle continues until there are no more data events or OM shuts down. Every time it receives data from a processing node, the collecting node invokes the relevant Processing class methods to aggregate the received data. When all events from the source have been processed, all nodes perform some final clean-up tasks by calling the appropriate methods of the Processing class. All nodes then shut down. This Protocol class describes the interface that every Parallelization class in OM must implement. Parameters: Name Type Description Default data_retrieval_layer OmDataRetrievalProtocol A class instance defining how data and data events are retrieved and handled. required processing_layer OmProcessingProtocol A class instance defining how retrieved data is processed. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required start () Starts OM. This function begins operations on the processing and collecting nodes. When this function is called on a processing node, the processing node starts retrieving data events and processing them. When instead this function is called on the collecting node, the node starts receiving data from the processing nodes and aggregating it. shutdown ( * , msg = 'Reason not provided.' ) Shuts down OM. This function stops the processing and collecting nodes. When this function is called on a processing node, the processing node communicates to the collecting node that it is shutting down, then shuts down. When instead this function is called on the collecting node, the collecting node tells every processing node to shut down, waits for all the nodes to confirm that they have stopped operating, then shuts itself down. Parameters: Name Type Description Default msg str Reason for shutting down. Defaults to \"Reason not provided\". 'Reason not provided.'","title":"parallelization_layer"},{"location":"reference/om/protocols/parallelization_layer/#om.protocols.parallelization_layer","text":"Parallelization Layer's Protocol classes. This module contains base Protocol classes for OM's Parallelization Layer.","title":"parallelization_layer"},{"location":"reference/om/protocols/parallelization_layer/#om.protocols.parallelization_layer.OmParallelizationProtocol","text":"Bases: Protocol See documentation of the __init__ function.","title":"OmParallelizationProtocol"},{"location":"reference/om/protocols/parallelization_layer/#om.protocols.parallelization_layer.OmParallelizationProtocol.__init__","text":"Protocol for OM's Parallelization classes. Parallelization classes orchestrate OM's processing and collecting nodes, and take care of the communication between them. When OM start, a Parallelization class instance initializes several processing nodes, plus a single collecting node. The class then associates an instance of a Data Retrieval class (see OmDataRetrievalProtocol; ) # noqa: E501 and an instance of a Processing class (see OmProcessingProtocol][om.protocols.processing_layer.OmProcessingProtocol]) with each node. Each processing node retrieves an event from a data event source by calling the relevant Data Retrieval class methods. It then invokes the appropriate Processing class methods on the event. Finally, it transfers the processed data to the collecting node. The node then retrieves another event, and the cycle continues until there are no more data events or OM shuts down. Every time it receives data from a processing node, the collecting node invokes the relevant Processing class methods to aggregate the received data. When all events from the source have been processed, all nodes perform some final clean-up tasks by calling the appropriate methods of the Processing class. All nodes then shut down. This Protocol class describes the interface that every Parallelization class in OM must implement. Parameters: Name Type Description Default data_retrieval_layer OmDataRetrievalProtocol A class instance defining how data and data events are retrieved and handled. required processing_layer OmProcessingProtocol A class instance defining how retrieved data is processed. required monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/protocols/parallelization_layer/#om.protocols.parallelization_layer.OmParallelizationProtocol.start","text":"Starts OM. This function begins operations on the processing and collecting nodes. When this function is called on a processing node, the processing node starts retrieving data events and processing them. When instead this function is called on the collecting node, the node starts receiving data from the processing nodes and aggregating it.","title":"start()"},{"location":"reference/om/protocols/parallelization_layer/#om.protocols.parallelization_layer.OmParallelizationProtocol.shutdown","text":"Shuts down OM. This function stops the processing and collecting nodes. When this function is called on a processing node, the processing node communicates to the collecting node that it is shutting down, then shuts down. When instead this function is called on the collecting node, the collecting node tells every processing node to shut down, waits for all the nodes to confirm that they have stopped operating, then shuts itself down. Parameters: Name Type Description Default msg str Reason for shutting down. Defaults to \"Reason not provided\". 'Reason not provided.'","title":"shutdown()"},{"location":"reference/om/protocols/processing_layer/","text":"processing_layer Processing Layer's Protocol classes. This module contains base Protocol classes for OM's Processing Layer. OmProcessingProtocol Bases: Protocol See documentation for the __init__ function. __init__ ( * , monitor_parameters ) Protocol for OM's Processing classes. Processing classes implement scientific data processing pipelines in OM. A Processing class defines how each individual retrieved data event is analyzed on the processing nodes and how multiple events are aggregated on the collecting node. A Processing class also determined which actions OM performs at the beginning and at the end of the data processing. This Protocol class describes the interface that every Processing class in OM must implement. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required initialize_processing_node ( * , node_rank , node_pool_size ) Initializes an OM processing node. This function is invoked on each processing node when OM starts. It performs all the operations needed to prepares the node to retrieve and process data events (recovering additional needed external data, initializing the algorithms with all required parameters, etc.) Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required initialize_collecting_node ( * , node_rank , node_pool_size ) Initializes an OM collecting node. This function is invoked on the collecting node when OM starts. It performs all the operation needed to prepare the collecting node to aggregate events received from the processing nodes (creating memory buffers, initializing the collecting algorithm, etc.) Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required process_data ( * , node_rank , node_pool_size , data ) Processes a single data event. This function is invoked on each processing node for every retrieved data event. It receives the data event as input and returns processed data. The output of this function is transferred by OM to the collecting node. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data retrieved by OM for the data event being processed. The dictionary keys must be the names of the Data Sources for which OM retrieves data. The keys in this dictionary must match the Data Source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries, with the first entry being a dictionary storing the processed data that should be sent to the collecting node, and the second being the OM rank number of the node that processed the information. wait_for_data ( * , node_rank , node_pool_size ) Performs operations on the collecting node when no data is received. This function is called on the collecting node continuously, when the node is not receiving data from any processing node (When data is received, the collect_data is invoked instead). This function can be used to perform operations that need to be carried out even when the data stream is not active (reacting to external commands and requests, updating graphical interfaces, etc.) Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required collect_data ( * , node_rank , node_pool_size , processed_data ) Collects processed data from a processing node. This function is invoked on the collecting node every time data is received from a processing node (When data is not being received, the collecting node continuously calls the wait_for_data function instead). The function accepts as input the data received from the processing node (the tuple returned by the process_data method of this class), and performs calculations that must be carried out on aggregated data (computing cumulative statistics, preparing data for external programs or visualization, etc.) The function usually does not return any value, but can optionally return a nested dictionary (a dictionary whose values are other dictionaries). When this happens, the data in the dictionary is provided as feedback data to the processing nodes. The nested dictionary must have the following format: The keys of the outer dictionary must match the OM rank numbers of the processing nodes which receive the feedback data. A key value of 0 can be used to send feedback data to all the processing nodes at the same time. The value corresponding to each key of the outer dictionary must in turn be a dictionary that stores the feedback data that is sent to the node defined by the key. On each processing node, the feedback data dictionary, when received, is merged with the data argument of the process_data function the next time the function is called. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required Returns: Type Description Union [ Dict [ int , Dict [ str , Any ]], None] Usually nothing. Optionally, a nested dictionary that can be used to send feedback data to the processing nodes. end_processing_on_processing_node ( * , node_rank , node_pool_size ) Executes end-of-processing actions on a processing node. This function is called on each processing node at the end of the data processing, immediately before OM stops. It performs clean up and shut down operations (closing communication sockets, computing final statistics, etc.). This function usually does not return any value, but can optionally return a dictionary. If this happens, the dictionary is transferred to the collecting node before the processing node shuts down. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information that must be sent to the processing node. end_processing_on_collecting_node ( * , node_rank , node_pool_size ) Executes end-of-processing actions on the collecting node. This function is called on the collecting node at the end of the data processing, immediately before OM stops. It often performs clean up and shut operations (closing communication sockets, computing final statistics, etc.). Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"processing_layer"},{"location":"reference/om/protocols/processing_layer/#om.protocols.processing_layer","text":"Processing Layer's Protocol classes. This module contains base Protocol classes for OM's Processing Layer.","title":"processing_layer"},{"location":"reference/om/protocols/processing_layer/#om.protocols.processing_layer.OmProcessingProtocol","text":"Bases: Protocol See documentation for the __init__ function.","title":"OmProcessingProtocol"},{"location":"reference/om/protocols/processing_layer/#om.protocols.processing_layer.OmProcessingProtocol.__init__","text":"Protocol for OM's Processing classes. Processing classes implement scientific data processing pipelines in OM. A Processing class defines how each individual retrieved data event is analyzed on the processing nodes and how multiple events are aggregated on the collecting node. A Processing class also determined which actions OM performs at the beginning and at the end of the data processing. This Protocol class describes the interface that every Processing class in OM must implement. Parameters: Name Type Description Default monitor_parameters MonitorParameters An object storing OM's configuration parameters. required","title":"__init__()"},{"location":"reference/om/protocols/processing_layer/#om.protocols.processing_layer.OmProcessingProtocol.initialize_processing_node","text":"Initializes an OM processing node. This function is invoked on each processing node when OM starts. It performs all the operations needed to prepares the node to retrieve and process data events (recovering additional needed external data, initializing the algorithms with all required parameters, etc.) Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_processing_node()"},{"location":"reference/om/protocols/processing_layer/#om.protocols.processing_layer.OmProcessingProtocol.initialize_collecting_node","text":"Initializes an OM collecting node. This function is invoked on the collecting node when OM starts. It performs all the operation needed to prepare the collecting node to aggregate events received from the processing nodes (creating memory buffers, initializing the collecting algorithm, etc.) Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"initialize_collecting_node()"},{"location":"reference/om/protocols/processing_layer/#om.protocols.processing_layer.OmProcessingProtocol.process_data","text":"Processes a single data event. This function is invoked on each processing node for every retrieved data event. It receives the data event as input and returns processed data. The output of this function is transferred by OM to the collecting node. Parameters: Name Type Description Default node_rank int The OM rank of the current node int the OM node pool. The rank is an integer that unambiguously identifies the node in the pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required data Dict [ str , Any ] A dictionary containing the data retrieved by OM for the data event being processed. The dictionary keys must be the names of the Data Sources for which OM retrieves data. The keys in this dictionary must match the Data Source names listed in the required_data entry of OM's om configuration parameter group. The corresponding dictionary values must store the the data that OM retrieved for each of the Data Sources. required Returns: Type Description Tuple [ Dict [ str , Any ], int ] A tuple with two entries, with the first entry being a dictionary storing the processed data that should be sent to the collecting node, and the second being the OM rank number of the node that processed the information.","title":"process_data()"},{"location":"reference/om/protocols/processing_layer/#om.protocols.processing_layer.OmProcessingProtocol.wait_for_data","text":"Performs operations on the collecting node when no data is received. This function is called on the collecting node continuously, when the node is not receiving data from any processing node (When data is received, the collect_data is invoked instead). This function can be used to perform operations that need to be carried out even when the data stream is not active (reacting to external commands and requests, updating graphical interfaces, etc.) Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"wait_for_data()"},{"location":"reference/om/protocols/processing_layer/#om.protocols.processing_layer.OmProcessingProtocol.collect_data","text":"Collects processed data from a processing node. This function is invoked on the collecting node every time data is received from a processing node (When data is not being received, the collecting node continuously calls the wait_for_data function instead). The function accepts as input the data received from the processing node (the tuple returned by the process_data method of this class), and performs calculations that must be carried out on aggregated data (computing cumulative statistics, preparing data for external programs or visualization, etc.) The function usually does not return any value, but can optionally return a nested dictionary (a dictionary whose values are other dictionaries). When this happens, the data in the dictionary is provided as feedback data to the processing nodes. The nested dictionary must have the following format: The keys of the outer dictionary must match the OM rank numbers of the processing nodes which receive the feedback data. A key value of 0 can be used to send feedback data to all the processing nodes at the same time. The value corresponding to each key of the outer dictionary must in turn be a dictionary that stores the feedback data that is sent to the node defined by the key. On each processing node, the feedback data dictionary, when received, is merged with the data argument of the process_data function the next time the function is called. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required processed_data Tuple [ Dict , int ] A tuple whose first entry is a dictionary storing the data received from a processing node, and whose second entry is the OM rank number of the node that processed the information. required Returns: Type Description Union [ Dict [ int , Dict [ str , Any ]], None] Usually nothing. Optionally, a nested dictionary that can be used to send feedback data to the processing nodes.","title":"collect_data()"},{"location":"reference/om/protocols/processing_layer/#om.protocols.processing_layer.OmProcessingProtocol.end_processing_on_processing_node","text":"Executes end-of-processing actions on a processing node. This function is called on each processing node at the end of the data processing, immediately before OM stops. It performs clean up and shut down operations (closing communication sockets, computing final statistics, etc.). This function usually does not return any value, but can optionally return a dictionary. If this happens, the dictionary is transferred to the collecting node before the processing node shuts down. Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required Returns: Type Description Union [ Dict [ str , Any ], None] Usually nothing. Optionally, a dictionary storing information that must be sent to the processing node.","title":"end_processing_on_processing_node()"},{"location":"reference/om/protocols/processing_layer/#om.protocols.processing_layer.OmProcessingProtocol.end_processing_on_collecting_node","text":"Executes end-of-processing actions on the collecting node. This function is called on the collecting node at the end of the data processing, immediately before OM stops. It often performs clean up and shut operations (closing communication sockets, computing final statistics, etc.). Parameters: Name Type Description Default node_rank int The OM rank of the current node, which is an integer that unambiguously identifies the current node in the OM node pool. required node_pool_size int The total number of nodes in the OM pool, including all the processing nodes and the collecting node. required","title":"end_processing_on_collecting_node()"}]}